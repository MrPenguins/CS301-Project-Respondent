
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be4  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c894  0800c894  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c894  0800c894  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c894  0800c894  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c894  0800c894  0001c894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c898  0800c898  0001c898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c89c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a54  2000007c  0800c918  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad0  0800c918  00022ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6c4  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  0002e769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  000316c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a058  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef98  00000000  00000000  0004c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099426  00000000  00000000  0005b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f47ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e60  00000000  00000000  000f4804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000007c 	.word	0x2000007c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ac98 	.word	0x0800ac98

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000080 	.word	0x20000080
 8000224:	0800ac98 	.word	0x0800ac98

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_dmul>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000252:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000256:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800025a:	bf1d      	ittte	ne
 800025c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000260:	ea94 0f0c 	teqne	r4, ip
 8000264:	ea95 0f0c 	teqne	r5, ip
 8000268:	f000 f8de 	bleq	8000428 <__aeabi_dmul+0x1dc>
 800026c:	442c      	add	r4, r5
 800026e:	ea81 0603 	eor.w	r6, r1, r3
 8000272:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000276:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800027a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800027e:	bf18      	it	ne
 8000280:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800028c:	d038      	beq.n	8000300 <__aeabi_dmul+0xb4>
 800028e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000292:	f04f 0500 	mov.w	r5, #0
 8000296:	fbe1 e502 	umlal	lr, r5, r1, r2
 800029a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800029e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002a2:	f04f 0600 	mov.w	r6, #0
 80002a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002aa:	f09c 0f00 	teq	ip, #0
 80002ae:	bf18      	it	ne
 80002b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80002b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002c0:	d204      	bcs.n	80002cc <__aeabi_dmul+0x80>
 80002c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002c6:	416d      	adcs	r5, r5
 80002c8:	eb46 0606 	adc.w	r6, r6, r6
 80002cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002e4:	bf88      	it	hi
 80002e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ea:	d81e      	bhi.n	800032a <__aeabi_dmul+0xde>
 80002ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000304:	ea46 0101 	orr.w	r1, r6, r1
 8000308:	ea40 0002 	orr.w	r0, r0, r2
 800030c:	ea81 0103 	eor.w	r1, r1, r3
 8000310:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000314:	bfc2      	ittt	gt
 8000316:	ebd4 050c 	rsbsgt	r5, r4, ip
 800031a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800031e:	bd70      	popgt	{r4, r5, r6, pc}
 8000320:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000324:	f04f 0e00 	mov.w	lr, #0
 8000328:	3c01      	subs	r4, #1
 800032a:	f300 80ab 	bgt.w	8000484 <__aeabi_dmul+0x238>
 800032e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000332:	bfde      	ittt	le
 8000334:	2000      	movle	r0, #0
 8000336:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800033a:	bd70      	pople	{r4, r5, r6, pc}
 800033c:	f1c4 0400 	rsb	r4, r4, #0
 8000340:	3c20      	subs	r4, #32
 8000342:	da35      	bge.n	80003b0 <__aeabi_dmul+0x164>
 8000344:	340c      	adds	r4, #12
 8000346:	dc1b      	bgt.n	8000380 <__aeabi_dmul+0x134>
 8000348:	f104 0414 	add.w	r4, r4, #20
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f305 	lsl.w	r3, r0, r5
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f205 	lsl.w	r2, r1, r5
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000364:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	fa21 f604 	lsr.w	r6, r1, r4
 8000370:	eb42 0106 	adc.w	r1, r2, r6
 8000374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000378:	bf08      	it	eq
 800037a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f1c4 040c 	rsb	r4, r4, #12
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f304 	lsl.w	r3, r0, r4
 800038c:	fa20 f005 	lsr.w	r0, r0, r5
 8000390:	fa01 f204 	lsl.w	r2, r1, r4
 8000394:	ea40 0002 	orr.w	r0, r0, r2
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a8:	bf08      	it	eq
 80003aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f205 	lsl.w	r2, r0, r5
 80003b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80003bc:	fa20 f304 	lsr.w	r3, r0, r4
 80003c0:	fa01 f205 	lsl.w	r2, r1, r5
 80003c4:	ea43 0302 	orr.w	r3, r3, r2
 80003c8:	fa21 f004 	lsr.w	r0, r1, r4
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	fa21 f204 	lsr.w	r2, r1, r4
 80003d4:	ea20 0002 	bic.w	r0, r0, r2
 80003d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e0:	bf08      	it	eq
 80003e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f094 0f00 	teq	r4, #0
 80003ec:	d10f      	bne.n	800040e <__aeabi_dmul+0x1c2>
 80003ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003f2:	0040      	lsls	r0, r0, #1
 80003f4:	eb41 0101 	adc.w	r1, r1, r1
 80003f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fc:	bf08      	it	eq
 80003fe:	3c01      	subeq	r4, #1
 8000400:	d0f7      	beq.n	80003f2 <__aeabi_dmul+0x1a6>
 8000402:	ea41 0106 	orr.w	r1, r1, r6
 8000406:	f095 0f00 	teq	r5, #0
 800040a:	bf18      	it	ne
 800040c:	4770      	bxne	lr
 800040e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	eb43 0303 	adc.w	r3, r3, r3
 8000418:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800041c:	bf08      	it	eq
 800041e:	3d01      	subeq	r5, #1
 8000420:	d0f7      	beq.n	8000412 <__aeabi_dmul+0x1c6>
 8000422:	ea43 0306 	orr.w	r3, r3, r6
 8000426:	4770      	bx	lr
 8000428:	ea94 0f0c 	teq	r4, ip
 800042c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000430:	bf18      	it	ne
 8000432:	ea95 0f0c 	teqne	r5, ip
 8000436:	d00c      	beq.n	8000452 <__aeabi_dmul+0x206>
 8000438:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043c:	bf18      	it	ne
 800043e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000442:	d1d1      	bne.n	80003e8 <__aeabi_dmul+0x19c>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000456:	bf06      	itte	eq
 8000458:	4610      	moveq	r0, r2
 800045a:	4619      	moveq	r1, r3
 800045c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000460:	d019      	beq.n	8000496 <__aeabi_dmul+0x24a>
 8000462:	ea94 0f0c 	teq	r4, ip
 8000466:	d102      	bne.n	800046e <__aeabi_dmul+0x222>
 8000468:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800046c:	d113      	bne.n	8000496 <__aeabi_dmul+0x24a>
 800046e:	ea95 0f0c 	teq	r5, ip
 8000472:	d105      	bne.n	8000480 <__aeabi_dmul+0x234>
 8000474:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000478:	bf1c      	itt	ne
 800047a:	4610      	movne	r0, r2
 800047c:	4619      	movne	r1, r3
 800047e:	d10a      	bne.n	8000496 <__aeabi_dmul+0x24a>
 8000480:	ea81 0103 	eor.w	r1, r1, r3
 8000484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000488:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800049a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800049e:	bd70      	pop	{r4, r5, r6, pc}

080004a0 <__aeabi_drsub>:
 80004a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004a4:	e002      	b.n	80004ac <__adddf3>
 80004a6:	bf00      	nop

080004a8 <__aeabi_dsub>:
 80004a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004ac <__adddf3>:
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	bf1f      	itttt	ne
 80004c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d2:	f000 80e2 	beq.w	800069a <__adddf3+0x1ee>
 80004d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004de:	bfb8      	it	lt
 80004e0:	426d      	neglt	r5, r5
 80004e2:	dd0c      	ble.n	80004fe <__adddf3+0x52>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea80 0202 	eor.w	r2, r0, r2
 80004ea:	ea81 0303 	eor.w	r3, r1, r3
 80004ee:	ea82 0000 	eor.w	r0, r2, r0
 80004f2:	ea83 0101 	eor.w	r1, r3, r1
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	2d36      	cmp	r5, #54	; 0x36
 8000500:	bf88      	it	hi
 8000502:	bd30      	pophi	{r4, r5, pc}
 8000504:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000508:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800050c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000510:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x70>
 8000516:	4240      	negs	r0, r0
 8000518:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000520:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000524:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000528:	d002      	beq.n	8000530 <__adddf3+0x84>
 800052a:	4252      	negs	r2, r2
 800052c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000530:	ea94 0f05 	teq	r4, r5
 8000534:	f000 80a7 	beq.w	8000686 <__adddf3+0x1da>
 8000538:	f1a4 0401 	sub.w	r4, r4, #1
 800053c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000540:	db0d      	blt.n	800055e <__adddf3+0xb2>
 8000542:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000546:	fa22 f205 	lsr.w	r2, r2, r5
 800054a:	1880      	adds	r0, r0, r2
 800054c:	f141 0100 	adc.w	r1, r1, #0
 8000550:	fa03 f20e 	lsl.w	r2, r3, lr
 8000554:	1880      	adds	r0, r0, r2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	4159      	adcs	r1, r3
 800055c:	e00e      	b.n	800057c <__adddf3+0xd0>
 800055e:	f1a5 0520 	sub.w	r5, r5, #32
 8000562:	f10e 0e20 	add.w	lr, lr, #32
 8000566:	2a01      	cmp	r2, #1
 8000568:	fa03 fc0e 	lsl.w	ip, r3, lr
 800056c:	bf28      	it	cs
 800056e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000572:	fa43 f305 	asr.w	r3, r3, r5
 8000576:	18c0      	adds	r0, r0, r3
 8000578:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	d507      	bpl.n	8000592 <__adddf3+0xe6>
 8000582:	f04f 0e00 	mov.w	lr, #0
 8000586:	f1dc 0c00 	rsbs	ip, ip, #0
 800058a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800058e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000592:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000596:	d31b      	bcc.n	80005d0 <__adddf3+0x124>
 8000598:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800059c:	d30c      	bcc.n	80005b8 <__adddf3+0x10c>
 800059e:	0849      	lsrs	r1, r1, #1
 80005a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005a8:	f104 0401 	add.w	r4, r4, #1
 80005ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005b4:	f080 809a 	bcs.w	80006ec <__adddf3+0x240>
 80005b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005bc:	bf08      	it	eq
 80005be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005c2:	f150 0000 	adcs.w	r0, r0, #0
 80005c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ca:	ea41 0105 	orr.w	r1, r1, r5
 80005ce:	bd30      	pop	{r4, r5, pc}
 80005d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005d4:	4140      	adcs	r0, r0
 80005d6:	eb41 0101 	adc.w	r1, r1, r1
 80005da:	3c01      	subs	r4, #1
 80005dc:	bf28      	it	cs
 80005de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005e2:	d2e9      	bcs.n	80005b8 <__adddf3+0x10c>
 80005e4:	f091 0f00 	teq	r1, #0
 80005e8:	bf04      	itt	eq
 80005ea:	4601      	moveq	r1, r0
 80005ec:	2000      	moveq	r0, #0
 80005ee:	fab1 f381 	clz	r3, r1
 80005f2:	bf08      	it	eq
 80005f4:	3320      	addeq	r3, #32
 80005f6:	f1a3 030b 	sub.w	r3, r3, #11
 80005fa:	f1b3 0220 	subs.w	r2, r3, #32
 80005fe:	da0c      	bge.n	800061a <__adddf3+0x16e>
 8000600:	320c      	adds	r2, #12
 8000602:	dd08      	ble.n	8000616 <__adddf3+0x16a>
 8000604:	f102 0c14 	add.w	ip, r2, #20
 8000608:	f1c2 020c 	rsb	r2, r2, #12
 800060c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000610:	fa21 f102 	lsr.w	r1, r1, r2
 8000614:	e00c      	b.n	8000630 <__adddf3+0x184>
 8000616:	f102 0214 	add.w	r2, r2, #20
 800061a:	bfd8      	it	le
 800061c:	f1c2 0c20 	rsble	ip, r2, #32
 8000620:	fa01 f102 	lsl.w	r1, r1, r2
 8000624:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000628:	bfdc      	itt	le
 800062a:	ea41 010c 	orrle.w	r1, r1, ip
 800062e:	4090      	lslle	r0, r2
 8000630:	1ae4      	subs	r4, r4, r3
 8000632:	bfa2      	ittt	ge
 8000634:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000638:	4329      	orrge	r1, r5
 800063a:	bd30      	popge	{r4, r5, pc}
 800063c:	ea6f 0404 	mvn.w	r4, r4
 8000640:	3c1f      	subs	r4, #31
 8000642:	da1c      	bge.n	800067e <__adddf3+0x1d2>
 8000644:	340c      	adds	r4, #12
 8000646:	dc0e      	bgt.n	8000666 <__adddf3+0x1ba>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0220 	rsb	r2, r4, #32
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f302 	lsl.w	r3, r1, r2
 8000658:	ea40 0003 	orr.w	r0, r0, r3
 800065c:	fa21 f304 	lsr.w	r3, r1, r4
 8000660:	ea45 0103 	orr.w	r1, r5, r3
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	f1c4 040c 	rsb	r4, r4, #12
 800066a:	f1c4 0220 	rsb	r2, r4, #32
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 f304 	lsl.w	r3, r1, r4
 8000676:	ea40 0003 	orr.w	r0, r0, r3
 800067a:	4629      	mov	r1, r5
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	fa21 f004 	lsr.w	r0, r1, r4
 8000682:	4629      	mov	r1, r5
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	f094 0f00 	teq	r4, #0
 800068a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800068e:	bf06      	itte	eq
 8000690:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000694:	3401      	addeq	r4, #1
 8000696:	3d01      	subne	r5, #1
 8000698:	e74e      	b.n	8000538 <__adddf3+0x8c>
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf18      	it	ne
 80006a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006a4:	d029      	beq.n	80006fa <__adddf3+0x24e>
 80006a6:	ea94 0f05 	teq	r4, r5
 80006aa:	bf08      	it	eq
 80006ac:	ea90 0f02 	teqeq	r0, r2
 80006b0:	d005      	beq.n	80006be <__adddf3+0x212>
 80006b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006b6:	bf04      	itt	eq
 80006b8:	4619      	moveq	r1, r3
 80006ba:	4610      	moveq	r0, r2
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea91 0f03 	teq	r1, r3
 80006c2:	bf1e      	ittt	ne
 80006c4:	2100      	movne	r1, #0
 80006c6:	2000      	movne	r0, #0
 80006c8:	bd30      	popne	{r4, r5, pc}
 80006ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ce:	d105      	bne.n	80006dc <__adddf3+0x230>
 80006d0:	0040      	lsls	r0, r0, #1
 80006d2:	4149      	adcs	r1, r1
 80006d4:	bf28      	it	cs
 80006d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd30      	pop	{r4, r5, pc}
 80006dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006e0:	bf3c      	itt	cc
 80006e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006e6:	bd30      	popcc	{r4, r5, pc}
 80006e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf1a      	itte	ne
 8000700:	4619      	movne	r1, r3
 8000702:	4610      	movne	r0, r2
 8000704:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000708:	bf1c      	itt	ne
 800070a:	460b      	movne	r3, r1
 800070c:	4602      	movne	r2, r0
 800070e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000712:	bf06      	itte	eq
 8000714:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000718:	ea91 0f03 	teqeq	r1, r3
 800071c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop

08000724 <__aeabi_ui2d>:
 8000724:	f090 0f00 	teq	r0, #0
 8000728:	bf04      	itt	eq
 800072a:	2100      	moveq	r1, #0
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000734:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000738:	f04f 0500 	mov.w	r5, #0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e750      	b.n	80005e4 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_i2d>:
 8000744:	f090 0f00 	teq	r0, #0
 8000748:	bf04      	itt	eq
 800074a:	2100      	moveq	r1, #0
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000754:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000758:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800075c:	bf48      	it	mi
 800075e:	4240      	negmi	r0, r0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e73e      	b.n	80005e4 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_f2d>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800076e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000772:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000776:	bf1f      	itttt	ne
 8000778:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800077c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000780:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000784:	4770      	bxne	lr
 8000786:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800078a:	bf08      	it	eq
 800078c:	4770      	bxeq	lr
 800078e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000792:	bf04      	itt	eq
 8000794:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	e71c      	b.n	80005e4 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_ul2d>:
 80007ac:	ea50 0201 	orrs.w	r2, r0, r1
 80007b0:	bf08      	it	eq
 80007b2:	4770      	bxeq	lr
 80007b4:	b530      	push	{r4, r5, lr}
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	e00a      	b.n	80007d2 <__aeabi_l2d+0x16>

080007bc <__aeabi_l2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ca:	d502      	bpl.n	80007d2 <__aeabi_l2d+0x16>
 80007cc:	4240      	negs	r0, r0
 80007ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007de:	f43f aed8 	beq.w	8000592 <__adddf3+0xe6>
 80007e2:	f04f 0203 	mov.w	r2, #3
 80007e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ea:	bf18      	it	ne
 80007ec:	3203      	addne	r2, #3
 80007ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007f2:	bf18      	it	ne
 80007f4:	3203      	addne	r2, #3
 80007f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007fa:	f1c2 0320 	rsb	r3, r2, #32
 80007fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	fa01 fe03 	lsl.w	lr, r1, r3
 800080a:	ea40 000e 	orr.w	r0, r0, lr
 800080e:	fa21 f102 	lsr.w	r1, r1, r2
 8000812:	4414      	add	r4, r2
 8000814:	e6bd      	b.n	8000592 <__adddf3+0xe6>
 8000816:	bf00      	nop

08000818 <__aeabi_d2uiz>:
 8000818:	004a      	lsls	r2, r1, #1
 800081a:	d211      	bcs.n	8000840 <__aeabi_d2uiz+0x28>
 800081c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000820:	d211      	bcs.n	8000846 <__aeabi_d2uiz+0x2e>
 8000822:	d50d      	bpl.n	8000840 <__aeabi_d2uiz+0x28>
 8000824:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000828:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800082c:	d40e      	bmi.n	800084c <__aeabi_d2uiz+0x34>
 800082e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000836:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800083a:	fa23 f002 	lsr.w	r0, r3, r2
 800083e:	4770      	bx	lr
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	4770      	bx	lr
 8000846:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800084a:	d102      	bne.n	8000852 <__aeabi_d2uiz+0x3a>
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	4770      	bx	lr
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4770      	bx	lr

08000858 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <LCD_WR_REG+0x40>)
 8000864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000868:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <LCD_WR_REG+0x40>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LCD_WR_REG+0x44>)
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <LCD_WR_REG+0x40>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <LCD_WR_REG+0x40>)
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <LCD_WR_REG+0x40>)
 8000886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088a:	611a      	str	r2, [r3, #16]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40011000 	.word	0x40011000
 800089c:	40010c00 	.word	0x40010c00

080008a0 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b0:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LCD_WR_DATAX+0x44>)
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	611a      	str	r2, [r3, #16]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <LCD_RD_DATA+0x7c>)
 80008f0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80008f4:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <LCD_RD_DATA+0x7c>)
 80008f8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80008fc:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <LCD_RD_DATA+0x7c>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <LCD_RD_DATA+0x80>)
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <LCD_RD_DATA+0x80>)
 800090e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000912:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <LCD_RD_DATA+0x80>)
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <LCD_RD_DATA+0x84>)
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	f648 1289 	movw	r2, #35209	; 0x8989
 8000922:	4293      	cmp	r3, r2
 8000924:	d102      	bne.n	800092c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000926:	2001      	movs	r0, #1
 8000928:	f006 ffb4 	bl	8007894 <HAL_Delay>
	t = DATAIN
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <LCD_RD_DATA+0x7c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <LCD_RD_DATA+0x80>)
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <LCD_RD_DATA+0x80>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LCD_RD_DATA+0x7c>)
 8000942:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000946:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <LCD_RD_DATA+0x7c>)
 800094a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800094e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <LCD_RD_DATA+0x7c>)
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	60da      	str	r2, [r3, #12]
	return t;
 8000958:	88fb      	ldrh	r3, [r7, #6]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010c00 	.word	0x40010c00
 8000968:	40011000 	.word	0x40011000
 800096c:	200010cc 	.word	0x200010cc

08000970 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	4613      	mov	r3, r2
 800097e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff68 	bl	8000858 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <LCD_WriteReg+0x4c>)
 800098a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <LCD_WriteReg+0x4c>)
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <LCD_WriteReg+0x50>)
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	60d3      	str	r3, [r2, #12]
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <LCD_WriteReg+0x4c>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <LCD_WriteReg+0x4c>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <LCD_WriteReg+0x4c>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	611a      	str	r2, [r3, #16]
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff41 	bl	8000858 <LCD_WR_REG>
	return LCD_RD_DATA();
 80009d6:	f7ff ff87 	bl	80008e8 <LCD_RD_DATA>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <LCD_WriteRAM_Prepare+0x14>)
 80009ea:	891b      	ldrh	r3, [r3, #8]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff33 	bl	8000858 <LCD_WR_REG>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200010cc 	.word	0x200010cc

080009fc <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000a0c:	4b73      	ldr	r3, [pc, #460]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	f249 3241 	movw	r2, #37697	; 0x9341
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d005      	beq.n	8000a24 <LCD_SetCursor+0x28>
 8000a18:	4b70      	ldr	r3, [pc, #448]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	f245 3210 	movw	r2, #21264	; 0x5310
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d164      	bne.n	8000aee <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000a24:	4b6d      	ldr	r3, [pc, #436]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a26:	895b      	ldrh	r3, [r3, #10]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff15 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000a2e:	4b6c      	ldr	r3, [pc, #432]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b67      	ldr	r3, [pc, #412]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	4b65      	ldr	r3, [pc, #404]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	4b62      	ldr	r3, [pc, #392]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	4a5d      	ldr	r2, [pc, #372]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	60d3      	str	r3, [r2, #12]
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a86:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000a88:	4b54      	ldr	r3, [pc, #336]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a8a:	899b      	ldrh	r3, [r3, #12]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fee3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000a92:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	4b51      	ldr	r3, [pc, #324]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ac0:	4b47      	ldr	r3, [pc, #284]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4a44      	ldr	r2, [pc, #272]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	60d3      	str	r3, [r2, #12]
 8000ad8:	4b41      	ldr	r3, [pc, #260]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000aec:	e248      	b.n	8000f80 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000af0:	889b      	ldrh	r3, [r3, #4]
 8000af2:	f646 0204 	movw	r2, #26628	; 0x6804
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d176      	bne.n	8000be8 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000afc:	799b      	ldrb	r3, [r3, #6]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d106      	bne.n	8000b10 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000b12:	895b      	ldrh	r3, [r3, #10]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe9f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b46:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	60d3      	str	r3, [r2, #12]
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000b76:	899b      	ldrh	r3, [r3, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe6d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000baa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	60d3      	str	r3, [r2, #12]
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd6:	611a      	str	r2, [r3, #16]
}
 8000bd8:	e1d2      	b.n	8000f80 <LCD_SetCursor+0x584>
 8000bda:	bf00      	nop
 8000bdc:	200010cc 	.word	0x200010cc
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000be8:	4b99      	ldr	r3, [pc, #612]	; (8000e50 <LCD_SetCursor+0x454>)
 8000bea:	889b      	ldrh	r3, [r3, #4]
 8000bec:	f641 1263 	movw	r2, #6499	; 0x1963
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	f040 8133 	bne.w	8000e5c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000bf6:	4b96      	ldr	r3, [pc, #600]	; (8000e50 <LCD_SetCursor+0x454>)
 8000bf8:	799b      	ldrb	r3, [r3, #6]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d163      	bne.n	8000cc6 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000bfe:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <LCD_SetCursor+0x454>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000c0c:	4b90      	ldr	r3, [pc, #576]	; (8000e50 <LCD_SetCursor+0x454>)
 8000c0e:	895b      	ldrh	r3, [r3, #10]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe21 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000c16:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	4b8d      	ldr	r3, [pc, #564]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	4b89      	ldr	r3, [pc, #548]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	4b86      	ldr	r3, [pc, #536]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000c40:	4b84      	ldr	r3, [pc, #528]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	4b82      	ldr	r3, [pc, #520]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	4b7f      	ldr	r3, [pc, #508]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b7d      	ldr	r3, [pc, #500]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	4b7c      	ldr	r3, [pc, #496]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c68:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	4b78      	ldr	r3, [pc, #480]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b72      	ldr	r3, [pc, #456]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000c98:	4b6e      	ldr	r3, [pc, #440]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	4b6c      	ldr	r3, [pc, #432]	; (8000e54 <LCD_SetCursor+0x458>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	4a6b      	ldr	r2, [pc, #428]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	60d3      	str	r3, [r2, #12]
 8000cb0:	4b68      	ldr	r3, [pc, #416]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	4b67      	ldr	r3, [pc, #412]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	4b65      	ldr	r3, [pc, #404]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	e061      	b.n	8000d8a <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000cc6:	4b62      	ldr	r3, [pc, #392]	; (8000e50 <LCD_SetCursor+0x454>)
 8000cc8:	895b      	ldrh	r3, [r3, #10]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fdc4 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000cd0:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	4b5a      	ldr	r3, [pc, #360]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000cfe:	4b55      	ldr	r3, [pc, #340]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	60d3      	str	r3, [r2, #12]
 8000d16:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d28:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000d2a:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <LCD_SetCursor+0x454>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	121a      	asrs	r2, r3, #8
 8000d42:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b40      	ldr	r3, [pc, #256]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <LCD_SetCursor+0x454>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	60d3      	str	r3, [r2, #12]
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <LCD_SetCursor+0x454>)
 8000d8c:	899b      	ldrh	r3, [r3, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd62 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <LCD_SetCursor+0x458>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <LCD_SetCursor+0x458>)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <LCD_SetCursor+0x458>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <LCD_SetCursor+0x458>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <LCD_SetCursor+0x458>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	60d3      	str	r3, [r2, #12]
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <LCD_SetCursor+0x458>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <LCD_SetCursor+0x458>)
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <LCD_SetCursor+0x458>)
 8000de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <LCD_SetCursor+0x458>)
 8000df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <LCD_SetCursor+0x458>)
 8000df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <LCD_SetCursor+0x454>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	121a      	asrs	r2, r3, #8
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LCD_SetCursor+0x454>)
 8000e30:	885b      	ldrh	r3, [r3, #2]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	60d3      	str	r3, [r2, #12]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	611a      	str	r2, [r3, #16]
}
 8000e4e:	e097      	b.n	8000f80 <LCD_SetCursor+0x584>
 8000e50:	200010cc 	.word	0x200010cc
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000e5c:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	f245 5210 	movw	r2, #21776	; 0x5510
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d172      	bne.n	8000f4e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000e68:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000e6a:	895b      	ldrh	r3, [r3, #10]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcf3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <LCD_SetCursor+0x594>)
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000ea2:	895b      	ldrh	r3, [r3, #10]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fcd5 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <LCD_SetCursor+0x590>)
 8000eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <LCD_SetCursor+0x590>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <LCD_SetCursor+0x594>)
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	60d3      	str	r3, [r2, #12]
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000edc:	899b      	ldrh	r3, [r3, #12]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcba 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <LCD_SetCursor+0x590>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <LCD_SetCursor+0x594>)
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f14:	899b      	ldrh	r3, [r3, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fc9c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <LCD_SetCursor+0x594>)
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	60d3      	str	r3, [r2, #12]
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	611a      	str	r2, [r3, #16]
}
 8000f4c:	e018      	b.n	8000f80 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f50:	799b      	ldrb	r3, [r3, #6]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d106      	bne.n	8000f64 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f66:	895b      	ldrh	r3, [r3, #10]
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fcff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	88ba      	ldrh	r2, [r7, #4]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fcf8 	bl	8000970 <LCD_WriteReg>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200010cc 	.word	0x200010cc
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40010c00 	.word	0x40010c00

08000f94 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8000fa6:	4b78      	ldr	r3, [pc, #480]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fa8:	799b      	ldrb	r3, [r3, #6]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <LCD_Scan_Dir+0x32>
 8000fae:	4b76      	ldr	r3, [pc, #472]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	f646 0204 	movw	r2, #26628	; 0x6804
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d005      	beq.n	8000fc6 <LCD_Scan_Dir+0x32>
 8000fba:	4b73      	ldr	r3, [pc, #460]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d109      	bne.n	8000fda <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8000fc6:	4b70      	ldr	r3, [pc, #448]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fc8:	799b      	ldrb	r3, [r3, #6]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d134      	bne.n	8001038 <LCD_Scan_Dir+0xa4>
 8000fce:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12e      	bne.n	8001038 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d82c      	bhi.n	800103a <LCD_Scan_Dir+0xa6>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <LCD_Scan_Dir+0x54>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001009 	.word	0x08001009
 8000fec:	0800100f 	.word	0x0800100f
 8000ff0:	08001015 	.word	0x08001015
 8000ff4:	0800101b 	.word	0x0800101b
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	08001027 	.word	0x08001027
 8001000:	0800102d 	.word	0x0800102d
 8001004:	08001033 	.word	0x08001033
		{
		case 0:
			dir = 6;
 8001008:	2306      	movs	r3, #6
 800100a:	71fb      	strb	r3, [r7, #7]
			break;
 800100c:	e015      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 800100e:	2307      	movs	r3, #7
 8001010:	71fb      	strb	r3, [r7, #7]
			break;
 8001012:	e012      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	71fb      	strb	r3, [r7, #7]
			break;
 8001018:	e00f      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 800101a:	2305      	movs	r3, #5
 800101c:	71fb      	strb	r3, [r7, #7]
			break;
 800101e:	e00c      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
			break;
 8001024:	e009      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
			break;
 800102a:	e006      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 800102c:	2303      	movs	r3, #3
 800102e:	71fb      	strb	r3, [r7, #7]
			break;
 8001030:	e003      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	71fb      	strb	r3, [r7, #7]
			break;
 8001036:	e000      	b.n	800103a <LCD_Scan_Dir+0xa6>
		}
	}
 8001038:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001042:	4293      	cmp	r3, r2
 8001044:	d018      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
 8001046:	4b50      	ldr	r3, [pc, #320]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	f646 0204 	movw	r2, #26628	; 0x6804
 800104e:	4293      	cmp	r3, r2
 8001050:	d012      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	f245 3210 	movw	r2, #21264	; 0x5310
 800105a:	4293      	cmp	r3, r2
 800105c:	d00c      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	f245 5210 	movw	r2, #21776	; 0x5510
 8001066:	4293      	cmp	r3, r2
 8001068:	d006      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 824f 	bne.w	8001516 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b07      	cmp	r3, #7
 800107c:	d835      	bhi.n	80010ea <LCD_Scan_Dir+0x156>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <LCD_Scan_Dir+0xf0>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010eb 	.word	0x080010eb
 8001088:	080010a5 	.word	0x080010a5
 800108c:	080010af 	.word	0x080010af
 8001090:	080010b9 	.word	0x080010b9
 8001094:	080010c3 	.word	0x080010c3
 8001098:	080010cd 	.word	0x080010cd
 800109c:	080010d7 	.word	0x080010d7
 80010a0:	080010e1 	.word	0x080010e1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010aa:	81fb      	strh	r3, [r7, #14]
			break;
 80010ac:	e01d      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	81fb      	strh	r3, [r7, #14]
			break;
 80010b6:	e018      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010be:	81fb      	strh	r3, [r7, #14]
			break;
 80010c0:	e013      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	81fb      	strh	r3, [r7, #14]
			break;
 80010ca:	e00e      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010d2:	81fb      	strh	r3, [r7, #14]
			break;
 80010d4:	e009      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80010dc:	81fb      	strh	r3, [r7, #14]
			break;
 80010de:	e004      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80010e6:	81fb      	strh	r3, [r7, #14]
			break;
 80010e8:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	f245 5210 	movw	r2, #21776	; 0x5510
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d103      	bne.n	80010fe <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80010f6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80010fa:	81bb      	strh	r3, [r7, #12]
 80010fc:	e001      	b.n	8001102 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80010fe:	2336      	movs	r3, #54	; 0x36
 8001100:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	f245 3210 	movw	r2, #21264	; 0x5310
 800110a:	4293      	cmp	r3, r2
 800110c:	d00f      	beq.n	800112e <LCD_Scan_Dir+0x19a>
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	f245 5210 	movw	r2, #21776	; 0x5510
 8001116:	4293      	cmp	r3, r2
 8001118:	d009      	beq.n	800112e <LCD_Scan_Dir+0x19a>
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800111c:	889b      	ldrh	r3, [r3, #4]
 800111e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001122:	4293      	cmp	r3, r2
 8001124:	d003      	beq.n	800112e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	f646 0204 	movw	r2, #26628	; 0x6804
 8001136:	4293      	cmp	r3, r2
 8001138:	d103      	bne.n	8001142 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001142:	89fa      	ldrh	r2, [r7, #14]
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fc11 	bl	8000970 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	f641 1263 	movw	r2, #6499	; 0x1963
 8001156:	4293      	cmp	r3, r2
 8001158:	d028      	beq.n	80011ac <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800116a:	885b      	ldrh	r3, [r3, #2]
 800116c:	429a      	cmp	r2, r3
 800116e:	d21d      	bcs.n	80011ac <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001178:	885a      	ldrh	r2, [r3, #2]
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800117c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800117e:	4a02      	ldr	r2, [pc, #8]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	8053      	strh	r3, [r2, #2]
 8001184:	e012      	b.n	80011ac <LCD_Scan_Dir+0x218>
 8001186:	bf00      	nop
 8001188:	200010cc 	.word	0x200010cc
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 800118c:	4b7f      	ldr	r3, [pc, #508]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	4b7e      	ldr	r3, [pc, #504]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	429a      	cmp	r2, r3
 8001196:	d909      	bls.n	80011ac <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001198:	4b7c      	ldr	r3, [pc, #496]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800119e:	4b7b      	ldr	r3, [pc, #492]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011a0:	885a      	ldrh	r2, [r3, #2]
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011a4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80011a6:	4a79      	ldr	r2, [pc, #484]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011a8:	897b      	ldrh	r3, [r7, #10]
 80011aa:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80011ac:	4b77      	ldr	r3, [pc, #476]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	f245 5210 	movw	r2, #21776	; 0x5510
 80011b4:	4293      	cmp	r3, r2
 80011b6:	f040 80ef 	bne.w	8001398 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011bc:	895b      	ldrh	r3, [r3, #10]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fb4a 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011c4:	4b72      	ldr	r3, [pc, #456]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	4b70      	ldr	r3, [pc, #448]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <LCD_Scan_Dir+0x400>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011f0:	895b      	ldrh	r3, [r3, #10]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb2e 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011fc:	4b64      	ldr	r3, [pc, #400]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	4b61      	ldr	r3, [pc, #388]	; (8001394 <LCD_Scan_Dir+0x400>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001226:	4b59      	ldr	r3, [pc, #356]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001228:	895b      	ldrh	r3, [r3, #10]
 800122a:	3302      	adds	r3, #2
 800122c:	b29b      	uxth	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb12 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001234:	4b56      	ldr	r3, [pc, #344]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	4b54      	ldr	r3, [pc, #336]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	4b51      	ldr	r3, [pc, #324]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	121a      	asrs	r2, r3, #8
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <LCD_Scan_Dir+0x400>)
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	4b4e      	ldr	r3, [pc, #312]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800125e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001262:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001264:	4b49      	ldr	r3, [pc, #292]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001266:	895b      	ldrh	r3, [r3, #10]
 8001268:	3303      	adds	r3, #3
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff faf3 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800127c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	4b42      	ldr	r3, [pc, #264]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a42      	ldr	r2, [pc, #264]	; (8001394 <LCD_Scan_Dir+0x400>)
 800128a:	b2db      	uxtb	r3, r3
 800128c:	60d3      	str	r3, [r2, #12]
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80012a4:	899b      	ldrh	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fad6 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012ac:	4b38      	ldr	r3, [pc, #224]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <LCD_Scan_Dir+0x400>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80012d8:	899b      	ldrh	r3, [r3, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff faba 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <LCD_Scan_Dir+0x400>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001310:	899b      	ldrh	r3, [r3, #12]
 8001312:	3302      	adds	r3, #2
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fa9e 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800131e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800132e:	885b      	ldrh	r3, [r3, #2]
 8001330:	3b01      	subs	r3, #1
 8001332:	121a      	asrs	r2, r3, #8
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <LCD_Scan_Dir+0x400>)
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800134e:	899b      	ldrh	r3, [r3, #12]
 8001350:	3303      	adds	r3, #3
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fa7f 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800135c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800136c:	885b      	ldrh	r3, [r3, #2]
 800136e:	3b01      	subs	r3, #1
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <LCD_Scan_Dir+0x400>)
 8001372:	b2db      	uxtb	r3, r3
 8001374:	60d3      	str	r3, [r2, #12]
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800138a:	e10b      	b.n	80015a4 <LCD_Scan_Dir+0x610>
 800138c:	200010cc 	.word	0x200010cc
 8001390:	40011000 	.word	0x40011000
 8001394:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001398:	4b84      	ldr	r3, [pc, #528]	; (80015ac <LCD_Scan_Dir+0x618>)
 800139a:	895b      	ldrh	r3, [r3, #10]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fa5b 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013a2:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80013cc:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <LCD_Scan_Dir+0x618>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	3b01      	subs	r3, #1
 800140c:	121a      	asrs	r2, r3, #8
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <LCD_Scan_Dir+0x620>)
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001424:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001426:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <LCD_Scan_Dir+0x618>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <LCD_Scan_Dir+0x620>)
 800143e:	b2db      	uxtb	r3, r3
 8001440:	60d3      	str	r3, [r2, #12]
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001456:	4b55      	ldr	r3, [pc, #340]	; (80015ac <LCD_Scan_Dir+0x618>)
 8001458:	899b      	ldrh	r3, [r3, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9fc 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <LCD_Scan_Dir+0x620>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001488:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <LCD_Scan_Dir+0x620>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <LCD_Scan_Dir+0x618>)
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	121a      	asrs	r2, r3, #8
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <LCD_Scan_Dir+0x618>)
 80014f6:	885b      	ldrh	r3, [r3, #2]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	60d3      	str	r3, [r2, #12]
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800150e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001512:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001514:	e046      	b.n	80015a4 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b07      	cmp	r3, #7
 800151a:	d836      	bhi.n	800158a <LCD_Scan_Dir+0x5f6>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <LCD_Scan_Dir+0x590>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001545 	.word	0x08001545
 8001528:	0800154f 	.word	0x0800154f
 800152c:	08001559 	.word	0x08001559
 8001530:	0800158b 	.word	0x0800158b
 8001534:	08001563 	.word	0x08001563
 8001538:	0800156d 	.word	0x0800156d
 800153c:	08001577 	.word	0x08001577
 8001540:	08001581 	.word	0x08001581
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	81fb      	strh	r3, [r7, #14]
			break;
 800154c:	e01d      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	81fb      	strh	r3, [r7, #14]
			break;
 8001556:	e018      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	81fb      	strh	r3, [r7, #14]
			break;
 8001560:	e013      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001568:	81fb      	strh	r3, [r7, #14]
			break;
 800156a:	e00e      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001572:	81fb      	strh	r3, [r7, #14]
			break;
 8001574:	e009      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	f043 0318 	orr.w	r3, r3, #24
 800157c:	81fb      	strh	r3, [r7, #14]
			break;
 800157e:	e004      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	81fb      	strh	r3, [r7, #14]
			break;
 8001588:	bf00      	nop
		}
		dirreg = 0X03;
 800158a:	2303      	movs	r3, #3
 800158c:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001594:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001596:	89fa      	ldrh	r2, [r7, #14]
 8001598:	89bb      	ldrh	r3, [r7, #12]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f9e7 	bl	8000970 <LCD_WriteReg>
	}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200010cc 	.word	0x200010cc
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40010c00 	.word	0x40010c00

080015b8 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	460b      	mov	r3, r1
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80015ca:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 80015cc:	889b      	ldrh	r3, [r3, #4]
 80015ce:	f249 3241 	movw	r2, #37697	; 0x9341
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d005      	beq.n	80015e2 <LCD_Fast_DrawPoint+0x2a>
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 80015d8:	889b      	ldrh	r3, [r3, #4]
 80015da:	f245 3210 	movw	r2, #21264	; 0x5310
 80015de:	4293      	cmp	r3, r2
 80015e0:	d164      	bne.n	80016ac <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80015e2:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 80015e4:	895b      	ldrh	r3, [r3, #10]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff f936 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80015ec:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	4b64      	ldr	r3, [pc, #400]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	4b60      	ldr	r3, [pc, #384]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 800162e:	b2db      	uxtb	r3, r3
 8001630:	60d3      	str	r3, [r2, #12]
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001644:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 8001648:	899b      	ldrh	r3, [r3, #12]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f904 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001650:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800165a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	88bb      	ldrh	r3, [r7, #4]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 8001692:	b2db      	uxtb	r3, r3
 8001694:	60d3      	str	r3, [r2, #12]
 8001696:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80016a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	e1e6      	b.n	8001a7a <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	f245 5210 	movw	r2, #21776	; 0x5510
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d179      	bne.n	80017ac <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 80016ba:	895b      	ldrh	r3, [r3, #10]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f8cb 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 80016f2:	895b      	ldrh	r3, [r3, #10]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f8ad 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 8001712:	b2db      	uxtb	r3, r3
 8001714:	60d3      	str	r3, [r2, #12]
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 800172c:	899b      	ldrh	r3, [r3, #12]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f892 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <LCD_Fast_DrawPoint+0x1e8>)
 8001764:	899b      	ldrh	r3, [r3, #12]
 8001766:	3301      	adds	r3, #1
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f874 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <LCD_Fast_DrawPoint+0x1f0>)
 8001784:	b2db      	uxtb	r3, r3
 8001786:	60d3      	str	r3, [r2, #12]
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <LCD_Fast_DrawPoint+0x1ec>)
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	e16d      	b.n	8001a7a <LCD_Fast_DrawPoint+0x4c2>
 800179e:	bf00      	nop
 80017a0:	200010cc 	.word	0x200010cc
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <LCD_Fast_DrawPoint+0x398>)
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	f641 1263 	movw	r2, #6499	; 0x1963
 80017b4:	4293      	cmp	r3, r2
 80017b6:	f040 80d1 	bne.w	800195c <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <LCD_Fast_DrawPoint+0x398>)
 80017bc:	799b      	ldrb	r3, [r3, #6]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <LCD_Fast_DrawPoint+0x398>)
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80017d0:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <LCD_Fast_DrawPoint+0x398>)
 80017d2:	895b      	ldrh	r3, [r3, #10]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f83f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80017dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	4b56      	ldr	r3, [pc, #344]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001808:	4b52      	ldr	r3, [pc, #328]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	4a4f      	ldr	r2, [pc, #316]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 800181c:	b2db      	uxtb	r3, r3
 800181e:	60d3      	str	r3, [r2, #12]
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	615a      	str	r2, [r3, #20]
 8001826:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800182e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001832:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800183e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001856:	2280      	movs	r2, #128	; 0x80
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800185c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001860:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001870:	615a      	str	r2, [r3, #20]
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	4a38      	ldr	r2, [pc, #224]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 8001876:	b2db      	uxtb	r3, r3
 8001878:	60d3      	str	r3, [r2, #12]
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <LCD_Fast_DrawPoint+0x398>)
 8001890:	899b      	ldrh	r3, [r3, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ffe0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800189a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	615a      	str	r2, [r3, #20]
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	60d3      	str	r3, [r2, #12]
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 80018fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001900:	615a      	str	r2, [r3, #20]
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800192a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <LCD_Fast_DrawPoint+0x3a0>)
 8001934:	b2db      	uxtb	r3, r3
 8001936:	60d3      	str	r3, [r2, #12]
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <LCD_Fast_DrawPoint+0x39c>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	e095      	b.n	8001a7a <LCD_Fast_DrawPoint+0x4c2>
 800194e:	bf00      	nop
 8001950:	200010cc 	.word	0x200010cc
 8001954:	40011000 	.word	0x40011000
 8001958:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 800195c:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 800195e:	889b      	ldrh	r3, [r3, #4]
 8001960:	f646 0204 	movw	r2, #26628	; 0x6804
 8001964:	4293      	cmp	r3, r2
 8001966:	d16f      	bne.n	8001a48 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 800196a:	799b      	ldrb	r3, [r3, #6]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d106      	bne.n	800197e <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800197e:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001980:	895b      	ldrh	r3, [r3, #10]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ff68 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001988:	4b54      	ldr	r3, [pc, #336]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	4b52      	ldr	r3, [pc, #328]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <LCD_Fast_DrawPoint+0x528>)
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <LCD_Fast_DrawPoint+0x528>)
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	60d3      	str	r3, [r2, #12]
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	4b41      	ldr	r3, [pc, #260]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	4b40      	ldr	r3, [pc, #256]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 80019e4:	899b      	ldrh	r3, [r3, #12]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe ff36 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019ec:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 80019f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <LCD_Fast_DrawPoint+0x528>)
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	4b32      	ldr	r3, [pc, #200]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a18:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <LCD_Fast_DrawPoint+0x528>)
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	60d3      	str	r3, [r2, #12]
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	e018      	b.n	8001a7a <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001a4a:	799b      	ldrb	r3, [r3, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001a60:	895b      	ldrh	r3, [r3, #10]
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe ff82 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001a6e:	899b      	ldrh	r3, [r3, #12]
 8001a70:	88ba      	ldrh	r2, [r7, #4]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe ff7b 	bl	8000970 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a80:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <LCD_Fast_DrawPoint+0x520>)
 8001a8c:	891a      	ldrh	r2, [r3, #8]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <LCD_Fast_DrawPoint+0x528>)
 8001a90:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LCD_Fast_DrawPoint+0x528>)
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	60d3      	str	r3, [r2, #12]
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <LCD_Fast_DrawPoint+0x524>)
 8001aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ace:	611a      	str	r2, [r3, #16]
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200010cc 	.word	0x200010cc
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40010c00 	.word	0x40010c00
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001af2:	20be      	movs	r0, #190	; 0xbe
 8001af4:	f7fe feb0 	bl	8000858 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001af8:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afe:	611a      	str	r2, [r3, #16]
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <LCD_SSD_BackLightSet+0x144>)
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fe05 	bl	8000744 <__aeabi_i2d>
 8001b3a:	a339      	add	r3, pc, #228	; (adr r3, 8001c20 <LCD_SSD_BackLightSet+0x138>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fb84 	bl	800024c <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4c38      	ldr	r4, [pc, #224]	; (8001c2c <LCD_SSD_BackLightSet+0x144>)
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7fe fe63 	bl	8000818 <__aeabi_d2uiz>
 8001b52:	4603      	mov	r3, r0
 8001b54:	60e3      	str	r3, [r4, #12]
 8001b56:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b68:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <LCD_SSD_BackLightSet+0x144>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	615a      	str	r2, [r3, #20]
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b92:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <LCD_SSD_BackLightSet+0x144>)
 8001ba6:	22ff      	movs	r2, #255	; 0xff
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	615a      	str	r2, [r3, #20]
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <LCD_SSD_BackLightSet+0x144>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf6:	615a      	str	r2, [r3, #20]
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <LCD_SSD_BackLightSet+0x144>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <LCD_SSD_BackLightSet+0x140>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	611a      	str	r2, [r3, #16]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	66666666 	.word	0x66666666
 8001c24:	40046666 	.word	0x40046666
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40010c00 	.word	0x40010c00

08001c30 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d177      	bne.n	8001d30 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001c40:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001c46:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001c4c:	4b7d      	ldr	r3, [pc, #500]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c52:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c54:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c56:	889b      	ldrh	r3, [r3, #4]
 8001c58:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00b      	beq.n	8001c78 <LCD_Display_Dir+0x48>
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c62:	889b      	ldrh	r3, [r3, #4]
 8001c64:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d005      	beq.n	8001c78 <LCD_Display_Dir+0x48>
 8001c6c:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d11e      	bne.n	8001cb6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001c78:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c7a:	222c      	movs	r2, #44	; 0x2c
 8001c7c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001c7e:	4b71      	ldr	r3, [pc, #452]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c80:	222a      	movs	r2, #42	; 0x2a
 8001c82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c86:	222b      	movs	r2, #43	; 0x2b
 8001c88:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c8c:	889b      	ldrh	r3, [r3, #4]
 8001c8e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d006      	beq.n	8001ca4 <LCD_Display_Dir+0x74>
 8001c96:	4b6b      	ldr	r3, [pc, #428]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001c98:	889b      	ldrh	r3, [r3, #4]
 8001c9a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 80c7 	bne.w	8001e32 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001ca4:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001ca6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001caa:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cb2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cb4:	e0bd      	b.n	8001e32 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d114      	bne.n	8001cec <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001cc2:	4b60      	ldr	r3, [pc, #384]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cc4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001cc8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001cca:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001ccc:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001cd0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cd4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001cd8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001cda:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ce0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001ce2:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001ce4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ce8:	805a      	strh	r2, [r3, #2]
 8001cea:	e0a3      	b.n	8001e34 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001cec:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	f641 1263 	movw	r2, #6499	; 0x1963
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001cf8:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001cfa:	222c      	movs	r2, #44	; 0x2c
 8001cfc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d00:	222b      	movs	r2, #43	; 0x2b
 8001d02:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d06:	222a      	movs	r2, #42	; 0x2a
 8001d08:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d10:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001d12:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d18:	805a      	strh	r2, [r3, #2]
 8001d1a:	e08b      	b.n	8001e34 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001d1c:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d1e:	2222      	movs	r2, #34	; 0x22
 8001d20:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d24:	2220      	movs	r2, #32
 8001d26:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d2a:	2221      	movs	r2, #33	; 0x21
 8001d2c:	819a      	strh	r2, [r3, #12]
 8001d2e:	e081      	b.n	8001e34 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001d30:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d3c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d40:	22f0      	movs	r2, #240	; 0xf0
 8001d42:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d005      	beq.n	8001d5c <LCD_Display_Dir+0x12c>
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d52:	889b      	ldrh	r3, [r3, #4]
 8001d54:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d109      	bne.n	8001d70 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d5e:	222c      	movs	r2, #44	; 0x2c
 8001d60:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001d62:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d64:	222a      	movs	r2, #42	; 0x2a
 8001d66:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d6a:	222b      	movs	r2, #43	; 0x2b
 8001d6c:	819a      	strh	r2, [r3, #12]
 8001d6e:	e04b      	b.n	8001e08 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d109      	bne.n	8001d90 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d7e:	222c      	movs	r2, #44	; 0x2c
 8001d80:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d84:	222b      	movs	r2, #43	; 0x2b
 8001d86:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d8a:	222a      	movs	r2, #42	; 0x2a
 8001d8c:	819a      	strh	r2, [r3, #12]
 8001d8e:	e03b      	b.n	8001e08 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d114      	bne.n	8001dc6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001d9e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001da2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001da6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001daa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dae:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001db2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001db6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001dba:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dc2:	805a      	strh	r2, [r3, #2]
 8001dc4:	e020      	b.n	8001e08 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	f641 1263 	movw	r2, #6499	; 0x1963
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d111      	bne.n	8001df6 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dd4:	222c      	movs	r2, #44	; 0x2c
 8001dd6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dda:	222a      	movs	r2, #42	; 0x2a
 8001ddc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001de0:	222b      	movs	r2, #43	; 0x2b
 8001de2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001de6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001dea:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001df2:	805a      	strh	r2, [r3, #2]
 8001df4:	e008      	b.n	8001e08 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001df8:	2222      	movs	r2, #34	; 0x22
 8001dfa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001dfe:	2221      	movs	r2, #33	; 0x21
 8001e00:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001e04:	2220      	movs	r2, #32
 8001e06:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001e0a:	889b      	ldrh	r3, [r3, #4]
 8001e0c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d005      	beq.n	8001e20 <LCD_Display_Dir+0x1f0>
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001e16:	889b      	ldrh	r3, [r3, #4]
 8001e18:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d109      	bne.n	8001e34 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001e22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e26:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <LCD_Display_Dir+0x214>)
 8001e2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e2e:	805a      	strh	r2, [r3, #2]
 8001e30:	e000      	b.n	8001e34 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e32:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff f8ad 	bl	8000f94 <LCD_Scan_Dir>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200010cc 	.word	0x200010cc

08001e48 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001e4e:	4b90      	ldr	r3, [pc, #576]	; (8002090 <LCD_Init+0x248>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4a8f      	ldr	r2, [pc, #572]	; (8002090 <LCD_Init+0x248>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6193      	str	r3, [r2, #24]
 8001e5a:	4b8d      	ldr	r3, [pc, #564]	; (8002090 <LCD_Init+0x248>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001e66:	4b8a      	ldr	r3, [pc, #552]	; (8002090 <LCD_Init+0x248>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4a89      	ldr	r2, [pc, #548]	; (8002090 <LCD_Init+0x248>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	6193      	str	r3, [r2, #24]
 8001e72:	4b87      	ldr	r3, [pc, #540]	; (8002090 <LCD_Init+0x248>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001e7e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001e82:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001e84:	2301      	movs	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	4619      	mov	r1, r3
 8001e96:	487f      	ldr	r0, [pc, #508]	; (8002094 <LCD_Init+0x24c>)
 8001e98:	f006 fab0 	bl	80083fc <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	487b      	ldr	r0, [pc, #492]	; (8002098 <LCD_Init+0x250>)
 8001eaa:	f006 faa7 	bl	80083fc <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001eae:	2032      	movs	r0, #50	; 0x32
 8001eb0:	f005 fcf0 	bl	8007894 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7fe fd5a 	bl	8000970 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001ebc:	2032      	movs	r0, #50	; 0x32
 8001ebe:	f005 fce9 	bl	8007894 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7fe fd7e 	bl	80009c4 <LCD_ReadReg>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b73      	ldr	r3, [pc, #460]	; (800209c <LCD_Init+0x254>)
 8001ece:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001ed0:	4b72      	ldr	r3, [pc, #456]	; (800209c <LCD_Init+0x254>)
 8001ed2:	889b      	ldrh	r3, [r3, #4]
 8001ed4:	2bfe      	cmp	r3, #254	; 0xfe
 8001ed6:	d90b      	bls.n	8001ef0 <LCD_Init+0xa8>
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <LCD_Init+0x254>)
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d005      	beq.n	8001ef0 <LCD_Init+0xa8>
 8001ee4:	4b6d      	ldr	r3, [pc, #436]	; (800209c <LCD_Init+0x254>)
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001eec:	f040 80c8 	bne.w	8002080 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001ef0:	20d3      	movs	r0, #211	; 0xd3
 8001ef2:	f7fe fcb1 	bl	8000858 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001ef6:	f7fe fcf7 	bl	80008e8 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001efa:	f7fe fcf5 	bl	80008e8 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001efe:	f7fe fcf3 	bl	80008e8 <LCD_RD_DATA>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <LCD_Init+0x254>)
 8001f08:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001f0a:	4b64      	ldr	r3, [pc, #400]	; (800209c <LCD_Init+0x254>)
 8001f0c:	889b      	ldrh	r3, [r3, #4]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <LCD_Init+0x254>)
 8001f14:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001f16:	f7fe fce7 	bl	80008e8 <LCD_RD_DATA>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <LCD_Init+0x254>)
 8001f20:	889b      	ldrh	r3, [r3, #4]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <LCD_Init+0x254>)
 8001f28:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001f2a:	4b5c      	ldr	r3, [pc, #368]	; (800209c <LCD_Init+0x254>)
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f000 80a4 	beq.w	8002080 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001f38:	20bf      	movs	r0, #191	; 0xbf
 8001f3a:	f7fe fc8d 	bl	8000858 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001f3e:	f7fe fcd3 	bl	80008e8 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001f42:	f7fe fcd1 	bl	80008e8 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001f46:	f7fe fccf 	bl	80008e8 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001f4a:	f7fe fccd 	bl	80008e8 <LCD_RD_DATA>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b52      	ldr	r3, [pc, #328]	; (800209c <LCD_Init+0x254>)
 8001f54:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001f56:	4b51      	ldr	r3, [pc, #324]	; (800209c <LCD_Init+0x254>)
 8001f58:	889b      	ldrh	r3, [r3, #4]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	; (800209c <LCD_Init+0x254>)
 8001f60:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001f62:	f7fe fcc1 	bl	80008e8 <LCD_RD_DATA>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <LCD_Init+0x254>)
 8001f6c:	889b      	ldrh	r3, [r3, #4]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <LCD_Init+0x254>)
 8001f74:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001f76:	4b49      	ldr	r3, [pc, #292]	; (800209c <LCD_Init+0x254>)
 8001f78:	889b      	ldrh	r3, [r3, #4]
 8001f7a:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d07e      	beq.n	8002080 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001f82:	20d4      	movs	r0, #212	; 0xd4
 8001f84:	f7fe fc68 	bl	8000858 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001f88:	f7fe fcae 	bl	80008e8 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001f8c:	f7fe fcac 	bl	80008e8 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001f90:	f7fe fcaa 	bl	80008e8 <LCD_RD_DATA>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b40      	ldr	r3, [pc, #256]	; (800209c <LCD_Init+0x254>)
 8001f9a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <LCD_Init+0x254>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <LCD_Init+0x254>)
 8001fa6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001fa8:	f7fe fc9e 	bl	80008e8 <LCD_RD_DATA>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <LCD_Init+0x254>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b38      	ldr	r3, [pc, #224]	; (800209c <LCD_Init+0x254>)
 8001fba:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <LCD_Init+0x254>)
 8001fbe:	889b      	ldrh	r3, [r3, #4]
 8001fc0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05b      	beq.n	8002080 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001fc8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001fcc:	f7fe fc44 	bl	8000858 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001fd0:	f7fe fc8a 	bl	80008e8 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001fd4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001fd8:	f7fe fc3e 	bl	8000858 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001fdc:	f7fe fc84 	bl	80008e8 <LCD_RD_DATA>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <LCD_Init+0x254>)
 8001fe6:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	; (800209c <LCD_Init+0x254>)
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <LCD_Init+0x254>)
 8001ff2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001ff4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001ff8:	f7fe fc2e 	bl	8000858 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001ffc:	f7fe fc74 	bl	80008e8 <LCD_RD_DATA>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <LCD_Init+0x254>)
 8002006:	889b      	ldrh	r3, [r3, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <LCD_Init+0x254>)
 800200e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <LCD_Init+0x254>)
 8002012:	889b      	ldrh	r3, [r3, #4]
 8002014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002018:	d103      	bne.n	8002022 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <LCD_Init+0x254>)
 800201c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002020:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <LCD_Init+0x254>)
 8002024:	889b      	ldrh	r3, [r3, #4]
 8002026:	f245 5210 	movw	r2, #21776	; 0x5510
 800202a:	4293      	cmp	r3, r2
 800202c:	d028      	beq.n	8002080 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800202e:	20a1      	movs	r0, #161	; 0xa1
 8002030:	f7fe fc12 	bl	8000858 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002034:	f7fe fc58 	bl	80008e8 <LCD_RD_DATA>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <LCD_Init+0x254>)
 800203e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002040:	f7fe fc52 	bl	80008e8 <LCD_RD_DATA>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <LCD_Init+0x254>)
 800204a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <LCD_Init+0x254>)
 800204e:	889b      	ldrh	r3, [r3, #4]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <LCD_Init+0x254>)
 8002056:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002058:	f7fe fc46 	bl	80008e8 <LCD_RD_DATA>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <LCD_Init+0x254>)
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	4313      	orrs	r3, r2
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <LCD_Init+0x254>)
 800206a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <LCD_Init+0x254>)
 800206e:	889b      	ldrh	r3, [r3, #4]
 8002070:	f245 7261 	movw	r2, #22369	; 0x5761
 8002074:	4293      	cmp	r3, r2
 8002076:	d103      	bne.n	8002080 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <LCD_Init+0x254>)
 800207a:	f641 1263 	movw	r2, #6499	; 0x1963
 800207e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <LCD_Init+0x254>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	f249 3241 	movw	r2, #37697	; 0x9341
 8002088:	4293      	cmp	r3, r2
 800208a:	f040 811f 	bne.w	80022cc <LCD_Init+0x484>
 800208e:	e007      	b.n	80020a0 <LCD_Init+0x258>
 8002090:	40021000 	.word	0x40021000
 8002094:	40011000 	.word	0x40011000
 8002098:	40010c00 	.word	0x40010c00
 800209c:	200010cc 	.word	0x200010cc
			{
		LCD_WR_REG(0xCF);
 80020a0:	20cf      	movs	r0, #207	; 0xcf
 80020a2:	f7fe fbd9 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7fe fbfa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80020ac:	20c1      	movs	r0, #193	; 0xc1
 80020ae:	f7fe fbf7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80020b2:	2030      	movs	r0, #48	; 0x30
 80020b4:	f7fe fbf4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80020b8:	20ed      	movs	r0, #237	; 0xed
 80020ba:	f7fe fbcd 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80020be:	2064      	movs	r0, #100	; 0x64
 80020c0:	f7fe fbee 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f7fe fbeb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80020ca:	2012      	movs	r0, #18
 80020cc:	f7fe fbe8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80020d0:	2081      	movs	r0, #129	; 0x81
 80020d2:	f7fe fbe5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80020d6:	20e8      	movs	r0, #232	; 0xe8
 80020d8:	f7fe fbbe 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80020dc:	2085      	movs	r0, #133	; 0x85
 80020de:	f7fe fbdf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80020e2:	2010      	movs	r0, #16
 80020e4:	f7fe fbdc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80020e8:	207a      	movs	r0, #122	; 0x7a
 80020ea:	f7fe fbd9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80020ee:	20cb      	movs	r0, #203	; 0xcb
 80020f0:	f7fe fbb2 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80020f4:	2039      	movs	r0, #57	; 0x39
 80020f6:	f7fe fbd3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80020fa:	202c      	movs	r0, #44	; 0x2c
 80020fc:	f7fe fbd0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f7fe fbcd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002106:	2034      	movs	r0, #52	; 0x34
 8002108:	f7fe fbca 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800210c:	2002      	movs	r0, #2
 800210e:	f7fe fbc7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002112:	20f7      	movs	r0, #247	; 0xf7
 8002114:	f7fe fba0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002118:	2020      	movs	r0, #32
 800211a:	f7fe fbc1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800211e:	20ea      	movs	r0, #234	; 0xea
 8002120:	f7fe fb9a 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe fbbb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800212a:	2000      	movs	r0, #0
 800212c:	f7fe fbb8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002130:	20c0      	movs	r0, #192	; 0xc0
 8002132:	f7fe fb91 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002136:	201b      	movs	r0, #27
 8002138:	f7fe fbb2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800213c:	20c1      	movs	r0, #193	; 0xc1
 800213e:	f7fe fb8b 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe fbac 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002148:	20c5      	movs	r0, #197	; 0xc5
 800214a:	f7fe fb85 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800214e:	2030      	movs	r0, #48	; 0x30
 8002150:	f7fe fba6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002154:	2030      	movs	r0, #48	; 0x30
 8002156:	f7fe fba3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800215a:	20c7      	movs	r0, #199	; 0xc7
 800215c:	f7fe fb7c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002160:	20b7      	movs	r0, #183	; 0xb7
 8002162:	f7fe fb9d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002166:	2036      	movs	r0, #54	; 0x36
 8002168:	f7fe fb76 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800216c:	2048      	movs	r0, #72	; 0x48
 800216e:	f7fe fb97 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002172:	203a      	movs	r0, #58	; 0x3a
 8002174:	f7fe fb70 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002178:	2055      	movs	r0, #85	; 0x55
 800217a:	f7fe fb91 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800217e:	20b1      	movs	r0, #177	; 0xb1
 8002180:	f7fe fb6a 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe fb8b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800218a:	201a      	movs	r0, #26
 800218c:	f7fe fb88 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002190:	20b6      	movs	r0, #182	; 0xb6
 8002192:	f7fe fb61 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002196:	200a      	movs	r0, #10
 8002198:	f7fe fb82 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800219c:	20a2      	movs	r0, #162	; 0xa2
 800219e:	f7fe fb7f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80021a2:	20f2      	movs	r0, #242	; 0xf2
 80021a4:	f7fe fb58 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7fe fb79 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80021ae:	2026      	movs	r0, #38	; 0x26
 80021b0:	f7fe fb52 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe fb73 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80021ba:	20e0      	movs	r0, #224	; 0xe0
 80021bc:	f7fe fb4c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80021c0:	200f      	movs	r0, #15
 80021c2:	f7fe fb6d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80021c6:	202a      	movs	r0, #42	; 0x2a
 80021c8:	f7fe fb6a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80021cc:	2028      	movs	r0, #40	; 0x28
 80021ce:	f7fe fb67 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80021d2:	2008      	movs	r0, #8
 80021d4:	f7fe fb64 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80021d8:	200e      	movs	r0, #14
 80021da:	f7fe fb61 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80021de:	2008      	movs	r0, #8
 80021e0:	f7fe fb5e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80021e4:	2054      	movs	r0, #84	; 0x54
 80021e6:	f7fe fb5b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80021ea:	20a9      	movs	r0, #169	; 0xa9
 80021ec:	f7fe fb58 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80021f0:	2043      	movs	r0, #67	; 0x43
 80021f2:	f7fe fb55 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80021f6:	200a      	movs	r0, #10
 80021f8:	f7fe fb52 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80021fc:	200f      	movs	r0, #15
 80021fe:	f7fe fb4f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe fb4c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fb49 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800220e:	2000      	movs	r0, #0
 8002210:	f7fe fb46 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002214:	2000      	movs	r0, #0
 8002216:	f7fe fb43 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800221a:	20e1      	movs	r0, #225	; 0xe1
 800221c:	f7fe fb1c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002220:	2000      	movs	r0, #0
 8002222:	f7fe fb3d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002226:	2015      	movs	r0, #21
 8002228:	f7fe fb3a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800222c:	2017      	movs	r0, #23
 800222e:	f7fe fb37 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002232:	2007      	movs	r0, #7
 8002234:	f7fe fb34 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002238:	2011      	movs	r0, #17
 800223a:	f7fe fb31 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800223e:	2006      	movs	r0, #6
 8002240:	f7fe fb2e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002244:	202b      	movs	r0, #43	; 0x2b
 8002246:	f7fe fb2b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800224a:	2056      	movs	r0, #86	; 0x56
 800224c:	f7fe fb28 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002250:	203c      	movs	r0, #60	; 0x3c
 8002252:	f7fe fb25 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002256:	2005      	movs	r0, #5
 8002258:	f7fe fb22 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800225c:	2010      	movs	r0, #16
 800225e:	f7fe fb1f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002262:	200f      	movs	r0, #15
 8002264:	f7fe fb1c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002268:	203f      	movs	r0, #63	; 0x3f
 800226a:	f7fe fb19 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800226e:	203f      	movs	r0, #63	; 0x3f
 8002270:	f7fe fb16 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002274:	200f      	movs	r0, #15
 8002276:	f7fe fb13 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800227a:	202b      	movs	r0, #43	; 0x2b
 800227c:	f7fe faec 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f7fe fb0d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002286:	2000      	movs	r0, #0
 8002288:	f7fe fb0a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800228c:	2001      	movs	r0, #1
 800228e:	f7fe fb07 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002292:	203f      	movs	r0, #63	; 0x3f
 8002294:	f7fe fb04 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002298:	202a      	movs	r0, #42	; 0x2a
 800229a:	f7fe fadd 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fafe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7fe fafb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe faf8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80022b0:	20ef      	movs	r0, #239	; 0xef
 80022b2:	f7fe faf5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80022b6:	2011      	movs	r0, #17
 80022b8:	f7fe face 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(120);
 80022bc:	2078      	movs	r0, #120	; 0x78
 80022be:	f005 fae9 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80022c2:	2029      	movs	r0, #41	; 0x29
 80022c4:	f7fe fac8 	bl	8000858 <LCD_WR_REG>
 80022c8:	f003 bcd8 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80022cc:	4b58      	ldr	r3, [pc, #352]	; (8002430 <LCD_Init+0x5e8>)
 80022ce:	889b      	ldrh	r3, [r3, #4]
 80022d0:	f646 0204 	movw	r2, #26628	; 0x6804
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f040 80ad 	bne.w	8002434 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80022da:	2011      	movs	r0, #17
 80022dc:	f7fe fabc 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(20);
 80022e0:	2014      	movs	r0, #20
 80022e2:	f005 fad7 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80022e6:	20d0      	movs	r0, #208	; 0xd0
 80022e8:	f7fe fab6 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80022ec:	2007      	movs	r0, #7
 80022ee:	f7fe fad7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80022f2:	2042      	movs	r0, #66	; 0x42
 80022f4:	f7fe fad4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80022f8:	201d      	movs	r0, #29
 80022fa:	f7fe fad1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80022fe:	20d1      	movs	r0, #209	; 0xd1
 8002300:	f7fe faaa 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe facb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800230a:	201a      	movs	r0, #26
 800230c:	f7fe fac8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002310:	2009      	movs	r0, #9
 8002312:	f7fe fac5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002316:	20d2      	movs	r0, #210	; 0xd2
 8002318:	f7fe fa9e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800231c:	2001      	movs	r0, #1
 800231e:	f7fe fabf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002322:	2022      	movs	r0, #34	; 0x22
 8002324:	f7fe fabc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002328:	20c0      	movs	r0, #192	; 0xc0
 800232a:	f7fe fa95 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800232e:	2010      	movs	r0, #16
 8002330:	f7fe fab6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002334:	203b      	movs	r0, #59	; 0x3b
 8002336:	f7fe fab3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800233a:	2000      	movs	r0, #0
 800233c:	f7fe fab0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002340:	2002      	movs	r0, #2
 8002342:	f7fe faad 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002346:	2011      	movs	r0, #17
 8002348:	f7fe faaa 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800234c:	20c5      	movs	r0, #197	; 0xc5
 800234e:	f7fe fa83 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002352:	2003      	movs	r0, #3
 8002354:	f7fe faa4 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002358:	20c8      	movs	r0, #200	; 0xc8
 800235a:	f7fe fa7d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800235e:	2000      	movs	r0, #0
 8002360:	f7fe fa9e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002364:	2025      	movs	r0, #37	; 0x25
 8002366:	f7fe fa9b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800236a:	2021      	movs	r0, #33	; 0x21
 800236c:	f7fe fa98 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002370:	2005      	movs	r0, #5
 8002372:	f7fe fa95 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fa92 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800237c:	200a      	movs	r0, #10
 800237e:	f7fe fa8f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002382:	2065      	movs	r0, #101	; 0x65
 8002384:	f7fe fa8c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002388:	2025      	movs	r0, #37	; 0x25
 800238a:	f7fe fa89 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800238e:	2077      	movs	r0, #119	; 0x77
 8002390:	f7fe fa86 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002394:	2050      	movs	r0, #80	; 0x50
 8002396:	f7fe fa83 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800239a:	200f      	movs	r0, #15
 800239c:	f7fe fa80 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe fa7d 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80023a6:	20f8      	movs	r0, #248	; 0xf8
 80023a8:	f7fe fa56 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe fa77 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80023b2:	20fe      	movs	r0, #254	; 0xfe
 80023b4:	f7fe fa50 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fa71 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80023be:	2002      	movs	r0, #2
 80023c0:	f7fe fa6e 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80023c4:	2020      	movs	r0, #32
 80023c6:	f7fe fa47 	bl	8000858 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80023ca:	2036      	movs	r0, #54	; 0x36
 80023cc:	f7fe fa44 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80023d0:	2008      	movs	r0, #8
 80023d2:	f7fe fa65 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80023d6:	203a      	movs	r0, #58	; 0x3a
 80023d8:	f7fe fa3e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80023dc:	2055      	movs	r0, #85	; 0x55
 80023de:	f7fe fa5f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80023e2:	202b      	movs	r0, #43	; 0x2b
 80023e4:	f7fe fa38 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fa59 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fa56 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fa53 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80023fa:	203f      	movs	r0, #63	; 0x3f
 80023fc:	f7fe fa50 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002400:	202a      	movs	r0, #42	; 0x2a
 8002402:	f7fe fa29 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fa4a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fa47 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fa44 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002418:	20df      	movs	r0, #223	; 0xdf
 800241a:	f7fe fa41 	bl	80008a0 <LCD_WR_DATAX>
		HAL_Delay(120);
 800241e:	2078      	movs	r0, #120	; 0x78
 8002420:	f005 fa38 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002424:	2029      	movs	r0, #41	; 0x29
 8002426:	f7fe fa17 	bl	8000858 <LCD_WR_REG>
 800242a:	f003 bc27 	b.w	8005c7c <LCD_Init+0x3e34>
 800242e:	bf00      	nop
 8002430:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0x5310) {
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <LCD_Init+0x5fc>)
 8002436:	889b      	ldrh	r3, [r3, #4]
 8002438:	f245 3210 	movw	r2, #21264	; 0x5310
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 877c 	bne.w	800333a <LCD_Init+0x14f2>
 8002442:	e001      	b.n	8002448 <LCD_Init+0x600>
 8002444:	200010cc 	.word	0x200010cc
		LCD_WR_REG(0xED);
 8002448:	20ed      	movs	r0, #237	; 0xed
 800244a:	f7fe fa05 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800244e:	2001      	movs	r0, #1
 8002450:	f7fe fa26 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002454:	20fe      	movs	r0, #254	; 0xfe
 8002456:	f7fe fa23 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800245a:	20ee      	movs	r0, #238	; 0xee
 800245c:	f7fe f9fc 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002460:	20de      	movs	r0, #222	; 0xde
 8002462:	f7fe fa1d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002466:	2021      	movs	r0, #33	; 0x21
 8002468:	f7fe fa1a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800246c:	20f1      	movs	r0, #241	; 0xf1
 800246e:	f7fe f9f3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002472:	2001      	movs	r0, #1
 8002474:	f7fe fa14 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002478:	20df      	movs	r0, #223	; 0xdf
 800247a:	f7fe f9ed 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800247e:	2010      	movs	r0, #16
 8002480:	f7fe fa0e 	bl	80008a0 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002484:	20c4      	movs	r0, #196	; 0xc4
 8002486:	f7fe f9e7 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800248a:	208f      	movs	r0, #143	; 0x8f
 800248c:	f7fe fa08 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002490:	20c6      	movs	r0, #198	; 0xc6
 8002492:	f7fe f9e1 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe fa02 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800249c:	20e2      	movs	r0, #226	; 0xe2
 800249e:	f7fe f9ff 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80024a2:	20e2      	movs	r0, #226	; 0xe2
 80024a4:	f7fe f9fc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80024a8:	20e2      	movs	r0, #226	; 0xe2
 80024aa:	f7fe f9f9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80024ae:	20bf      	movs	r0, #191	; 0xbf
 80024b0:	f7fe f9d2 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80024b4:	20aa      	movs	r0, #170	; 0xaa
 80024b6:	f7fe f9f3 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80024ba:	20b0      	movs	r0, #176	; 0xb0
 80024bc:	f7fe f9cc 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80024c0:	200d      	movs	r0, #13
 80024c2:	f7fe f9ed 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe f9ea 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80024cc:	200d      	movs	r0, #13
 80024ce:	f7fe f9e7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe f9e4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80024d8:	2011      	movs	r0, #17
 80024da:	f7fe f9e1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe f9de 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80024e4:	2019      	movs	r0, #25
 80024e6:	f7fe f9db 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7fe f9d8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80024f0:	2021      	movs	r0, #33	; 0x21
 80024f2:	f7fe f9d5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe f9d2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80024fc:	202d      	movs	r0, #45	; 0x2d
 80024fe:	f7fe f9cf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002502:	2000      	movs	r0, #0
 8002504:	f7fe f9cc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002508:	203d      	movs	r0, #61	; 0x3d
 800250a:	f7fe f9c9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe f9c6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002514:	205d      	movs	r0, #93	; 0x5d
 8002516:	f7fe f9c3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800251a:	2000      	movs	r0, #0
 800251c:	f7fe f9c0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002520:	205d      	movs	r0, #93	; 0x5d
 8002522:	f7fe f9bd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002526:	2000      	movs	r0, #0
 8002528:	f7fe f9ba 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800252c:	20b1      	movs	r0, #177	; 0xb1
 800252e:	f7fe f993 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002532:	2080      	movs	r0, #128	; 0x80
 8002534:	f7fe f9b4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe f9b1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800253e:	208b      	movs	r0, #139	; 0x8b
 8002540:	f7fe f9ae 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe f9ab 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800254a:	2096      	movs	r0, #150	; 0x96
 800254c:	f7fe f9a8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe f9a5 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002556:	20b2      	movs	r0, #178	; 0xb2
 8002558:	f7fe f97e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe f99f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe f99c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002568:	2002      	movs	r0, #2
 800256a:	f7fe f999 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe f996 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002574:	2003      	movs	r0, #3
 8002576:	f7fe f993 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe f990 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002580:	20b3      	movs	r0, #179	; 0xb3
 8002582:	f7fe f969 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe f98a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe f987 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe f984 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe f981 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe f97e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe f97b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7fe f978 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe f975 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe f972 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe f96f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7fe f96c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe f969 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe f966 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe f963 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe f960 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe f95d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe f95a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe f957 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe f954 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe f951 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe f94e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe f94b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f948 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe f945 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002616:	20b4      	movs	r0, #180	; 0xb4
 8002618:	f7fe f91e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800261c:	208b      	movs	r0, #139	; 0x8b
 800261e:	f7fe f93f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe f93c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002628:	2096      	movs	r0, #150	; 0x96
 800262a:	f7fe f939 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f936 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002634:	20a1      	movs	r0, #161	; 0xa1
 8002636:	f7fe f933 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe f930 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002640:	20b5      	movs	r0, #181	; 0xb5
 8002642:	f7fe f909 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002646:	2002      	movs	r0, #2
 8002648:	f7fe f92a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe f927 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002652:	2003      	movs	r0, #3
 8002654:	f7fe f924 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe f921 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800265e:	2004      	movs	r0, #4
 8002660:	f7fe f91e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f91b 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800266a:	20b6      	movs	r0, #182	; 0xb6
 800266c:	f7fe f8f4 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe f915 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe f912 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800267c:	20b7      	movs	r0, #183	; 0xb7
 800267e:	f7fe f8eb 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe f90c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe f909 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800268e:	203f      	movs	r0, #63	; 0x3f
 8002690:	f7fe f906 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fe f903 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800269a:	205e      	movs	r0, #94	; 0x5e
 800269c:	f7fe f900 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe f8fd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80026a6:	2064      	movs	r0, #100	; 0x64
 80026a8:	f7fe f8fa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f8f7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80026b2:	208c      	movs	r0, #140	; 0x8c
 80026b4:	f7fe f8f4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f8f1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80026be:	20ac      	movs	r0, #172	; 0xac
 80026c0:	f7fe f8ee 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f8eb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80026ca:	20dc      	movs	r0, #220	; 0xdc
 80026cc:	f7fe f8e8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f8e5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80026d6:	2070      	movs	r0, #112	; 0x70
 80026d8:	f7fe f8e2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe f8df 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80026e2:	2090      	movs	r0, #144	; 0x90
 80026e4:	f7fe f8dc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f8d9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80026ee:	20eb      	movs	r0, #235	; 0xeb
 80026f0:	f7fe f8d6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f8d3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80026fa:	20dc      	movs	r0, #220	; 0xdc
 80026fc:	f7fe f8d0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f8cd 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002706:	20b8      	movs	r0, #184	; 0xb8
 8002708:	f7fe f8a6 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f8c7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe f8c4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f8c1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe f8be 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f8bb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe f8b8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f8b5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe f8b2 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800273c:	20ba      	movs	r0, #186	; 0xba
 800273e:	f7fe f88b 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002742:	2024      	movs	r0, #36	; 0x24
 8002744:	f7fe f8ac 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe f8a9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe f8a6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe f8a3 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800275a:	20c1      	movs	r0, #193	; 0xc1
 800275c:	f7fe f87c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002760:	2020      	movs	r0, #32
 8002762:	f7fe f89d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002766:	2000      	movs	r0, #0
 8002768:	f7fe f89a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800276c:	2054      	movs	r0, #84	; 0x54
 800276e:	f7fe f897 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe f894 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002778:	20ff      	movs	r0, #255	; 0xff
 800277a:	f7fe f891 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe f88e 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002784:	20c2      	movs	r0, #194	; 0xc2
 8002786:	f7fe f867 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800278a:	200a      	movs	r0, #10
 800278c:	f7fe f888 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe f885 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002796:	2004      	movs	r0, #4
 8002798:	f7fe f882 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe f87f 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80027a2:	20c3      	movs	r0, #195	; 0xc3
 80027a4:	f7fe f858 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80027a8:	203c      	movs	r0, #60	; 0x3c
 80027aa:	f7fe f879 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe f876 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80027b4:	203a      	movs	r0, #58	; 0x3a
 80027b6:	f7fe f873 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe f870 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80027c0:	2039      	movs	r0, #57	; 0x39
 80027c2:	f7fe f86d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe f86a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80027cc:	2037      	movs	r0, #55	; 0x37
 80027ce:	f7fe f867 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe f864 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80027d8:	203c      	movs	r0, #60	; 0x3c
 80027da:	f7fe f861 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f85e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80027e4:	2036      	movs	r0, #54	; 0x36
 80027e6:	f7fe f85b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe f858 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f7fe f855 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe f852 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80027fc:	202f      	movs	r0, #47	; 0x2f
 80027fe:	f7fe f84f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe f84c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002808:	202c      	movs	r0, #44	; 0x2c
 800280a:	f7fe f849 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f846 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002814:	2029      	movs	r0, #41	; 0x29
 8002816:	f7fe f843 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f840 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002820:	2026      	movs	r0, #38	; 0x26
 8002822:	f7fe f83d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f83a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800282c:	2024      	movs	r0, #36	; 0x24
 800282e:	f7fe f837 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f834 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002838:	2024      	movs	r0, #36	; 0x24
 800283a:	f7fe f831 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f82e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002844:	2023      	movs	r0, #35	; 0x23
 8002846:	f7fe f82b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f828 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002850:	203c      	movs	r0, #60	; 0x3c
 8002852:	f7fe f825 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f822 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800285c:	2036      	movs	r0, #54	; 0x36
 800285e:	f7fe f81f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe f81c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002868:	2032      	movs	r0, #50	; 0x32
 800286a:	f7fe f819 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f816 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002874:	202f      	movs	r0, #47	; 0x2f
 8002876:	f7fe f813 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f810 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002880:	202c      	movs	r0, #44	; 0x2c
 8002882:	f7fe f80d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f80a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800288c:	2029      	movs	r0, #41	; 0x29
 800288e:	f7fe f807 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f804 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002898:	2026      	movs	r0, #38	; 0x26
 800289a:	f7fe f801 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fd fffe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028a4:	2024      	movs	r0, #36	; 0x24
 80028a6:	f7fd fffb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fd fff8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028b0:	2024      	movs	r0, #36	; 0x24
 80028b2:	f7fd fff5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fd fff2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80028bc:	2023      	movs	r0, #35	; 0x23
 80028be:	f7fd ffef 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fd ffec 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80028c8:	20c4      	movs	r0, #196	; 0xc4
 80028ca:	f7fd ffc5 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80028ce:	2062      	movs	r0, #98	; 0x62
 80028d0:	f7fd ffe6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fd ffe3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80028da:	2005      	movs	r0, #5
 80028dc:	f7fd ffe0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fd ffdd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80028e6:	2084      	movs	r0, #132	; 0x84
 80028e8:	f7fd ffda 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fd ffd7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80028f2:	20f0      	movs	r0, #240	; 0xf0
 80028f4:	f7fd ffd4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fd ffd1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80028fe:	2018      	movs	r0, #24
 8002900:	f7fd ffce 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fd ffcb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800290a:	20a4      	movs	r0, #164	; 0xa4
 800290c:	f7fd ffc8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fd ffc5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002916:	2018      	movs	r0, #24
 8002918:	f7fd ffc2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fd ffbf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002922:	2050      	movs	r0, #80	; 0x50
 8002924:	f7fd ffbc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fd ffb9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800292e:	200c      	movs	r0, #12
 8002930:	f7fd ffb6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fd ffb3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800293a:	2017      	movs	r0, #23
 800293c:	f7fd ffb0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fd ffad 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002946:	2095      	movs	r0, #149	; 0x95
 8002948:	f7fd ffaa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fd ffa7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002952:	20f3      	movs	r0, #243	; 0xf3
 8002954:	f7fd ffa4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fd ffa1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800295e:	20e6      	movs	r0, #230	; 0xe6
 8002960:	f7fd ff9e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fd ff9b 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800296a:	20c5      	movs	r0, #197	; 0xc5
 800296c:	f7fd ff74 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002970:	2032      	movs	r0, #50	; 0x32
 8002972:	f7fd ff95 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fd ff92 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800297c:	2044      	movs	r0, #68	; 0x44
 800297e:	f7fd ff8f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fd ff8c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002988:	2065      	movs	r0, #101	; 0x65
 800298a:	f7fd ff89 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fd ff86 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002994:	2076      	movs	r0, #118	; 0x76
 8002996:	f7fd ff83 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fd ff80 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80029a0:	2088      	movs	r0, #136	; 0x88
 80029a2:	f7fd ff7d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fd ff7a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80029ac:	20c6      	movs	r0, #198	; 0xc6
 80029ae:	f7fd ff53 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80029b2:	2020      	movs	r0, #32
 80029b4:	f7fd ff74 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fd ff71 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80029be:	2017      	movs	r0, #23
 80029c0:	f7fd ff6e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fd ff6b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7fd ff68 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fd ff65 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80029d6:	20c7      	movs	r0, #199	; 0xc7
 80029d8:	f7fd ff3e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fd ff5f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fd ff5c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fd ff59 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fd ff56 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80029f4:	20c8      	movs	r0, #200	; 0xc8
 80029f6:	f7fd ff2f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fd ff50 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fd ff4d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fd ff4a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fd ff47 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002a12:	20c9      	movs	r0, #201	; 0xc9
 8002a14:	f7fd ff20 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fd ff41 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fd ff3e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd ff3b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fd ff38 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fd ff35 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fd ff32 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ff2f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fd ff2c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ff29 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fd ff26 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd ff23 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fd ff20 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ff1d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fd ff1a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ff17 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fd ff14 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002a78:	20e0      	movs	r0, #224	; 0xe0
 8002a7a:	f7fd feed 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002a7e:	2016      	movs	r0, #22
 8002a80:	f7fd ff0e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd ff0b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002a8a:	201c      	movs	r0, #28
 8002a8c:	f7fd ff08 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fd ff05 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002a96:	2021      	movs	r0, #33	; 0x21
 8002a98:	f7fd ff02 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fd feff 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002aa2:	2036      	movs	r0, #54	; 0x36
 8002aa4:	f7fd fefc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fd fef9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002aae:	2046      	movs	r0, #70	; 0x46
 8002ab0:	f7fd fef6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd fef3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002aba:	2052      	movs	r0, #82	; 0x52
 8002abc:	f7fd fef0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd feed 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f7fd feea 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd fee7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ad2:	207a      	movs	r0, #122	; 0x7a
 8002ad4:	f7fd fee4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fd fee1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002ade:	208b      	movs	r0, #139	; 0x8b
 8002ae0:	f7fd fede 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fd fedb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002aea:	2099      	movs	r0, #153	; 0x99
 8002aec:	f7fd fed8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fd fed5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002af6:	20a8      	movs	r0, #168	; 0xa8
 8002af8:	f7fd fed2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fd fecf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002b02:	20b9      	movs	r0, #185	; 0xb9
 8002b04:	f7fd fecc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fd fec9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b0e:	20c4      	movs	r0, #196	; 0xc4
 8002b10:	f7fd fec6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7fd fec3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002b1a:	20ca      	movs	r0, #202	; 0xca
 8002b1c:	f7fd fec0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fd febd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002b26:	20d2      	movs	r0, #210	; 0xd2
 8002b28:	f7fd feba 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fd feb7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002b32:	20d9      	movs	r0, #217	; 0xd9
 8002b34:	f7fd feb4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd feb1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002b3e:	20e0      	movs	r0, #224	; 0xe0
 8002b40:	f7fd feae 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fd feab 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b4a:	20f3      	movs	r0, #243	; 0xf3
 8002b4c:	f7fd fea8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd fea5 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002b56:	20e1      	movs	r0, #225	; 0xe1
 8002b58:	f7fd fe7e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002b5c:	2016      	movs	r0, #22
 8002b5e:	f7fd fe9f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd fe9c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002b68:	201c      	movs	r0, #28
 8002b6a:	f7fd fe99 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd fe96 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002b74:	2022      	movs	r0, #34	; 0x22
 8002b76:	f7fd fe93 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd fe90 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b80:	2036      	movs	r0, #54	; 0x36
 8002b82:	f7fd fe8d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fd fe8a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002b8c:	2045      	movs	r0, #69	; 0x45
 8002b8e:	f7fd fe87 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fd fe84 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002b98:	2052      	movs	r0, #82	; 0x52
 8002b9a:	f7fd fe81 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fd fe7e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002ba4:	2064      	movs	r0, #100	; 0x64
 8002ba6:	f7fd fe7b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd fe78 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002bb0:	207a      	movs	r0, #122	; 0x7a
 8002bb2:	f7fd fe75 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fd fe72 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002bbc:	208b      	movs	r0, #139	; 0x8b
 8002bbe:	f7fd fe6f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fd fe6c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002bc8:	2099      	movs	r0, #153	; 0x99
 8002bca:	f7fd fe69 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fd fe66 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002bd4:	20a8      	movs	r0, #168	; 0xa8
 8002bd6:	f7fd fe63 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fd fe60 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002be0:	20b9      	movs	r0, #185	; 0xb9
 8002be2:	f7fd fe5d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fe5a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002bec:	20c4      	movs	r0, #196	; 0xc4
 8002bee:	f7fd fe57 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd fe54 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002bf8:	20ca      	movs	r0, #202	; 0xca
 8002bfa:	f7fd fe51 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd fe4e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c04:	20d2      	movs	r0, #210	; 0xd2
 8002c06:	f7fd fe4b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd fe48 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002c10:	20d8      	movs	r0, #216	; 0xd8
 8002c12:	f7fd fe45 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fd fe42 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c1c:	20e0      	movs	r0, #224	; 0xe0
 8002c1e:	f7fd fe3f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fd fe3c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c28:	20f3      	movs	r0, #243	; 0xf3
 8002c2a:	f7fd fe39 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fd fe36 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002c34:	20e2      	movs	r0, #226	; 0xe2
 8002c36:	f7fd fe0f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f7fd fe30 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd fe2d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002c46:	200b      	movs	r0, #11
 8002c48:	f7fd fe2a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd fe27 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002c52:	201b      	movs	r0, #27
 8002c54:	f7fd fe24 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd fe21 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002c5e:	2034      	movs	r0, #52	; 0x34
 8002c60:	f7fd fe1e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd fe1b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c6a:	2044      	movs	r0, #68	; 0x44
 8002c6c:	f7fd fe18 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd fe15 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002c76:	204f      	movs	r0, #79	; 0x4f
 8002c78:	f7fd fe12 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd fe0f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002c82:	2061      	movs	r0, #97	; 0x61
 8002c84:	f7fd fe0c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd fe09 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002c8e:	2079      	movs	r0, #121	; 0x79
 8002c90:	f7fd fe06 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd fe03 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002c9a:	2088      	movs	r0, #136	; 0x88
 8002c9c:	f7fd fe00 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd fdfd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002ca6:	2097      	movs	r0, #151	; 0x97
 8002ca8:	f7fd fdfa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd fdf7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002cb2:	20a6      	movs	r0, #166	; 0xa6
 8002cb4:	f7fd fdf4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fd fdf1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002cbe:	20b7      	movs	r0, #183	; 0xb7
 8002cc0:	f7fd fdee 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fd fdeb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002cca:	20c2      	movs	r0, #194	; 0xc2
 8002ccc:	f7fd fde8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fd fde5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002cd6:	20c7      	movs	r0, #199	; 0xc7
 8002cd8:	f7fd fde2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fd fddf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002ce2:	20d1      	movs	r0, #209	; 0xd1
 8002ce4:	f7fd fddc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd fdd9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002cee:	20d6      	movs	r0, #214	; 0xd6
 8002cf0:	f7fd fdd6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fd fdd3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002cfa:	20dd      	movs	r0, #221	; 0xdd
 8002cfc:	f7fd fdd0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd fdcd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d06:	20f3      	movs	r0, #243	; 0xf3
 8002d08:	f7fd fdca 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd fdc7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002d12:	20e3      	movs	r0, #227	; 0xe3
 8002d14:	f7fd fda0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d18:	2005      	movs	r0, #5
 8002d1a:	f7fd fdc1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd fdbe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002d24:	200a      	movs	r0, #10
 8002d26:	f7fd fdbb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd fdb8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d30:	201c      	movs	r0, #28
 8002d32:	f7fd fdb5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fdb2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002d3c:	2033      	movs	r0, #51	; 0x33
 8002d3e:	f7fd fdaf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd fdac 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d48:	2044      	movs	r0, #68	; 0x44
 8002d4a:	f7fd fda9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd fda6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002d54:	2050      	movs	r0, #80	; 0x50
 8002d56:	f7fd fda3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd fda0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002d60:	2062      	movs	r0, #98	; 0x62
 8002d62:	f7fd fd9d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd fd9a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002d6c:	2078      	movs	r0, #120	; 0x78
 8002d6e:	f7fd fd97 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd fd94 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d78:	2088      	movs	r0, #136	; 0x88
 8002d7a:	f7fd fd91 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd fd8e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002d84:	2097      	movs	r0, #151	; 0x97
 8002d86:	f7fd fd8b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd fd88 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002d90:	20a6      	movs	r0, #166	; 0xa6
 8002d92:	f7fd fd85 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd fd82 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002d9c:	20b7      	movs	r0, #183	; 0xb7
 8002d9e:	f7fd fd7f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd fd7c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002da8:	20c2      	movs	r0, #194	; 0xc2
 8002daa:	f7fd fd79 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd fd76 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002db4:	20c7      	movs	r0, #199	; 0xc7
 8002db6:	f7fd fd73 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd fd70 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002dc0:	20d1      	movs	r0, #209	; 0xd1
 8002dc2:	f7fd fd6d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd fd6a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002dcc:	20d5      	movs	r0, #213	; 0xd5
 8002dce:	f7fd fd67 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fd fd64 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002dd8:	20dd      	movs	r0, #221	; 0xdd
 8002dda:	f7fd fd61 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fd fd5e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002de4:	20f3      	movs	r0, #243	; 0xf3
 8002de6:	f7fd fd5b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd fd58 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002df0:	20e4      	movs	r0, #228	; 0xe4
 8002df2:	f7fd fd31 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7fd fd52 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fd4f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fd fd4c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fd49 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f7fd fd46 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fd43 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002e1a:	202a      	movs	r0, #42	; 0x2a
 8002e1c:	f7fd fd40 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fd3d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002e26:	203c      	movs	r0, #60	; 0x3c
 8002e28:	f7fd fd3a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fd37 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002e32:	204b      	movs	r0, #75	; 0x4b
 8002e34:	f7fd fd34 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fd31 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002e3e:	205d      	movs	r0, #93	; 0x5d
 8002e40:	f7fd fd2e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fd2b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002e4a:	2074      	movs	r0, #116	; 0x74
 8002e4c:	f7fd fd28 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fd25 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002e56:	2084      	movs	r0, #132	; 0x84
 8002e58:	f7fd fd22 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fd1f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002e62:	2093      	movs	r0, #147	; 0x93
 8002e64:	f7fd fd1c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fd19 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002e6e:	20a2      	movs	r0, #162	; 0xa2
 8002e70:	f7fd fd16 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd fd13 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002e7a:	20b3      	movs	r0, #179	; 0xb3
 8002e7c:	f7fd fd10 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fd0d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002e86:	20be      	movs	r0, #190	; 0xbe
 8002e88:	f7fd fd0a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd fd07 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e92:	20c4      	movs	r0, #196	; 0xc4
 8002e94:	f7fd fd04 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fd01 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002e9e:	20cd      	movs	r0, #205	; 0xcd
 8002ea0:	f7fd fcfe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fcfb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002eaa:	20d3      	movs	r0, #211	; 0xd3
 8002eac:	f7fd fcf8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd fcf5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002eb6:	20dd      	movs	r0, #221	; 0xdd
 8002eb8:	f7fd fcf2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd fcef 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ec2:	20f3      	movs	r0, #243	; 0xf3
 8002ec4:	f7fd fcec 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd fce9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002ece:	20e5      	movs	r0, #229	; 0xe5
 8002ed0:	f7fd fcc2 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd fce3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fce0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fd fcdd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fcda 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002eec:	2002      	movs	r0, #2
 8002eee:	f7fd fcd7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fcd4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002ef8:	2029      	movs	r0, #41	; 0x29
 8002efa:	f7fd fcd1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fcce 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f04:	203c      	movs	r0, #60	; 0x3c
 8002f06:	f7fd fccb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fcc8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f10:	204b      	movs	r0, #75	; 0x4b
 8002f12:	f7fd fcc5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fcc2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f1c:	205d      	movs	r0, #93	; 0x5d
 8002f1e:	f7fd fcbf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fcbc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f28:	2074      	movs	r0, #116	; 0x74
 8002f2a:	f7fd fcb9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fcb6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f34:	2084      	movs	r0, #132	; 0x84
 8002f36:	f7fd fcb3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fcb0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f40:	2093      	movs	r0, #147	; 0x93
 8002f42:	f7fd fcad 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fcaa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f4c:	20a2      	movs	r0, #162	; 0xa2
 8002f4e:	f7fd fca7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fca4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002f58:	20b3      	movs	r0, #179	; 0xb3
 8002f5a:	f7fd fca1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fc9e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002f64:	20be      	movs	r0, #190	; 0xbe
 8002f66:	f7fd fc9b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fc98 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f70:	20c4      	movs	r0, #196	; 0xc4
 8002f72:	f7fd fc95 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fc92 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002f7c:	20cd      	movs	r0, #205	; 0xcd
 8002f7e:	f7fd fc8f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fd fc8c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002f88:	20d3      	movs	r0, #211	; 0xd3
 8002f8a:	f7fd fc89 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fd fc86 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002f94:	20dc      	movs	r0, #220	; 0xdc
 8002f96:	f7fd fc83 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fd fc80 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fa0:	20f3      	movs	r0, #243	; 0xf3
 8002fa2:	f7fd fc7d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fd fc7a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002fac:	20e6      	movs	r0, #230	; 0xe6
 8002fae:	f7fd fc53 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002fb2:	2011      	movs	r0, #17
 8002fb4:	f7fd fc74 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fc71 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002fbe:	2034      	movs	r0, #52	; 0x34
 8002fc0:	f7fd fc6e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fc6b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002fca:	2056      	movs	r0, #86	; 0x56
 8002fcc:	f7fd fc68 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fc65 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002fd6:	2076      	movs	r0, #118	; 0x76
 8002fd8:	f7fd fc62 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fc5f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002fe2:	2077      	movs	r0, #119	; 0x77
 8002fe4:	f7fd fc5c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fc59 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002fee:	2066      	movs	r0, #102	; 0x66
 8002ff0:	f7fd fc56 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fc53 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ffa:	2088      	movs	r0, #136	; 0x88
 8002ffc:	f7fd fc50 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fc4d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003006:	2099      	movs	r0, #153	; 0x99
 8003008:	f7fd fc4a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fc47 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003012:	20bb      	movs	r0, #187	; 0xbb
 8003014:	f7fd fc44 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fc41 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800301e:	2099      	movs	r0, #153	; 0x99
 8003020:	f7fd fc3e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fc3b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800302a:	2066      	movs	r0, #102	; 0x66
 800302c:	f7fd fc38 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fc35 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003036:	2055      	movs	r0, #85	; 0x55
 8003038:	f7fd fc32 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fc2f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003042:	2055      	movs	r0, #85	; 0x55
 8003044:	f7fd fc2c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fc29 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800304e:	2045      	movs	r0, #69	; 0x45
 8003050:	f7fd fc26 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fd fc23 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800305a:	2043      	movs	r0, #67	; 0x43
 800305c:	f7fd fc20 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003060:	2000      	movs	r0, #0
 8003062:	f7fd fc1d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003066:	2044      	movs	r0, #68	; 0x44
 8003068:	f7fd fc1a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f7fd fc17 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003072:	20e7      	movs	r0, #231	; 0xe7
 8003074:	f7fd fbf0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003078:	2032      	movs	r0, #50	; 0x32
 800307a:	f7fd fc11 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fc0e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003084:	2055      	movs	r0, #85	; 0x55
 8003086:	f7fd fc0b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fc08 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003090:	2076      	movs	r0, #118	; 0x76
 8003092:	f7fd fc05 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fc02 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800309c:	2066      	movs	r0, #102	; 0x66
 800309e:	f7fd fbff 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fbfc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80030a8:	2067      	movs	r0, #103	; 0x67
 80030aa:	f7fd fbf9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fbf6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80030b4:	2067      	movs	r0, #103	; 0x67
 80030b6:	f7fd fbf3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fbf0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80030c0:	2087      	movs	r0, #135	; 0x87
 80030c2:	f7fd fbed 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fbea 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80030cc:	2099      	movs	r0, #153	; 0x99
 80030ce:	f7fd fbe7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fbe4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80030d8:	20bb      	movs	r0, #187	; 0xbb
 80030da:	f7fd fbe1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fbde 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80030e4:	2099      	movs	r0, #153	; 0x99
 80030e6:	f7fd fbdb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fbd8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80030f0:	2077      	movs	r0, #119	; 0x77
 80030f2:	f7fd fbd5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fbd2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030fc:	2044      	movs	r0, #68	; 0x44
 80030fe:	f7fd fbcf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fbcc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003108:	2056      	movs	r0, #86	; 0x56
 800310a:	f7fd fbc9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fbc6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003114:	2023      	movs	r0, #35	; 0x23
 8003116:	f7fd fbc3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fbc0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003120:	2033      	movs	r0, #51	; 0x33
 8003122:	f7fd fbbd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fbba 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800312c:	2045      	movs	r0, #69	; 0x45
 800312e:	f7fd fbb7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fbb4 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003138:	20e8      	movs	r0, #232	; 0xe8
 800313a:	f7fd fb8d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd fbae 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fbab 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800314a:	2099      	movs	r0, #153	; 0x99
 800314c:	f7fd fba8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fba5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003156:	2087      	movs	r0, #135	; 0x87
 8003158:	f7fd fba2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fb9f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003162:	2088      	movs	r0, #136	; 0x88
 8003164:	f7fd fb9c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fb99 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800316e:	2077      	movs	r0, #119	; 0x77
 8003170:	f7fd fb96 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fb93 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800317a:	2066      	movs	r0, #102	; 0x66
 800317c:	f7fd fb90 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fb8d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003186:	2088      	movs	r0, #136	; 0x88
 8003188:	f7fd fb8a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fb87 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003192:	20aa      	movs	r0, #170	; 0xaa
 8003194:	f7fd fb84 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fb81 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800319e:	20bb      	movs	r0, #187	; 0xbb
 80031a0:	f7fd fb7e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fb7b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031aa:	2099      	movs	r0, #153	; 0x99
 80031ac:	f7fd fb78 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fb75 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031b6:	2066      	movs	r0, #102	; 0x66
 80031b8:	f7fd fb72 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fb6f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031c2:	2055      	movs	r0, #85	; 0x55
 80031c4:	f7fd fb6c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fb69 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031ce:	2055      	movs	r0, #85	; 0x55
 80031d0:	f7fd fb66 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fb63 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80031da:	2044      	movs	r0, #68	; 0x44
 80031dc:	f7fd fb60 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fb5d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80031e6:	2044      	movs	r0, #68	; 0x44
 80031e8:	f7fd fb5a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fb57 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031f2:	2055      	movs	r0, #85	; 0x55
 80031f4:	f7fd fb54 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fb51 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80031fe:	20e9      	movs	r0, #233	; 0xe9
 8003200:	f7fd fb2a 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003204:	20aa      	movs	r0, #170	; 0xaa
 8003206:	f7fd fb4b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fb48 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fb45 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fb42 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fb1b 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003222:	20aa      	movs	r0, #170	; 0xaa
 8003224:	f7fd fb3c 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003228:	20cf      	movs	r0, #207	; 0xcf
 800322a:	f7fd fb15 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fb36 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003234:	2000      	movs	r0, #0
 8003236:	f7fd fb33 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fb30 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fd fb2d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fb2a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fd fb27 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fb24 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd fb21 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fb1e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd fb1b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fb18 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fb15 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fb12 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fb0f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fb0c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd fb09 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fb06 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003294:	20f0      	movs	r0, #240	; 0xf0
 8003296:	f7fd fadf 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fb00 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80032a0:	2050      	movs	r0, #80	; 0x50
 80032a2:	f7fd fafd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fafa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd faf7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd faf4 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80032b8:	20f3      	movs	r0, #243	; 0xf3
 80032ba:	f7fd facd 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd faee 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80032c4:	20f9      	movs	r0, #249	; 0xf9
 80032c6:	f7fd fac7 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80032ca:	2006      	movs	r0, #6
 80032cc:	f7fd fae8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80032d0:	2010      	movs	r0, #16
 80032d2:	f7fd fae5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80032d6:	2029      	movs	r0, #41	; 0x29
 80032d8:	f7fd fae2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fd fadf 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80032e2:	203a      	movs	r0, #58	; 0x3a
 80032e4:	f7fd fab8 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80032e8:	2055      	movs	r0, #85	; 0x55
 80032ea:	f7fd fad9 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80032ee:	2011      	movs	r0, #17
 80032f0:	f7fd fab2 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(100);
 80032f4:	2064      	movs	r0, #100	; 0x64
 80032f6:	f004 facd 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0x29);
 80032fa:	2029      	movs	r0, #41	; 0x29
 80032fc:	f7fd faac 	bl	8000858 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003300:	2035      	movs	r0, #53	; 0x35
 8003302:	f7fd faa9 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003306:	2000      	movs	r0, #0
 8003308:	f7fd faca 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800330c:	2051      	movs	r0, #81	; 0x51
 800330e:	f7fd faa3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003312:	20ff      	movs	r0, #255	; 0xff
 8003314:	f7fd fac4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003318:	2053      	movs	r0, #83	; 0x53
 800331a:	f7fd fa9d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800331e:	202c      	movs	r0, #44	; 0x2c
 8003320:	f7fd fabe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003324:	2055      	movs	r0, #85	; 0x55
 8003326:	f7fd fa97 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800332a:	2082      	movs	r0, #130	; 0x82
 800332c:	f7fd fab8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003330:	202c      	movs	r0, #44	; 0x2c
 8003332:	f7fd fa91 	bl	8000858 <LCD_WR_REG>
 8003336:	f002 bca1 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <LCD_Init+0x1504>)
 800333c:	889b      	ldrh	r3, [r3, #4]
 800333e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 8782 	bne.w	800424c <LCD_Init+0x2404>
 8003348:	e002      	b.n	8003350 <LCD_Init+0x1508>
 800334a:	bf00      	nop
 800334c:	200010cc 	.word	0x200010cc
		LCD_WriteReg(0xF000, 0x55);
 8003350:	2155      	movs	r1, #85	; 0x55
 8003352:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003356:	f7fd fb0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800335a:	21aa      	movs	r1, #170	; 0xaa
 800335c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003360:	f7fd fb06 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003364:	2152      	movs	r1, #82	; 0x52
 8003366:	f24f 0002 	movw	r0, #61442	; 0xf002
 800336a:	f7fd fb01 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800336e:	2108      	movs	r1, #8
 8003370:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003374:	f7fd fafc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003378:	2101      	movs	r1, #1
 800337a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800337e:	f7fd faf7 	bl	8000970 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003382:	210d      	movs	r1, #13
 8003384:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003388:	f7fd faf2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800338c:	210d      	movs	r1, #13
 800338e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003392:	f7fd faed 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003396:	210d      	movs	r1, #13
 8003398:	f24b 0002 	movw	r0, #45058	; 0xb002
 800339c:	f7fd fae8 	bl	8000970 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80033a0:	2134      	movs	r1, #52	; 0x34
 80033a2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80033a6:	f7fd fae3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80033aa:	2134      	movs	r1, #52	; 0x34
 80033ac:	f24b 6001 	movw	r0, #46593	; 0xb601
 80033b0:	f7fd fade 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80033b4:	2134      	movs	r1, #52	; 0x34
 80033b6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80033ba:	f7fd fad9 	bl	8000970 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80033be:	210d      	movs	r1, #13
 80033c0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80033c4:	f7fd fad4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80033c8:	210d      	movs	r1, #13
 80033ca:	f24b 1001 	movw	r0, #45313	; 0xb101
 80033ce:	f7fd facf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80033d2:	210d      	movs	r1, #13
 80033d4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80033d8:	f7fd faca 	bl	8000970 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80033dc:	2134      	movs	r1, #52	; 0x34
 80033de:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80033e2:	f7fd fac5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80033e6:	2134      	movs	r1, #52	; 0x34
 80033e8:	f24b 7001 	movw	r0, #46849	; 0xb701
 80033ec:	f7fd fac0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80033f0:	2134      	movs	r1, #52	; 0x34
 80033f2:	f24b 7002 	movw	r0, #46850	; 0xb702
 80033f6:	f7fd fabb 	bl	8000970 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80033fa:	2100      	movs	r1, #0
 80033fc:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003400:	f7fd fab6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003404:	2100      	movs	r1, #0
 8003406:	f24b 2001 	movw	r0, #45569	; 0xb201
 800340a:	f7fd fab1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800340e:	2100      	movs	r1, #0
 8003410:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003414:	f7fd faac 	bl	8000970 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003418:	2124      	movs	r1, #36	; 0x24
 800341a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800341e:	f7fd faa7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003422:	2124      	movs	r1, #36	; 0x24
 8003424:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003428:	f7fd faa2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800342c:	2124      	movs	r1, #36	; 0x24
 800342e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003432:	f7fd fa9d 	bl	8000970 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003436:	2101      	movs	r1, #1
 8003438:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800343c:	f7fd fa98 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003440:	210f      	movs	r1, #15
 8003442:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003446:	f7fd fa93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800344a:	210f      	movs	r1, #15
 800344c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003450:	f7fd fa8e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003454:	210f      	movs	r1, #15
 8003456:	f24b 3002 	movw	r0, #45826	; 0xb302
 800345a:	f7fd fa89 	bl	8000970 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800345e:	2134      	movs	r1, #52	; 0x34
 8003460:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003464:	f7fd fa84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003468:	2134      	movs	r1, #52	; 0x34
 800346a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800346e:	f7fd fa7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003472:	2134      	movs	r1, #52	; 0x34
 8003474:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003478:	f7fd fa7a 	bl	8000970 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800347c:	2108      	movs	r1, #8
 800347e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003482:	f7fd fa75 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003486:	2108      	movs	r1, #8
 8003488:	f24b 5001 	movw	r0, #46337	; 0xb501
 800348c:	f7fd fa70 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003490:	2108      	movs	r1, #8
 8003492:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003496:	f7fd fa6b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800349a:	2103      	movs	r1, #3
 800349c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80034a0:	f7fd fa66 	bl	8000970 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80034a4:	2124      	movs	r1, #36	; 0x24
 80034a6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80034aa:	f7fd fa61 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80034ae:	2124      	movs	r1, #36	; 0x24
 80034b0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80034b4:	f7fd fa5c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80034b8:	2124      	movs	r1, #36	; 0x24
 80034ba:	f64b 2002 	movw	r0, #47618	; 0xba02
 80034be:	f7fd fa57 	bl	8000970 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80034c2:	2100      	movs	r1, #0
 80034c4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80034c8:	f7fd fa52 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80034cc:	2178      	movs	r1, #120	; 0x78
 80034ce:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80034d2:	f7fd fa4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80034d6:	2100      	movs	r1, #0
 80034d8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80034dc:	f7fd fa48 	bl	8000970 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80034e0:	2100      	movs	r1, #0
 80034e2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80034e6:	f7fd fa43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80034ea:	2178      	movs	r1, #120	; 0x78
 80034ec:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80034f0:	f7fd fa3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80034f4:	2100      	movs	r1, #0
 80034f6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80034fa:	f7fd fa39 	bl	8000970 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80034fe:	2100      	movs	r1, #0
 8003500:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003504:	f7fd fa34 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003508:	2164      	movs	r1, #100	; 0x64
 800350a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800350e:	f7fd fa2f 	bl	8000970 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003512:	2100      	movs	r1, #0
 8003514:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003518:	f7fd fa2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800351c:	2133      	movs	r1, #51	; 0x33
 800351e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003522:	f7fd fa25 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003526:	2100      	movs	r1, #0
 8003528:	f24d 1002 	movw	r0, #53506	; 0xd102
 800352c:	f7fd fa20 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003530:	2134      	movs	r1, #52	; 0x34
 8003532:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003536:	f7fd fa1b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800353a:	2100      	movs	r1, #0
 800353c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003540:	f7fd fa16 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003544:	213a      	movs	r1, #58	; 0x3a
 8003546:	f24d 1005 	movw	r0, #53509	; 0xd105
 800354a:	f7fd fa11 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800354e:	2100      	movs	r1, #0
 8003550:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003554:	f7fd fa0c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003558:	214a      	movs	r1, #74	; 0x4a
 800355a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800355e:	f7fd fa07 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003562:	2100      	movs	r1, #0
 8003564:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003568:	f7fd fa02 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800356c:	215c      	movs	r1, #92	; 0x5c
 800356e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003572:	f7fd f9fd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003576:	2100      	movs	r1, #0
 8003578:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800357c:	f7fd f9f8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003580:	2181      	movs	r1, #129	; 0x81
 8003582:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003586:	f7fd f9f3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800358a:	2100      	movs	r1, #0
 800358c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003590:	f7fd f9ee 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003594:	21a6      	movs	r1, #166	; 0xa6
 8003596:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800359a:	f7fd f9e9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800359e:	2100      	movs	r1, #0
 80035a0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80035a4:	f7fd f9e4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80035a8:	21e5      	movs	r1, #229	; 0xe5
 80035aa:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80035ae:	f7fd f9df 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80035b2:	2101      	movs	r1, #1
 80035b4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80035b8:	f7fd f9da 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80035bc:	2113      	movs	r1, #19
 80035be:	f24d 1011 	movw	r0, #53521	; 0xd111
 80035c2:	f7fd f9d5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80035c6:	2101      	movs	r1, #1
 80035c8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80035cc:	f7fd f9d0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80035d0:	2154      	movs	r1, #84	; 0x54
 80035d2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80035d6:	f7fd f9cb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80035da:	2101      	movs	r1, #1
 80035dc:	f24d 1014 	movw	r0, #53524	; 0xd114
 80035e0:	f7fd f9c6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80035e4:	2182      	movs	r1, #130	; 0x82
 80035e6:	f24d 1015 	movw	r0, #53525	; 0xd115
 80035ea:	f7fd f9c1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80035ee:	2101      	movs	r1, #1
 80035f0:	f24d 1016 	movw	r0, #53526	; 0xd116
 80035f4:	f7fd f9bc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80035f8:	21ca      	movs	r1, #202	; 0xca
 80035fa:	f24d 1017 	movw	r0, #53527	; 0xd117
 80035fe:	f7fd f9b7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003602:	2102      	movs	r1, #2
 8003604:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003608:	f7fd f9b2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800360c:	2100      	movs	r1, #0
 800360e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003612:	f7fd f9ad 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003616:	2102      	movs	r1, #2
 8003618:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800361c:	f7fd f9a8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003620:	2101      	movs	r1, #1
 8003622:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003626:	f7fd f9a3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800362a:	2102      	movs	r1, #2
 800362c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003630:	f7fd f99e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003634:	2134      	movs	r1, #52	; 0x34
 8003636:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800363a:	f7fd f999 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800363e:	2102      	movs	r1, #2
 8003640:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003644:	f7fd f994 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003648:	2167      	movs	r1, #103	; 0x67
 800364a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800364e:	f7fd f98f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003652:	2102      	movs	r1, #2
 8003654:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003658:	f7fd f98a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800365c:	2184      	movs	r1, #132	; 0x84
 800365e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003662:	f7fd f985 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003666:	2102      	movs	r1, #2
 8003668:	f24d 1022 	movw	r0, #53538	; 0xd122
 800366c:	f7fd f980 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003670:	21a4      	movs	r1, #164	; 0xa4
 8003672:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003676:	f7fd f97b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800367a:	2102      	movs	r1, #2
 800367c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003680:	f7fd f976 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003684:	21b7      	movs	r1, #183	; 0xb7
 8003686:	f24d 1025 	movw	r0, #53541	; 0xd125
 800368a:	f7fd f971 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800368e:	2102      	movs	r1, #2
 8003690:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003694:	f7fd f96c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003698:	21cf      	movs	r1, #207	; 0xcf
 800369a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800369e:	f7fd f967 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80036a2:	2102      	movs	r1, #2
 80036a4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80036a8:	f7fd f962 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80036ac:	21de      	movs	r1, #222	; 0xde
 80036ae:	f24d 1029 	movw	r0, #53545	; 0xd129
 80036b2:	f7fd f95d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80036b6:	2102      	movs	r1, #2
 80036b8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80036bc:	f7fd f958 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80036c0:	21f2      	movs	r1, #242	; 0xf2
 80036c2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80036c6:	f7fd f953 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80036ca:	2102      	movs	r1, #2
 80036cc:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80036d0:	f7fd f94e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80036d4:	21fe      	movs	r1, #254	; 0xfe
 80036d6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80036da:	f7fd f949 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80036de:	2103      	movs	r1, #3
 80036e0:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80036e4:	f7fd f944 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80036e8:	2110      	movs	r1, #16
 80036ea:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80036ee:	f7fd f93f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80036f2:	2103      	movs	r1, #3
 80036f4:	f24d 1030 	movw	r0, #53552	; 0xd130
 80036f8:	f7fd f93a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80036fc:	2133      	movs	r1, #51	; 0x33
 80036fe:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003702:	f7fd f935 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003706:	2103      	movs	r1, #3
 8003708:	f24d 1032 	movw	r0, #53554	; 0xd132
 800370c:	f7fd f930 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003710:	216d      	movs	r1, #109	; 0x6d
 8003712:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003716:	f7fd f92b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800371a:	2100      	movs	r1, #0
 800371c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003720:	f7fd f926 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003724:	2133      	movs	r1, #51	; 0x33
 8003726:	f24d 2001 	movw	r0, #53761	; 0xd201
 800372a:	f7fd f921 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800372e:	2100      	movs	r1, #0
 8003730:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003734:	f7fd f91c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003738:	2134      	movs	r1, #52	; 0x34
 800373a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800373e:	f7fd f917 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003742:	2100      	movs	r1, #0
 8003744:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003748:	f7fd f912 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800374c:	213a      	movs	r1, #58	; 0x3a
 800374e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003752:	f7fd f90d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003756:	2100      	movs	r1, #0
 8003758:	f24d 2006 	movw	r0, #53766	; 0xd206
 800375c:	f7fd f908 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003760:	214a      	movs	r1, #74	; 0x4a
 8003762:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003766:	f7fd f903 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800376a:	2100      	movs	r1, #0
 800376c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003770:	f7fd f8fe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003774:	215c      	movs	r1, #92	; 0x5c
 8003776:	f24d 2009 	movw	r0, #53769	; 0xd209
 800377a:	f7fd f8f9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800377e:	2100      	movs	r1, #0
 8003780:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003784:	f7fd f8f4 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003788:	2181      	movs	r1, #129	; 0x81
 800378a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800378e:	f7fd f8ef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003792:	2100      	movs	r1, #0
 8003794:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003798:	f7fd f8ea 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800379c:	21a6      	movs	r1, #166	; 0xa6
 800379e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80037a2:	f7fd f8e5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80037a6:	2100      	movs	r1, #0
 80037a8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80037ac:	f7fd f8e0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80037b0:	21e5      	movs	r1, #229	; 0xe5
 80037b2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80037b6:	f7fd f8db 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80037ba:	2101      	movs	r1, #1
 80037bc:	f24d 2010 	movw	r0, #53776	; 0xd210
 80037c0:	f7fd f8d6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80037c4:	2113      	movs	r1, #19
 80037c6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80037ca:	f7fd f8d1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80037ce:	2101      	movs	r1, #1
 80037d0:	f24d 2012 	movw	r0, #53778	; 0xd212
 80037d4:	f7fd f8cc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80037d8:	2154      	movs	r1, #84	; 0x54
 80037da:	f24d 2013 	movw	r0, #53779	; 0xd213
 80037de:	f7fd f8c7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80037e2:	2101      	movs	r1, #1
 80037e4:	f24d 2014 	movw	r0, #53780	; 0xd214
 80037e8:	f7fd f8c2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80037ec:	2182      	movs	r1, #130	; 0x82
 80037ee:	f24d 2015 	movw	r0, #53781	; 0xd215
 80037f2:	f7fd f8bd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80037f6:	2101      	movs	r1, #1
 80037f8:	f24d 2016 	movw	r0, #53782	; 0xd216
 80037fc:	f7fd f8b8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003800:	21ca      	movs	r1, #202	; 0xca
 8003802:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003806:	f7fd f8b3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800380a:	2102      	movs	r1, #2
 800380c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003810:	f7fd f8ae 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003814:	2100      	movs	r1, #0
 8003816:	f24d 2019 	movw	r0, #53785	; 0xd219
 800381a:	f7fd f8a9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800381e:	2102      	movs	r1, #2
 8003820:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003824:	f7fd f8a4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003828:	2101      	movs	r1, #1
 800382a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800382e:	f7fd f89f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003832:	2102      	movs	r1, #2
 8003834:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003838:	f7fd f89a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800383c:	2134      	movs	r1, #52	; 0x34
 800383e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003842:	f7fd f895 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003846:	2102      	movs	r1, #2
 8003848:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800384c:	f7fd f890 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003850:	2167      	movs	r1, #103	; 0x67
 8003852:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003856:	f7fd f88b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800385a:	2102      	movs	r1, #2
 800385c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003860:	f7fd f886 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003864:	2184      	movs	r1, #132	; 0x84
 8003866:	f24d 2021 	movw	r0, #53793	; 0xd221
 800386a:	f7fd f881 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800386e:	2102      	movs	r1, #2
 8003870:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003874:	f7fd f87c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003878:	21a4      	movs	r1, #164	; 0xa4
 800387a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800387e:	f7fd f877 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003882:	2102      	movs	r1, #2
 8003884:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003888:	f7fd f872 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800388c:	21b7      	movs	r1, #183	; 0xb7
 800388e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003892:	f7fd f86d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003896:	2102      	movs	r1, #2
 8003898:	f24d 2026 	movw	r0, #53798	; 0xd226
 800389c:	f7fd f868 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80038a0:	21cf      	movs	r1, #207	; 0xcf
 80038a2:	f24d 2027 	movw	r0, #53799	; 0xd227
 80038a6:	f7fd f863 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80038aa:	2102      	movs	r1, #2
 80038ac:	f24d 2028 	movw	r0, #53800	; 0xd228
 80038b0:	f7fd f85e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80038b4:	21de      	movs	r1, #222	; 0xde
 80038b6:	f24d 2029 	movw	r0, #53801	; 0xd229
 80038ba:	f7fd f859 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80038be:	2102      	movs	r1, #2
 80038c0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80038c4:	f7fd f854 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80038c8:	21f2      	movs	r1, #242	; 0xf2
 80038ca:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80038ce:	f7fd f84f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80038d2:	2102      	movs	r1, #2
 80038d4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80038d8:	f7fd f84a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80038dc:	21fe      	movs	r1, #254	; 0xfe
 80038de:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80038e2:	f7fd f845 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80038e6:	2103      	movs	r1, #3
 80038e8:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80038ec:	f7fd f840 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80038f0:	2110      	movs	r1, #16
 80038f2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80038f6:	f7fd f83b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80038fa:	2103      	movs	r1, #3
 80038fc:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003900:	f7fd f836 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003904:	2133      	movs	r1, #51	; 0x33
 8003906:	f24d 2031 	movw	r0, #53809	; 0xd231
 800390a:	f7fd f831 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800390e:	2103      	movs	r1, #3
 8003910:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003914:	f7fd f82c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003918:	216d      	movs	r1, #109	; 0x6d
 800391a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800391e:	f7fd f827 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003922:	2100      	movs	r1, #0
 8003924:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003928:	f7fd f822 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800392c:	2133      	movs	r1, #51	; 0x33
 800392e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003932:	f7fd f81d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003936:	2100      	movs	r1, #0
 8003938:	f24d 3002 	movw	r0, #54018	; 0xd302
 800393c:	f7fd f818 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003940:	2134      	movs	r1, #52	; 0x34
 8003942:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003946:	f7fd f813 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 800394a:	2100      	movs	r1, #0
 800394c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003950:	f7fd f80e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003954:	213a      	movs	r1, #58	; 0x3a
 8003956:	f24d 3005 	movw	r0, #54021	; 0xd305
 800395a:	f7fd f809 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800395e:	2100      	movs	r1, #0
 8003960:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003964:	f7fd f804 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003968:	214a      	movs	r1, #74	; 0x4a
 800396a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800396e:	f7fc ffff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003972:	2100      	movs	r1, #0
 8003974:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003978:	f7fc fffa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800397c:	215c      	movs	r1, #92	; 0x5c
 800397e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003982:	f7fc fff5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003986:	2100      	movs	r1, #0
 8003988:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800398c:	f7fc fff0 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003990:	2181      	movs	r1, #129	; 0x81
 8003992:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003996:	f7fc ffeb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800399a:	2100      	movs	r1, #0
 800399c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80039a0:	f7fc ffe6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 80039a4:	21a6      	movs	r1, #166	; 0xa6
 80039a6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80039aa:	f7fc ffe1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 80039ae:	2100      	movs	r1, #0
 80039b0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80039b4:	f7fc ffdc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80039b8:	21e5      	movs	r1, #229	; 0xe5
 80039ba:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80039be:	f7fc ffd7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80039c2:	2101      	movs	r1, #1
 80039c4:	f24d 3010 	movw	r0, #54032	; 0xd310
 80039c8:	f7fc ffd2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80039cc:	2113      	movs	r1, #19
 80039ce:	f24d 3011 	movw	r0, #54033	; 0xd311
 80039d2:	f7fc ffcd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80039d6:	2101      	movs	r1, #1
 80039d8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80039dc:	f7fc ffc8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80039e0:	2154      	movs	r1, #84	; 0x54
 80039e2:	f24d 3013 	movw	r0, #54035	; 0xd313
 80039e6:	f7fc ffc3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80039ea:	2101      	movs	r1, #1
 80039ec:	f24d 3014 	movw	r0, #54036	; 0xd314
 80039f0:	f7fc ffbe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80039f4:	2182      	movs	r1, #130	; 0x82
 80039f6:	f24d 3015 	movw	r0, #54037	; 0xd315
 80039fa:	f7fc ffb9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80039fe:	2101      	movs	r1, #1
 8003a00:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003a04:	f7fc ffb4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003a08:	21ca      	movs	r1, #202	; 0xca
 8003a0a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003a0e:	f7fc ffaf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003a12:	2102      	movs	r1, #2
 8003a14:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003a18:	f7fc ffaa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003a22:	f7fc ffa5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003a26:	2102      	movs	r1, #2
 8003a28:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003a2c:	f7fc ffa0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003a30:	2101      	movs	r1, #1
 8003a32:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003a36:	f7fc ff9b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003a40:	f7fc ff96 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003a44:	2134      	movs	r1, #52	; 0x34
 8003a46:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003a4a:	f7fc ff91 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003a4e:	2102      	movs	r1, #2
 8003a50:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003a54:	f7fc ff8c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003a58:	2167      	movs	r1, #103	; 0x67
 8003a5a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003a5e:	f7fc ff87 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003a62:	2102      	movs	r1, #2
 8003a64:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003a68:	f7fc ff82 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003a6c:	2184      	movs	r1, #132	; 0x84
 8003a6e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003a72:	f7fc ff7d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003a76:	2102      	movs	r1, #2
 8003a78:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003a7c:	f7fc ff78 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003a80:	21a4      	movs	r1, #164	; 0xa4
 8003a82:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003a86:	f7fc ff73 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003a90:	f7fc ff6e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003a94:	21b7      	movs	r1, #183	; 0xb7
 8003a96:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003a9a:	f7fc ff69 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003aa4:	f7fc ff64 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003aa8:	21cf      	movs	r1, #207	; 0xcf
 8003aaa:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003aae:	f7fc ff5f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003ab8:	f7fc ff5a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003abc:	21de      	movs	r1, #222	; 0xde
 8003abe:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003ac2:	f7fc ff55 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003acc:	f7fc ff50 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003ad0:	21f2      	movs	r1, #242	; 0xf2
 8003ad2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003ad6:	f7fc ff4b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003ada:	2102      	movs	r1, #2
 8003adc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003ae0:	f7fc ff46 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003ae4:	21fe      	movs	r1, #254	; 0xfe
 8003ae6:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003aea:	f7fc ff41 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003aee:	2103      	movs	r1, #3
 8003af0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003af4:	f7fc ff3c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003af8:	2110      	movs	r1, #16
 8003afa:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003afe:	f7fc ff37 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003b02:	2103      	movs	r1, #3
 8003b04:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003b08:	f7fc ff32 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003b0c:	2133      	movs	r1, #51	; 0x33
 8003b0e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003b12:	f7fc ff2d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003b16:	2103      	movs	r1, #3
 8003b18:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003b1c:	f7fc ff28 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003b20:	216d      	movs	r1, #109	; 0x6d
 8003b22:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003b26:	f7fc ff23 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003b30:	f7fc ff1e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003b34:	2133      	movs	r1, #51	; 0x33
 8003b36:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003b3a:	f7fc ff19 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003b44:	f7fc ff14 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003b48:	2134      	movs	r1, #52	; 0x34
 8003b4a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003b4e:	f7fc ff0f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003b52:	2100      	movs	r1, #0
 8003b54:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003b58:	f7fc ff0a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003b5c:	213a      	movs	r1, #58	; 0x3a
 8003b5e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003b62:	f7fc ff05 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003b66:	2100      	movs	r1, #0
 8003b68:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003b6c:	f7fc ff00 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003b70:	214a      	movs	r1, #74	; 0x4a
 8003b72:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003b76:	f7fc fefb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003b80:	f7fc fef6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003b84:	215c      	movs	r1, #92	; 0x5c
 8003b86:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003b8a:	f7fc fef1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003b94:	f7fc feec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003b98:	2181      	movs	r1, #129	; 0x81
 8003b9a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003b9e:	f7fc fee7 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003ba8:	f7fc fee2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003bac:	21a6      	movs	r1, #166	; 0xa6
 8003bae:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003bb2:	f7fc fedd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003bbc:	f7fc fed8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003bc0:	21e5      	movs	r1, #229	; 0xe5
 8003bc2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003bc6:	f7fc fed3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003bca:	2101      	movs	r1, #1
 8003bcc:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003bd0:	f7fc fece 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003bd4:	2113      	movs	r1, #19
 8003bd6:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003bda:	f7fc fec9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003bde:	2101      	movs	r1, #1
 8003be0:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003be4:	f7fc fec4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003be8:	2154      	movs	r1, #84	; 0x54
 8003bea:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003bee:	f7fc febf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003bf8:	f7fc feba 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003bfc:	2182      	movs	r1, #130	; 0x82
 8003bfe:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003c02:	f7fc feb5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003c06:	2101      	movs	r1, #1
 8003c08:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003c0c:	f7fc feb0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003c10:	21ca      	movs	r1, #202	; 0xca
 8003c12:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003c16:	f7fc feab 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003c20:	f7fc fea6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003c24:	2100      	movs	r1, #0
 8003c26:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003c2a:	f7fc fea1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003c2e:	2102      	movs	r1, #2
 8003c30:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003c34:	f7fc fe9c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003c38:	2101      	movs	r1, #1
 8003c3a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003c3e:	f7fc fe97 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003c42:	2102      	movs	r1, #2
 8003c44:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003c48:	f7fc fe92 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003c4c:	2134      	movs	r1, #52	; 0x34
 8003c4e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003c52:	f7fc fe8d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003c56:	2102      	movs	r1, #2
 8003c58:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003c5c:	f7fc fe88 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003c60:	2167      	movs	r1, #103	; 0x67
 8003c62:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003c66:	f7fc fe83 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003c70:	f7fc fe7e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003c74:	2184      	movs	r1, #132	; 0x84
 8003c76:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003c7a:	f7fc fe79 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003c7e:	2102      	movs	r1, #2
 8003c80:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003c84:	f7fc fe74 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003c88:	21a4      	movs	r1, #164	; 0xa4
 8003c8a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003c8e:	f7fc fe6f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003c92:	2102      	movs	r1, #2
 8003c94:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003c98:	f7fc fe6a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003c9c:	21b7      	movs	r1, #183	; 0xb7
 8003c9e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003ca2:	f7fc fe65 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003cac:	f7fc fe60 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003cb0:	21cf      	movs	r1, #207	; 0xcf
 8003cb2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003cb6:	f7fc fe5b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003cba:	2102      	movs	r1, #2
 8003cbc:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003cc0:	f7fc fe56 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003cc4:	21de      	movs	r1, #222	; 0xde
 8003cc6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003cca:	f7fc fe51 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003cce:	2102      	movs	r1, #2
 8003cd0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003cd4:	f7fc fe4c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003cd8:	21f2      	movs	r1, #242	; 0xf2
 8003cda:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003cde:	f7fc fe47 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003ce8:	f7fc fe42 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003cec:	21fe      	movs	r1, #254	; 0xfe
 8003cee:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003cf2:	f7fc fe3d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003cfc:	f7fc fe38 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003d00:	2110      	movs	r1, #16
 8003d02:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003d06:	f7fc fe33 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003d10:	f7fc fe2e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003d14:	2133      	movs	r1, #51	; 0x33
 8003d16:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003d1a:	f7fc fe29 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003d1e:	2103      	movs	r1, #3
 8003d20:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003d24:	f7fc fe24 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003d28:	216d      	movs	r1, #109	; 0x6d
 8003d2a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003d2e:	f7fc fe1f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003d32:	2100      	movs	r1, #0
 8003d34:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003d38:	f7fc fe1a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003d3c:	2133      	movs	r1, #51	; 0x33
 8003d3e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003d42:	f7fc fe15 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003d46:	2100      	movs	r1, #0
 8003d48:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003d4c:	f7fc fe10 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003d50:	2134      	movs	r1, #52	; 0x34
 8003d52:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003d56:	f7fc fe0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003d60:	f7fc fe06 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003d64:	213a      	movs	r1, #58	; 0x3a
 8003d66:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003d6a:	f7fc fe01 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003d74:	f7fc fdfc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003d78:	214a      	movs	r1, #74	; 0x4a
 8003d7a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003d7e:	f7fc fdf7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003d82:	2100      	movs	r1, #0
 8003d84:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003d88:	f7fc fdf2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003d8c:	215c      	movs	r1, #92	; 0x5c
 8003d8e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003d92:	f7fc fded 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003d96:	2100      	movs	r1, #0
 8003d98:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003d9c:	f7fc fde8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003da0:	2181      	movs	r1, #129	; 0x81
 8003da2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003da6:	f7fc fde3 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003daa:	2100      	movs	r1, #0
 8003dac:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003db0:	f7fc fdde 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003db4:	21a6      	movs	r1, #166	; 0xa6
 8003db6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003dba:	f7fc fdd9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003dc4:	f7fc fdd4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003dc8:	21e5      	movs	r1, #229	; 0xe5
 8003dca:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003dce:	f7fc fdcf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003dd8:	f7fc fdca 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003ddc:	2113      	movs	r1, #19
 8003dde:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003de2:	f7fc fdc5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003de6:	2101      	movs	r1, #1
 8003de8:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003dec:	f7fc fdc0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003df0:	2154      	movs	r1, #84	; 0x54
 8003df2:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003df6:	f7fc fdbb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003e00:	f7fc fdb6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003e04:	2182      	movs	r1, #130	; 0x82
 8003e06:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003e0a:	f7fc fdb1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003e0e:	2101      	movs	r1, #1
 8003e10:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003e14:	f7fc fdac 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003e18:	21ca      	movs	r1, #202	; 0xca
 8003e1a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003e1e:	f7fc fda7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003e22:	2102      	movs	r1, #2
 8003e24:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003e28:	f7fc fda2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003e32:	f7fc fd9d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003e36:	2102      	movs	r1, #2
 8003e38:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003e3c:	f7fc fd98 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003e40:	2101      	movs	r1, #1
 8003e42:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003e46:	f7fc fd93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003e50:	f7fc fd8e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003e54:	2134      	movs	r1, #52	; 0x34
 8003e56:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003e5a:	f7fc fd89 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003e5e:	2102      	movs	r1, #2
 8003e60:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003e64:	f7fc fd84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003e68:	2167      	movs	r1, #103	; 0x67
 8003e6a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003e6e:	f7fc fd7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003e72:	2102      	movs	r1, #2
 8003e74:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003e78:	f7fc fd7a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003e7c:	2184      	movs	r1, #132	; 0x84
 8003e7e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003e82:	f7fc fd75 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003e86:	2102      	movs	r1, #2
 8003e88:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003e8c:	f7fc fd70 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003e90:	21a4      	movs	r1, #164	; 0xa4
 8003e92:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003e96:	f7fc fd6b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003ea0:	f7fc fd66 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003ea4:	21b7      	movs	r1, #183	; 0xb7
 8003ea6:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003eaa:	f7fc fd61 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003eae:	2102      	movs	r1, #2
 8003eb0:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003eb4:	f7fc fd5c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003eb8:	21cf      	movs	r1, #207	; 0xcf
 8003eba:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003ebe:	f7fc fd57 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ec8:	f7fc fd52 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003ecc:	21de      	movs	r1, #222	; 0xde
 8003ece:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003ed2:	f7fc fd4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003edc:	f7fc fd48 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003ee0:	21f2      	movs	r1, #242	; 0xf2
 8003ee2:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003ee6:	f7fc fd43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003eea:	2102      	movs	r1, #2
 8003eec:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003ef0:	f7fc fd3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003ef4:	21fe      	movs	r1, #254	; 0xfe
 8003ef6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003efa:	f7fc fd39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003efe:	2103      	movs	r1, #3
 8003f00:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003f04:	f7fc fd34 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003f08:	2110      	movs	r1, #16
 8003f0a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003f0e:	f7fc fd2f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003f12:	2103      	movs	r1, #3
 8003f14:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003f18:	f7fc fd2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003f1c:	2133      	movs	r1, #51	; 0x33
 8003f1e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003f22:	f7fc fd25 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003f26:	2103      	movs	r1, #3
 8003f28:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003f2c:	f7fc fd20 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003f30:	216d      	movs	r1, #109	; 0x6d
 8003f32:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003f36:	f7fc fd1b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003f40:	f7fc fd16 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003f44:	2133      	movs	r1, #51	; 0x33
 8003f46:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003f4a:	f7fc fd11 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003f54:	f7fc fd0c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003f58:	2134      	movs	r1, #52	; 0x34
 8003f5a:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003f5e:	f7fc fd07 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003f62:	2100      	movs	r1, #0
 8003f64:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003f68:	f7fc fd02 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003f6c:	213a      	movs	r1, #58	; 0x3a
 8003f6e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003f72:	f7fc fcfd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003f76:	2100      	movs	r1, #0
 8003f78:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003f7c:	f7fc fcf8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003f80:	214a      	movs	r1, #74	; 0x4a
 8003f82:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003f86:	f7fc fcf3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003f90:	f7fc fcee 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003f94:	215c      	movs	r1, #92	; 0x5c
 8003f96:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003f9a:	f7fc fce9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003fa4:	f7fc fce4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003fa8:	2181      	movs	r1, #129	; 0x81
 8003faa:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003fae:	f7fc fcdf 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003fb8:	f7fc fcda 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003fbc:	21a6      	movs	r1, #166	; 0xa6
 8003fbe:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003fc2:	f7fc fcd5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003fcc:	f7fc fcd0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003fd0:	21e5      	movs	r1, #229	; 0xe5
 8003fd2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003fd6:	f7fc fccb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003fda:	2101      	movs	r1, #1
 8003fdc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003fe0:	f7fc fcc6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003fe4:	2113      	movs	r1, #19
 8003fe6:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003fea:	f7fc fcc1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003fee:	2101      	movs	r1, #1
 8003ff0:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003ff4:	f7fc fcbc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003ff8:	2154      	movs	r1, #84	; 0x54
 8003ffa:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003ffe:	f7fc fcb7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004002:	2101      	movs	r1, #1
 8004004:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004008:	f7fc fcb2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800400c:	2182      	movs	r1, #130	; 0x82
 800400e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004012:	f7fc fcad 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004016:	2101      	movs	r1, #1
 8004018:	f24d 6016 	movw	r0, #54806	; 0xd616
 800401c:	f7fc fca8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004020:	21ca      	movs	r1, #202	; 0xca
 8004022:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004026:	f7fc fca3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800402a:	2102      	movs	r1, #2
 800402c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004030:	f7fc fc9e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004034:	2100      	movs	r1, #0
 8004036:	f24d 6019 	movw	r0, #54809	; 0xd619
 800403a:	f7fc fc99 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800403e:	2102      	movs	r1, #2
 8004040:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004044:	f7fc fc94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004048:	2101      	movs	r1, #1
 800404a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800404e:	f7fc fc8f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004052:	2102      	movs	r1, #2
 8004054:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004058:	f7fc fc8a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800405c:	2134      	movs	r1, #52	; 0x34
 800405e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004062:	f7fc fc85 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004066:	2102      	movs	r1, #2
 8004068:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800406c:	f7fc fc80 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004070:	2167      	movs	r1, #103	; 0x67
 8004072:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004076:	f7fc fc7b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800407a:	2102      	movs	r1, #2
 800407c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004080:	f7fc fc76 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8004084:	2184      	movs	r1, #132	; 0x84
 8004086:	f24d 6021 	movw	r0, #54817	; 0xd621
 800408a:	f7fc fc71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800408e:	2102      	movs	r1, #2
 8004090:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004094:	f7fc fc6c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004098:	21a4      	movs	r1, #164	; 0xa4
 800409a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800409e:	f7fc fc67 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80040a2:	2102      	movs	r1, #2
 80040a4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80040a8:	f7fc fc62 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80040ac:	21b7      	movs	r1, #183	; 0xb7
 80040ae:	f24d 6025 	movw	r0, #54821	; 0xd625
 80040b2:	f7fc fc5d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80040b6:	2102      	movs	r1, #2
 80040b8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80040bc:	f7fc fc58 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80040c0:	21cf      	movs	r1, #207	; 0xcf
 80040c2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80040c6:	f7fc fc53 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80040ca:	2102      	movs	r1, #2
 80040cc:	f24d 6028 	movw	r0, #54824	; 0xd628
 80040d0:	f7fc fc4e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80040d4:	21de      	movs	r1, #222	; 0xde
 80040d6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80040da:	f7fc fc49 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80040de:	2102      	movs	r1, #2
 80040e0:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80040e4:	f7fc fc44 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80040e8:	21f2      	movs	r1, #242	; 0xf2
 80040ea:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80040ee:	f7fc fc3f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80040f2:	2102      	movs	r1, #2
 80040f4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80040f8:	f7fc fc3a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80040fc:	21fe      	movs	r1, #254	; 0xfe
 80040fe:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004102:	f7fc fc35 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004106:	2103      	movs	r1, #3
 8004108:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800410c:	f7fc fc30 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004110:	2110      	movs	r1, #16
 8004112:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004116:	f7fc fc2b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800411a:	2103      	movs	r1, #3
 800411c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004120:	f7fc fc26 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004124:	2133      	movs	r1, #51	; 0x33
 8004126:	f24d 6031 	movw	r0, #54833	; 0xd631
 800412a:	f7fc fc21 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800412e:	2103      	movs	r1, #3
 8004130:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004134:	f7fc fc1c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004138:	216d      	movs	r1, #109	; 0x6d
 800413a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800413e:	f7fc fc17 	bl	8000970 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004142:	2155      	movs	r1, #85	; 0x55
 8004144:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004148:	f7fc fc12 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800414c:	21aa      	movs	r1, #170	; 0xaa
 800414e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004152:	f7fc fc0d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004156:	2152      	movs	r1, #82	; 0x52
 8004158:	f24f 0002 	movw	r0, #61442	; 0xf002
 800415c:	f7fc fc08 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004160:	2108      	movs	r1, #8
 8004162:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004166:	f7fc fc03 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800416a:	2100      	movs	r1, #0
 800416c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004170:	f7fc fbfe 	bl	8000970 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004174:	21cc      	movs	r1, #204	; 0xcc
 8004176:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800417a:	f7fc fbf9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800417e:	2100      	movs	r1, #0
 8004180:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004184:	f7fc fbf4 	bl	8000970 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004188:	2105      	movs	r1, #5
 800418a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800418e:	f7fc fbef 	bl	8000970 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8004192:	2170      	movs	r1, #112	; 0x70
 8004194:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004198:	f7fc fbea 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800419c:	2170      	movs	r1, #112	; 0x70
 800419e:	f24b 7001 	movw	r0, #46849	; 0xb701
 80041a2:	f7fc fbe5 	bl	8000970 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80041a6:	2101      	movs	r1, #1
 80041a8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80041ac:	f7fc fbe0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80041b0:	2103      	movs	r1, #3
 80041b2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80041b6:	f7fc fbdb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80041ba:	2103      	movs	r1, #3
 80041bc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80041c0:	f7fc fbd6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80041c4:	2103      	movs	r1, #3
 80041c6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80041ca:	f7fc fbd1 	bl	8000970 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80041d4:	f7fc fbcc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80041d8:	2100      	movs	r1, #0
 80041da:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80041de:	f7fc fbc7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80041e2:	2100      	movs	r1, #0
 80041e4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80041e8:	f7fc fbc2 	bl	8000970 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80041ec:	21d0      	movs	r1, #208	; 0xd0
 80041ee:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80041f2:	f7fc fbbd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80041f6:	2102      	movs	r1, #2
 80041f8:	f64c 1001 	movw	r0, #51457	; 0xc901
 80041fc:	f7fc fbb8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004200:	2150      	movs	r1, #80	; 0x50
 8004202:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004206:	f7fc fbb3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800420a:	2150      	movs	r1, #80	; 0x50
 800420c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004210:	f7fc fbae 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004214:	2150      	movs	r1, #80	; 0x50
 8004216:	f64c 1004 	movw	r0, #51460	; 0xc904
 800421a:	f7fc fba9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800421e:	2100      	movs	r1, #0
 8004220:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004224:	f7fc fba4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004228:	2155      	movs	r1, #85	; 0x55
 800422a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800422e:	f7fc fb9f 	bl	8000970 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004232:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004236:	f7fc fb0f 	bl	8000858 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800423a:	2001      	movs	r0, #1
 800423c:	f003 fb2a 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004240:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004244:	f7fc fb08 	bl	8000858 <LCD_WR_REG>
 8004248:	f001 bd18 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800424c:	4bec      	ldr	r3, [pc, #944]	; (8004600 <LCD_Init+0x27b8>)
 800424e:	889b      	ldrh	r3, [r3, #4]
 8004250:	f249 3225 	movw	r2, #37669	; 0x9325
 8004254:	4293      	cmp	r3, r2
 8004256:	f040 80d7 	bne.w	8004408 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800425a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800425e:	20e5      	movs	r0, #229	; 0xe5
 8004260:	f7fc fb86 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004268:	2001      	movs	r0, #1
 800426a:	f7fc fb81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800426e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004272:	2002      	movs	r0, #2
 8004274:	f7fc fb7c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004278:	f241 0130 	movw	r1, #4144	; 0x1030
 800427c:	2003      	movs	r0, #3
 800427e:	f7fc fb77 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004282:	2100      	movs	r1, #0
 8004284:	2004      	movs	r0, #4
 8004286:	f7fc fb73 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800428a:	f240 2102 	movw	r1, #514	; 0x202
 800428e:	2008      	movs	r0, #8
 8004290:	f7fc fb6e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004294:	2100      	movs	r1, #0
 8004296:	2009      	movs	r0, #9
 8004298:	f7fc fb6a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800429c:	2100      	movs	r1, #0
 800429e:	200a      	movs	r0, #10
 80042a0:	f7fc fb66 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80042a4:	2100      	movs	r1, #0
 80042a6:	200c      	movs	r0, #12
 80042a8:	f7fc fb62 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80042ac:	2100      	movs	r1, #0
 80042ae:	200d      	movs	r0, #13
 80042b0:	f7fc fb5e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80042b4:	2100      	movs	r1, #0
 80042b6:	200f      	movs	r0, #15
 80042b8:	f7fc fb5a 	bl	8000970 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80042bc:	2100      	movs	r1, #0
 80042be:	2010      	movs	r0, #16
 80042c0:	f7fc fb56 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80042c4:	2107      	movs	r1, #7
 80042c6:	2011      	movs	r0, #17
 80042c8:	f7fc fb52 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80042cc:	2100      	movs	r1, #0
 80042ce:	2012      	movs	r0, #18
 80042d0:	f7fc fb4e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80042d4:	2100      	movs	r1, #0
 80042d6:	2013      	movs	r0, #19
 80042d8:	f7fc fb4a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80042dc:	2100      	movs	r1, #0
 80042de:	2007      	movs	r0, #7
 80042e0:	f7fc fb46 	bl	8000970 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80042e4:	f241 6190 	movw	r1, #5776	; 0x1690
 80042e8:	2010      	movs	r0, #16
 80042ea:	f7fc fb41 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80042ee:	f240 2127 	movw	r1, #551	; 0x227
 80042f2:	2011      	movs	r0, #17
 80042f4:	f7fc fb3c 	bl	8000970 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80042f8:	219d      	movs	r1, #157	; 0x9d
 80042fa:	2012      	movs	r0, #18
 80042fc:	f7fc fb38 	bl	8000970 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004300:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004304:	2013      	movs	r0, #19
 8004306:	f7fc fb33 	bl	8000970 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800430a:	2125      	movs	r1, #37	; 0x25
 800430c:	2029      	movs	r0, #41	; 0x29
 800430e:	f7fc fb2f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004312:	210d      	movs	r1, #13
 8004314:	202b      	movs	r0, #43	; 0x2b
 8004316:	f7fc fb2b 	bl	8000970 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800431a:	2107      	movs	r1, #7
 800431c:	2030      	movs	r0, #48	; 0x30
 800431e:	f7fc fb27 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004322:	f240 3103 	movw	r1, #771	; 0x303
 8004326:	2031      	movs	r0, #49	; 0x31
 8004328:	f7fc fb22 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800432c:	2103      	movs	r1, #3
 800432e:	2032      	movs	r0, #50	; 0x32
 8004330:	f7fc fb1e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004334:	f240 2106 	movw	r1, #518	; 0x206
 8004338:	2035      	movs	r0, #53	; 0x35
 800433a:	f7fc fb19 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800433e:	2108      	movs	r1, #8
 8004340:	2036      	movs	r0, #54	; 0x36
 8004342:	f7fc fb15 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004346:	f240 4106 	movw	r1, #1030	; 0x406
 800434a:	2037      	movs	r0, #55	; 0x37
 800434c:	f7fc fb10 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004350:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004354:	2038      	movs	r0, #56	; 0x38
 8004356:	f7fc fb0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800435a:	2107      	movs	r1, #7
 800435c:	2039      	movs	r0, #57	; 0x39
 800435e:	f7fc fb07 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004362:	f240 6102 	movw	r1, #1538	; 0x602
 8004366:	203c      	movs	r0, #60	; 0x3c
 8004368:	f7fc fb02 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800436c:	2108      	movs	r1, #8
 800436e:	203d      	movs	r0, #61	; 0x3d
 8004370:	f7fc fafe 	bl	8000970 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004374:	2100      	movs	r1, #0
 8004376:	2050      	movs	r0, #80	; 0x50
 8004378:	f7fc fafa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800437c:	21ef      	movs	r1, #239	; 0xef
 800437e:	2051      	movs	r0, #81	; 0x51
 8004380:	f7fc faf6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004384:	2100      	movs	r1, #0
 8004386:	2052      	movs	r0, #82	; 0x52
 8004388:	f7fc faf2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800438c:	f240 113f 	movw	r1, #319	; 0x13f
 8004390:	2053      	movs	r0, #83	; 0x53
 8004392:	f7fc faed 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004396:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800439a:	2060      	movs	r0, #96	; 0x60
 800439c:	f7fc fae8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80043a0:	2101      	movs	r1, #1
 80043a2:	2061      	movs	r0, #97	; 0x61
 80043a4:	f7fc fae4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80043a8:	2100      	movs	r1, #0
 80043aa:	206a      	movs	r0, #106	; 0x6a
 80043ac:	f7fc fae0 	bl	8000970 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80043b0:	2100      	movs	r1, #0
 80043b2:	2080      	movs	r0, #128	; 0x80
 80043b4:	f7fc fadc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80043b8:	2100      	movs	r1, #0
 80043ba:	2081      	movs	r0, #129	; 0x81
 80043bc:	f7fc fad8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80043c0:	2100      	movs	r1, #0
 80043c2:	2082      	movs	r0, #130	; 0x82
 80043c4:	f7fc fad4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80043c8:	2100      	movs	r1, #0
 80043ca:	2083      	movs	r0, #131	; 0x83
 80043cc:	f7fc fad0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80043d0:	2100      	movs	r1, #0
 80043d2:	2084      	movs	r0, #132	; 0x84
 80043d4:	f7fc facc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80043d8:	2100      	movs	r1, #0
 80043da:	2085      	movs	r0, #133	; 0x85
 80043dc:	f7fc fac8 	bl	8000970 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80043e0:	2110      	movs	r1, #16
 80043e2:	2090      	movs	r0, #144	; 0x90
 80043e4:	f7fc fac4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80043e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ec:	2092      	movs	r0, #146	; 0x92
 80043ee:	f7fc fabf 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80043f2:	f240 1133 	movw	r1, #307	; 0x133
 80043f6:	2007      	movs	r0, #7
 80043f8:	f7fc faba 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80043fc:	2122      	movs	r1, #34	; 0x22
 80043fe:	2000      	movs	r0, #0
 8004400:	f7fc fab6 	bl	8000970 <LCD_WriteReg>
 8004404:	f001 bc3a 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004408:	4b7d      	ldr	r3, [pc, #500]	; (8004600 <LCD_Init+0x27b8>)
 800440a:	889b      	ldrh	r3, [r3, #4]
 800440c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004410:	4293      	cmp	r3, r2
 8004412:	f040 80f7 	bne.w	8004604 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004416:	f241 018f 	movw	r1, #4239	; 0x108f
 800441a:	20ec      	movs	r0, #236	; 0xec
 800441c:	f7fc faa8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004420:	f241 2134 	movw	r1, #4660	; 0x1234
 8004424:	20ef      	movs	r0, #239	; 0xef
 8004426:	f7fc faa3 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800442a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800442e:	2001      	movs	r0, #1
 8004430:	f7fc fa9e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004434:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004438:	2002      	movs	r0, #2
 800443a:	f7fc fa99 	bl	8000970 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800443e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004442:	2003      	movs	r0, #3
 8004444:	f7fc fa94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004448:	2100      	movs	r1, #0
 800444a:	2004      	movs	r0, #4
 800444c:	f7fc fa90 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004450:	f240 2102 	movw	r1, #514	; 0x202
 8004454:	2008      	movs	r0, #8
 8004456:	f7fc fa8b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800445a:	2100      	movs	r1, #0
 800445c:	2009      	movs	r0, #9
 800445e:	f7fc fa87 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004462:	2100      	movs	r1, #0
 8004464:	200a      	movs	r0, #10
 8004466:	f7fc fa83 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800446a:	2101      	movs	r1, #1
 800446c:	200c      	movs	r0, #12
 800446e:	f7fc fa7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004472:	2100      	movs	r1, #0
 8004474:	200d      	movs	r0, #13
 8004476:	f7fc fa7b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800447a:	2100      	movs	r1, #0
 800447c:	200f      	movs	r0, #15
 800447e:	f7fc fa77 	bl	8000970 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004482:	2100      	movs	r1, #0
 8004484:	2010      	movs	r0, #16
 8004486:	f7fc fa73 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800448a:	2107      	movs	r1, #7
 800448c:	2011      	movs	r0, #17
 800448e:	f7fc fa6f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004492:	2100      	movs	r1, #0
 8004494:	2012      	movs	r0, #18
 8004496:	f7fc fa6b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800449a:	2100      	movs	r1, #0
 800449c:	2013      	movs	r0, #19
 800449e:	f7fc fa67 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80044a2:	2101      	movs	r1, #1
 80044a4:	2007      	movs	r0, #7
 80044a6:	f7fc fa63 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80044aa:	2032      	movs	r0, #50	; 0x32
 80044ac:	f003 f9f2 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80044b0:	f241 4190 	movw	r1, #5264	; 0x1490
 80044b4:	2010      	movs	r0, #16
 80044b6:	f7fc fa5b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80044ba:	f240 2127 	movw	r1, #551	; 0x227
 80044be:	2011      	movs	r0, #17
 80044c0:	f7fc fa56 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80044c4:	2032      	movs	r0, #50	; 0x32
 80044c6:	f003 f9e5 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80044ca:	218a      	movs	r1, #138	; 0x8a
 80044cc:	2012      	movs	r0, #18
 80044ce:	f7fc fa4f 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80044d2:	2032      	movs	r0, #50	; 0x32
 80044d4:	f003 f9de 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80044d8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80044dc:	2013      	movs	r0, #19
 80044de:	f7fc fa47 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80044e2:	2106      	movs	r1, #6
 80044e4:	2029      	movs	r0, #41	; 0x29
 80044e6:	f7fc fa43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80044ea:	210d      	movs	r1, #13
 80044ec:	202b      	movs	r0, #43	; 0x2b
 80044ee:	f7fc fa3f 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80044f2:	2032      	movs	r0, #50	; 0x32
 80044f4:	f003 f9ce 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80044f8:	2100      	movs	r1, #0
 80044fa:	2020      	movs	r0, #32
 80044fc:	f7fc fa38 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004500:	2100      	movs	r1, #0
 8004502:	2021      	movs	r0, #33	; 0x21
 8004504:	f7fc fa34 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004508:	2032      	movs	r0, #50	; 0x32
 800450a:	f003 f9c3 	bl	8007894 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800450e:	2100      	movs	r1, #0
 8004510:	2030      	movs	r0, #48	; 0x30
 8004512:	f7fc fa2d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004516:	f240 6104 	movw	r1, #1540	; 0x604
 800451a:	2031      	movs	r0, #49	; 0x31
 800451c:	f7fc fa28 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004520:	f240 3105 	movw	r1, #773	; 0x305
 8004524:	2032      	movs	r0, #50	; 0x32
 8004526:	f7fc fa23 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800452a:	2100      	movs	r1, #0
 800452c:	2035      	movs	r0, #53	; 0x35
 800452e:	f7fc fa1f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004532:	f640 4109 	movw	r1, #3081	; 0xc09
 8004536:	2036      	movs	r0, #54	; 0x36
 8004538:	f7fc fa1a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800453c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004540:	2037      	movs	r0, #55	; 0x37
 8004542:	f7fc fa15 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004546:	f240 3101 	movw	r1, #769	; 0x301
 800454a:	2038      	movs	r0, #56	; 0x38
 800454c:	f7fc fa10 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004550:	f240 7107 	movw	r1, #1799	; 0x707
 8004554:	2039      	movs	r0, #57	; 0x39
 8004556:	f7fc fa0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800455a:	2100      	movs	r1, #0
 800455c:	203c      	movs	r0, #60	; 0x3c
 800455e:	f7fc fa07 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004562:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004566:	203d      	movs	r0, #61	; 0x3d
 8004568:	f7fc fa02 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 800456c:	2032      	movs	r0, #50	; 0x32
 800456e:	f003 f991 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004572:	2100      	movs	r1, #0
 8004574:	2050      	movs	r0, #80	; 0x50
 8004576:	f7fc f9fb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800457a:	21ef      	movs	r1, #239	; 0xef
 800457c:	2051      	movs	r0, #81	; 0x51
 800457e:	f7fc f9f7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004582:	2100      	movs	r1, #0
 8004584:	2052      	movs	r0, #82	; 0x52
 8004586:	f7fc f9f3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800458a:	f240 113f 	movw	r1, #319	; 0x13f
 800458e:	2053      	movs	r0, #83	; 0x53
 8004590:	f7fc f9ee 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004594:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004598:	2060      	movs	r0, #96	; 0x60
 800459a:	f7fc f9e9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800459e:	2101      	movs	r1, #1
 80045a0:	2061      	movs	r0, #97	; 0x61
 80045a2:	f7fc f9e5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80045a6:	2100      	movs	r1, #0
 80045a8:	206a      	movs	r0, #106	; 0x6a
 80045aa:	f7fc f9e1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80045ae:	2100      	movs	r1, #0
 80045b0:	2080      	movs	r0, #128	; 0x80
 80045b2:	f7fc f9dd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80045b6:	2100      	movs	r1, #0
 80045b8:	2081      	movs	r0, #129	; 0x81
 80045ba:	f7fc f9d9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80045be:	2100      	movs	r1, #0
 80045c0:	2082      	movs	r0, #130	; 0x82
 80045c2:	f7fc f9d5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80045c6:	2100      	movs	r1, #0
 80045c8:	2083      	movs	r0, #131	; 0x83
 80045ca:	f7fc f9d1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80045ce:	2100      	movs	r1, #0
 80045d0:	2084      	movs	r0, #132	; 0x84
 80045d2:	f7fc f9cd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80045d6:	2100      	movs	r1, #0
 80045d8:	2085      	movs	r0, #133	; 0x85
 80045da:	f7fc f9c9 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80045de:	2110      	movs	r1, #16
 80045e0:	2090      	movs	r0, #144	; 0x90
 80045e2:	f7fc f9c5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80045e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ea:	2092      	movs	r0, #146	; 0x92
 80045ec:	f7fc f9c0 	bl	8000970 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80045f0:	f240 1133 	movw	r1, #307	; 0x133
 80045f4:	2007      	movs	r0, #7
 80045f6:	f7fc f9bb 	bl	8000970 <LCD_WriteReg>
 80045fa:	f001 bb3f 	b.w	8005c7c <LCD_Init+0x3e34>
 80045fe:	bf00      	nop
 8004600:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0x9320) //测试OK.
 8004604:	4bce      	ldr	r3, [pc, #824]	; (8004940 <LCD_Init+0x2af8>)
 8004606:	889b      	ldrh	r3, [r3, #4]
 8004608:	f249 3220 	movw	r2, #37664	; 0x9320
 800460c:	4293      	cmp	r3, r2
 800460e:	f040 80ad 	bne.w	800476c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004612:	2100      	movs	r1, #0
 8004614:	2000      	movs	r0, #0
 8004616:	f7fc f9ab 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800461a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800461e:	2001      	movs	r0, #1
 8004620:	f7fc f9a6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004624:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004628:	2002      	movs	r0, #2
 800462a:	f7fc f9a1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800462e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004632:	2003      	movs	r0, #3
 8004634:	f7fc f99c 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004638:	2100      	movs	r1, #0
 800463a:	2004      	movs	r0, #4
 800463c:	f7fc f998 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004640:	f240 2102 	movw	r1, #514	; 0x202
 8004644:	2008      	movs	r0, #8
 8004646:	f7fc f993 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800464a:	2100      	movs	r1, #0
 800464c:	2009      	movs	r0, #9
 800464e:	f7fc f98f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004652:	2100      	movs	r1, #0
 8004654:	200a      	movs	r0, #10
 8004656:	f7fc f98b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800465a:	2101      	movs	r1, #1
 800465c:	200c      	movs	r0, #12
 800465e:	f7fc f987 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004662:	2100      	movs	r1, #0
 8004664:	200d      	movs	r0, #13
 8004666:	f7fc f983 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800466a:	2100      	movs	r1, #0
 800466c:	200f      	movs	r0, #15
 800466e:	f7fc f97f 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004672:	2032      	movs	r0, #50	; 0x32
 8004674:	f003 f90e 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004678:	f240 1101 	movw	r1, #257	; 0x101
 800467c:	2007      	movs	r0, #7
 800467e:	f7fc f977 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004682:	2032      	movs	r0, #50	; 0x32
 8004684:	f003 f906 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004688:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800468c:	2010      	movs	r0, #16
 800468e:	f7fc f96f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004692:	2107      	movs	r1, #7
 8004694:	2011      	movs	r0, #17
 8004696:	f7fc f96b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800469a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800469e:	2012      	movs	r0, #18
 80046a0:	f7fc f966 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80046a4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80046a8:	2013      	movs	r0, #19
 80046aa:	f7fc f961 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80046ae:	2100      	movs	r1, #0
 80046b0:	2029      	movs	r0, #41	; 0x29
 80046b2:	f7fc f95d 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80046b6:	f244 0110 	movw	r1, #16400	; 0x4010
 80046ba:	202b      	movs	r0, #43	; 0x2b
 80046bc:	f7fc f958 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80046c0:	2100      	movs	r1, #0
 80046c2:	2050      	movs	r0, #80	; 0x50
 80046c4:	f7fc f954 	bl	8000970 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80046c8:	21ef      	movs	r1, #239	; 0xef
 80046ca:	2051      	movs	r0, #81	; 0x51
 80046cc:	f7fc f950 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80046d0:	2100      	movs	r1, #0
 80046d2:	2052      	movs	r0, #82	; 0x52
 80046d4:	f7fc f94c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80046d8:	f240 113f 	movw	r1, #319	; 0x13f
 80046dc:	2053      	movs	r0, #83	; 0x53
 80046de:	f7fc f947 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80046e2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80046e6:	2060      	movs	r0, #96	; 0x60
 80046e8:	f7fc f942 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80046ec:	2101      	movs	r1, #1
 80046ee:	2061      	movs	r0, #97	; 0x61
 80046f0:	f7fc f93e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80046f4:	2100      	movs	r1, #0
 80046f6:	206a      	movs	r0, #106	; 0x6a
 80046f8:	f7fc f93a 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80046fc:	2100      	movs	r1, #0
 80046fe:	2080      	movs	r0, #128	; 0x80
 8004700:	f7fc f936 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004704:	2100      	movs	r1, #0
 8004706:	2081      	movs	r0, #129	; 0x81
 8004708:	f7fc f932 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800470c:	2100      	movs	r1, #0
 800470e:	2082      	movs	r0, #130	; 0x82
 8004710:	f7fc f92e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004714:	2100      	movs	r1, #0
 8004716:	2083      	movs	r0, #131	; 0x83
 8004718:	f7fc f92a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800471c:	2100      	movs	r1, #0
 800471e:	2084      	movs	r0, #132	; 0x84
 8004720:	f7fc f926 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004724:	2100      	movs	r1, #0
 8004726:	2085      	movs	r0, #133	; 0x85
 8004728:	f7fc f922 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800472c:	2110      	movs	r1, #16
 800472e:	2090      	movs	r0, #144	; 0x90
 8004730:	f7fc f91e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004734:	2100      	movs	r1, #0
 8004736:	2092      	movs	r0, #146	; 0x92
 8004738:	f7fc f91a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800473c:	2101      	movs	r1, #1
 800473e:	2093      	movs	r0, #147	; 0x93
 8004740:	f7fc f916 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004744:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004748:	2095      	movs	r0, #149	; 0x95
 800474a:	f7fc f911 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800474e:	2100      	movs	r1, #0
 8004750:	2097      	movs	r0, #151	; 0x97
 8004752:	f7fc f90d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004756:	2100      	movs	r1, #0
 8004758:	2098      	movs	r0, #152	; 0x98
 800475a:	f7fc f909 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800475e:	f240 1173 	movw	r1, #371	; 0x173
 8004762:	2007      	movs	r0, #7
 8004764:	f7fc f904 	bl	8000970 <LCD_WriteReg>
 8004768:	f001 ba88 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800476c:	4b74      	ldr	r3, [pc, #464]	; (8004940 <LCD_Init+0x2af8>)
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	f249 3231 	movw	r2, #37681	; 0x9331
 8004774:	4293      	cmp	r3, r2
 8004776:	f040 80e5 	bne.w	8004944 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800477a:	f241 0114 	movw	r1, #4116	; 0x1014
 800477e:	20e7      	movs	r0, #231	; 0xe7
 8004780:	f7fc f8f6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004788:	2001      	movs	r0, #1
 800478a:	f7fc f8f1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800478e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004792:	2002      	movs	r0, #2
 8004794:	f7fc f8ec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004798:	f241 0138 	movw	r1, #4152	; 0x1038
 800479c:	2003      	movs	r0, #3
 800479e:	f7fc f8e7 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80047a2:	f240 2102 	movw	r1, #514	; 0x202
 80047a6:	2008      	movs	r0, #8
 80047a8:	f7fc f8e2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80047ac:	2100      	movs	r1, #0
 80047ae:	2009      	movs	r0, #9
 80047b0:	f7fc f8de 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80047b4:	2100      	movs	r1, #0
 80047b6:	200a      	movs	r0, #10
 80047b8:	f7fc f8da 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80047bc:	2100      	movs	r1, #0
 80047be:	200c      	movs	r0, #12
 80047c0:	f7fc f8d6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80047c4:	2100      	movs	r1, #0
 80047c6:	200d      	movs	r0, #13
 80047c8:	f7fc f8d2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80047cc:	2100      	movs	r1, #0
 80047ce:	200f      	movs	r0, #15
 80047d0:	f7fc f8ce 	bl	8000970 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80047d4:	2100      	movs	r1, #0
 80047d6:	2010      	movs	r0, #16
 80047d8:	f7fc f8ca 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80047dc:	2107      	movs	r1, #7
 80047de:	2011      	movs	r0, #17
 80047e0:	f7fc f8c6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80047e4:	2100      	movs	r1, #0
 80047e6:	2012      	movs	r0, #18
 80047e8:	f7fc f8c2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80047ec:	2100      	movs	r1, #0
 80047ee:	2013      	movs	r0, #19
 80047f0:	f7fc f8be 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80047f4:	20c8      	movs	r0, #200	; 0xc8
 80047f6:	f003 f84d 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80047fa:	f241 6190 	movw	r1, #5776	; 0x1690
 80047fe:	2010      	movs	r0, #16
 8004800:	f7fc f8b6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004804:	f240 2127 	movw	r1, #551	; 0x227
 8004808:	2011      	movs	r0, #17
 800480a:	f7fc f8b1 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800480e:	2032      	movs	r0, #50	; 0x32
 8004810:	f003 f840 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004814:	210c      	movs	r1, #12
 8004816:	2012      	movs	r0, #18
 8004818:	f7fc f8aa 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f003 f839 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004826:	2013      	movs	r0, #19
 8004828:	f7fc f8a2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800482c:	2111      	movs	r1, #17
 800482e:	2029      	movs	r0, #41	; 0x29
 8004830:	f7fc f89e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004834:	210b      	movs	r1, #11
 8004836:	202b      	movs	r0, #43	; 0x2b
 8004838:	f7fc f89a 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800483c:	2032      	movs	r0, #50	; 0x32
 800483e:	f003 f829 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004842:	2100      	movs	r1, #0
 8004844:	2020      	movs	r0, #32
 8004846:	f7fc f893 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800484a:	f240 113f 	movw	r1, #319	; 0x13f
 800484e:	2021      	movs	r0, #33	; 0x21
 8004850:	f7fc f88e 	bl	8000970 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004854:	2100      	movs	r1, #0
 8004856:	2030      	movs	r0, #48	; 0x30
 8004858:	f7fc f88a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800485c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004860:	2031      	movs	r0, #49	; 0x31
 8004862:	f7fc f885 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004866:	2100      	movs	r1, #0
 8004868:	2032      	movs	r0, #50	; 0x32
 800486a:	f7fc f881 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800486e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004872:	2035      	movs	r0, #53	; 0x35
 8004874:	f7fc f87c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004878:	f241 610a 	movw	r1, #5642	; 0x160a
 800487c:	2036      	movs	r0, #54	; 0x36
 800487e:	f7fc f877 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004882:	f240 7107 	movw	r1, #1799	; 0x707
 8004886:	2037      	movs	r0, #55	; 0x37
 8004888:	f7fc f872 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800488c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004890:	2038      	movs	r0, #56	; 0x38
 8004892:	f7fc f86d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004896:	f240 7107 	movw	r1, #1799	; 0x707
 800489a:	2039      	movs	r0, #57	; 0x39
 800489c:	f7fc f868 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80048a0:	f240 4102 	movw	r1, #1026	; 0x402
 80048a4:	203c      	movs	r0, #60	; 0x3c
 80048a6:	f7fc f863 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80048aa:	f640 410f 	movw	r1, #3087	; 0xc0f
 80048ae:	203d      	movs	r0, #61	; 0x3d
 80048b0:	f7fc f85e 	bl	8000970 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80048b4:	2100      	movs	r1, #0
 80048b6:	2050      	movs	r0, #80	; 0x50
 80048b8:	f7fc f85a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80048bc:	21ef      	movs	r1, #239	; 0xef
 80048be:	2051      	movs	r0, #81	; 0x51
 80048c0:	f7fc f856 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80048c4:	2100      	movs	r1, #0
 80048c6:	2052      	movs	r0, #82	; 0x52
 80048c8:	f7fc f852 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80048cc:	f240 113f 	movw	r1, #319	; 0x13f
 80048d0:	2053      	movs	r0, #83	; 0x53
 80048d2:	f7fc f84d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80048d6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80048da:	2060      	movs	r0, #96	; 0x60
 80048dc:	f7fc f848 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80048e0:	2101      	movs	r1, #1
 80048e2:	2061      	movs	r0, #97	; 0x61
 80048e4:	f7fc f844 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80048e8:	2100      	movs	r1, #0
 80048ea:	206a      	movs	r0, #106	; 0x6a
 80048ec:	f7fc f840 	bl	8000970 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80048f0:	2100      	movs	r1, #0
 80048f2:	2080      	movs	r0, #128	; 0x80
 80048f4:	f7fc f83c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048f8:	2100      	movs	r1, #0
 80048fa:	2081      	movs	r0, #129	; 0x81
 80048fc:	f7fc f838 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004900:	2100      	movs	r1, #0
 8004902:	2082      	movs	r0, #130	; 0x82
 8004904:	f7fc f834 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004908:	2100      	movs	r1, #0
 800490a:	2083      	movs	r0, #131	; 0x83
 800490c:	f7fc f830 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004910:	2100      	movs	r1, #0
 8004912:	2084      	movs	r0, #132	; 0x84
 8004914:	f7fc f82c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004918:	2100      	movs	r1, #0
 800491a:	2085      	movs	r0, #133	; 0x85
 800491c:	f7fc f828 	bl	8000970 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004920:	2110      	movs	r1, #16
 8004922:	2090      	movs	r0, #144	; 0x90
 8004924:	f7fc f824 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004928:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800492c:	2092      	movs	r0, #146	; 0x92
 800492e:	f7fc f81f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004932:	f240 1133 	movw	r1, #307	; 0x133
 8004936:	2007      	movs	r0, #7
 8004938:	f7fc f81a 	bl	8000970 <LCD_WriteReg>
 800493c:	f001 b99e 	b.w	8005c7c <LCD_Init+0x3e34>
 8004940:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0x5408) {
 8004944:	4be2      	ldr	r3, [pc, #904]	; (8004cd0 <LCD_Init+0x2e88>)
 8004946:	889b      	ldrh	r3, [r3, #4]
 8004948:	f245 4208 	movw	r2, #21512	; 0x5408
 800494c:	4293      	cmp	r3, r2
 800494e:	f040 80a3 	bne.w	8004a98 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004956:	2001      	movs	r0, #1
 8004958:	f7fc f80a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800495c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004960:	2002      	movs	r0, #2
 8004962:	f7fc f805 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004966:	f241 0130 	movw	r1, #4144	; 0x1030
 800496a:	2003      	movs	r0, #3
 800496c:	f7fc f800 	bl	8000970 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004970:	2100      	movs	r1, #0
 8004972:	2004      	movs	r0, #4
 8004974:	f7fb fffc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004978:	f240 2107 	movw	r1, #519	; 0x207
 800497c:	2008      	movs	r0, #8
 800497e:	f7fb fff7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004982:	2100      	movs	r1, #0
 8004984:	2009      	movs	r0, #9
 8004986:	f7fb fff3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800498a:	2100      	movs	r1, #0
 800498c:	200a      	movs	r0, #10
 800498e:	f7fb ffef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004992:	2100      	movs	r1, #0
 8004994:	200c      	movs	r0, #12
 8004996:	f7fb ffeb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800499a:	2100      	movs	r1, #0
 800499c:	200d      	movs	r0, #13
 800499e:	f7fb ffe7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 80049a2:	2100      	movs	r1, #0
 80049a4:	200f      	movs	r0, #15
 80049a6:	f7fb ffe3 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 80049aa:	2014      	movs	r0, #20
 80049ac:	f002 ff72 	bl	8007894 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80049b0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80049b4:	2010      	movs	r0, #16
 80049b6:	f7fb ffdb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80049ba:	2101      	movs	r1, #1
 80049bc:	2011      	movs	r0, #17
 80049be:	f7fb ffd7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80049c2:	2101      	movs	r1, #1
 80049c4:	2017      	movs	r0, #23
 80049c6:	f7fb ffd3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80049ca:	f44f 719c 	mov.w	r1, #312	; 0x138
 80049ce:	2012      	movs	r0, #18
 80049d0:	f7fb ffce 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80049d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049d8:	2013      	movs	r0, #19
 80049da:	f7fb ffc9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80049de:	2109      	movs	r1, #9
 80049e0:	2029      	movs	r0, #41	; 0x29
 80049e2:	f7fb ffc5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80049e6:	2109      	movs	r1, #9
 80049e8:	202a      	movs	r0, #42	; 0x2a
 80049ea:	f7fb ffc1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80049ee:	2100      	movs	r1, #0
 80049f0:	20a4      	movs	r0, #164	; 0xa4
 80049f2:	f7fb ffbd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80049f6:	2100      	movs	r1, #0
 80049f8:	2050      	movs	r0, #80	; 0x50
 80049fa:	f7fb ffb9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80049fe:	21ef      	movs	r1, #239	; 0xef
 8004a00:	2051      	movs	r0, #81	; 0x51
 8004a02:	f7fb ffb5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004a06:	2100      	movs	r1, #0
 8004a08:	2052      	movs	r0, #82	; 0x52
 8004a0a:	f7fb ffb1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004a0e:	f240 113f 	movw	r1, #319	; 0x13f
 8004a12:	2053      	movs	r0, #83	; 0x53
 8004a14:	f7fb ffac 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004a18:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a1c:	2060      	movs	r0, #96	; 0x60
 8004a1e:	f7fb ffa7 	bl	8000970 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004a22:	2101      	movs	r1, #1
 8004a24:	2061      	movs	r0, #97	; 0x61
 8004a26:	f7fb ffa3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	206a      	movs	r0, #106	; 0x6a
 8004a2e:	f7fb ff9f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004a32:	2100      	movs	r1, #0
 8004a34:	2080      	movs	r0, #128	; 0x80
 8004a36:	f7fb ff9b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2081      	movs	r0, #129	; 0x81
 8004a3e:	f7fb ff97 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004a42:	2100      	movs	r1, #0
 8004a44:	2082      	movs	r0, #130	; 0x82
 8004a46:	f7fb ff93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2083      	movs	r0, #131	; 0x83
 8004a4e:	f7fb ff8f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004a52:	2100      	movs	r1, #0
 8004a54:	2084      	movs	r0, #132	; 0x84
 8004a56:	f7fb ff8b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2085      	movs	r0, #133	; 0x85
 8004a5e:	f7fb ff87 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004a62:	2113      	movs	r1, #19
 8004a64:	2090      	movs	r0, #144	; 0x90
 8004a66:	f7fb ff83 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	2092      	movs	r0, #146	; 0x92
 8004a6e:	f7fb ff7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004a72:	2103      	movs	r1, #3
 8004a74:	2093      	movs	r0, #147	; 0x93
 8004a76:	f7fb ff7b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004a7a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a7e:	2095      	movs	r0, #149	; 0x95
 8004a80:	f7fb ff76 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004a84:	f240 1173 	movw	r1, #371	; 0x173
 8004a88:	2007      	movs	r0, #7
 8004a8a:	f7fb ff71 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004a8e:	2032      	movs	r0, #50	; 0x32
 8004a90:	f002 ff00 	bl	8007894 <HAL_Delay>
 8004a94:	f001 b8f2 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004a98:	4b8d      	ldr	r3, [pc, #564]	; (8004cd0 <LCD_Init+0x2e88>)
 8004a9a:	889b      	ldrh	r3, [r3, #4]
 8004a9c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	f040 8117 	bne.w	8004cd4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2007      	movs	r0, #7
 8004aaa:	f7fb ff61 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004aae:	2032      	movs	r0, #50	; 0x32
 8004ab0:	f002 fef0 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004ab4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004ab8:	2012      	movs	r0, #18
 8004aba:	f7fb ff59 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004abe:	2101      	movs	r1, #1
 8004ac0:	20a4      	movs	r0, #164	; 0xa4
 8004ac2:	f7fb ff55 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004ac6:	210f      	movs	r1, #15
 8004ac8:	2008      	movs	r0, #8
 8004aca:	f7fb ff51 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004ace:	2108      	movs	r1, #8
 8004ad0:	200a      	movs	r0, #10
 8004ad2:	f7fb ff4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004ad6:	2108      	movs	r1, #8
 8004ad8:	200d      	movs	r0, #13
 8004ada:	f7fb ff49 	bl	8000970 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004ade:	f240 7107 	movw	r1, #1799	; 0x707
 8004ae2:	2030      	movs	r0, #48	; 0x30
 8004ae4:	f7fb ff44 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004ae8:	2107      	movs	r1, #7
 8004aea:	2031      	movs	r0, #49	; 0x31
 8004aec:	f7fb ff40 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004af0:	f240 6103 	movw	r1, #1539	; 0x603
 8004af4:	2032      	movs	r0, #50	; 0x32
 8004af6:	f7fb ff3b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004afa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004afe:	2033      	movs	r0, #51	; 0x33
 8004b00:	f7fb ff36 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004b04:	f240 2102 	movw	r1, #514	; 0x202
 8004b08:	2034      	movs	r0, #52	; 0x34
 8004b0a:	f7fb ff31 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004b0e:	2102      	movs	r1, #2
 8004b10:	2035      	movs	r0, #53	; 0x35
 8004b12:	f7fb ff2d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004b16:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004b1a:	2036      	movs	r0, #54	; 0x36
 8004b1c:	f7fb ff28 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004b20:	f240 7107 	movw	r1, #1799	; 0x707
 8004b24:	2037      	movs	r0, #55	; 0x37
 8004b26:	f7fb ff23 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	2038      	movs	r0, #56	; 0x38
 8004b2e:	f7fb ff1f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004b32:	2100      	movs	r1, #0
 8004b34:	2039      	movs	r0, #57	; 0x39
 8004b36:	f7fb ff1b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004b3a:	f240 7107 	movw	r1, #1799	; 0x707
 8004b3e:	203a      	movs	r0, #58	; 0x3a
 8004b40:	f7fb ff16 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004b44:	2100      	movs	r1, #0
 8004b46:	203b      	movs	r0, #59	; 0x3b
 8004b48:	f7fb ff12 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004b4c:	2107      	movs	r1, #7
 8004b4e:	203c      	movs	r0, #60	; 0x3c
 8004b50:	f7fb ff0e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004b54:	2100      	movs	r1, #0
 8004b56:	203d      	movs	r0, #61	; 0x3d
 8004b58:	f7fb ff0a 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004b5c:	2032      	movs	r0, #50	; 0x32
 8004b5e:	f002 fe99 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004b62:	2101      	movs	r1, #1
 8004b64:	2007      	movs	r0, #7
 8004b66:	f7fb ff03 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	2017      	movs	r0, #23
 8004b6e:	f7fb feff 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004b72:	2032      	movs	r0, #50	; 0x32
 8004b74:	f002 fe8e 	bl	8007894 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004b78:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004b7c:	2010      	movs	r0, #16
 8004b7e:	f7fb fef7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004b82:	f240 2117 	movw	r1, #535	; 0x217
 8004b86:	2011      	movs	r0, #17
 8004b88:	f7fb fef2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004b8c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004b90:	2012      	movs	r0, #18
 8004b92:	f7fb feed 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004b96:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004b9a:	2013      	movs	r0, #19
 8004b9c:	f7fb fee8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	202a      	movs	r0, #42	; 0x2a
 8004ba4:	f7fb fee4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004ba8:	210a      	movs	r1, #10
 8004baa:	2029      	movs	r0, #41	; 0x29
 8004bac:	f7fb fee0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004bb0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004bb4:	2012      	movs	r0, #18
 8004bb6:	f7fb fedb 	bl	8000970 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004bba:	2100      	movs	r1, #0
 8004bbc:	2050      	movs	r0, #80	; 0x50
 8004bbe:	f7fb fed7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004bc2:	21ef      	movs	r1, #239	; 0xef
 8004bc4:	2051      	movs	r0, #81	; 0x51
 8004bc6:	f7fb fed3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004bca:	2100      	movs	r1, #0
 8004bcc:	2052      	movs	r0, #82	; 0x52
 8004bce:	f7fb fecf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004bd2:	f240 113f 	movw	r1, #319	; 0x13f
 8004bd6:	2053      	movs	r0, #83	; 0x53
 8004bd8:	f7fb feca 	bl	8000970 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004bdc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004be0:	2060      	movs	r0, #96	; 0x60
 8004be2:	f7fb fec5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004be6:	2101      	movs	r1, #1
 8004be8:	2061      	movs	r0, #97	; 0x61
 8004bea:	f7fb fec1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	206a      	movs	r0, #106	; 0x6a
 8004bf2:	f7fb febd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2080      	movs	r0, #128	; 0x80
 8004bfa:	f7fb feb9 	bl	8000970 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004bfe:	2100      	movs	r1, #0
 8004c00:	2081      	movs	r0, #129	; 0x81
 8004c02:	f7fb feb5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c06:	2100      	movs	r1, #0
 8004c08:	2082      	movs	r0, #130	; 0x82
 8004c0a:	f7fb feb1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2083      	movs	r0, #131	; 0x83
 8004c12:	f7fb fead 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c16:	2100      	movs	r1, #0
 8004c18:	2084      	movs	r0, #132	; 0x84
 8004c1a:	f7fb fea9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	2085      	movs	r0, #133	; 0x85
 8004c22:	f7fb fea5 	bl	8000970 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004c26:	2113      	movs	r1, #19
 8004c28:	2090      	movs	r0, #144	; 0x90
 8004c2a:	f7fb fea1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c2e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c32:	2092      	movs	r0, #146	; 0x92
 8004c34:	f7fb fe9c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004c38:	2105      	movs	r1, #5
 8004c3a:	2093      	movs	r0, #147	; 0x93
 8004c3c:	f7fb fe98 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004c40:	2100      	movs	r1, #0
 8004c42:	2095      	movs	r0, #149	; 0x95
 8004c44:	f7fb fe94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2097      	movs	r0, #151	; 0x97
 8004c4c:	f7fb fe90 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004c50:	2100      	movs	r1, #0
 8004c52:	2098      	movs	r0, #152	; 0x98
 8004c54:	f7fb fe8c 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f7fb fe87 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004c62:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c66:	2002      	movs	r0, #2
 8004c68:	f7fb fe82 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004c6c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004c70:	2003      	movs	r0, #3
 8004c72:	f7fb fe7d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004c76:	2100      	movs	r1, #0
 8004c78:	2004      	movs	r0, #4
 8004c7a:	f7fb fe79 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	200c      	movs	r0, #12
 8004c82:	f7fb fe75 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004c86:	2100      	movs	r1, #0
 8004c88:	200f      	movs	r0, #15
 8004c8a:	f7fb fe71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	2020      	movs	r0, #32
 8004c92:	f7fb fe6d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2021      	movs	r0, #33	; 0x21
 8004c9a:	f7fb fe69 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004c9e:	2121      	movs	r1, #33	; 0x21
 8004ca0:	2007      	movs	r0, #7
 8004ca2:	f7fb fe65 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004ca6:	2014      	movs	r0, #20
 8004ca8:	f002 fdf4 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004cac:	2161      	movs	r1, #97	; 0x61
 8004cae:	2007      	movs	r0, #7
 8004cb0:	f7fb fe5e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004cb4:	2014      	movs	r0, #20
 8004cb6:	f002 fded 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004cba:	f240 1173 	movw	r1, #371	; 0x173
 8004cbe:	2007      	movs	r0, #7
 8004cc0:	f7fb fe56 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004cc4:	2014      	movs	r0, #20
 8004cc6:	f002 fde5 	bl	8007894 <HAL_Delay>
 8004cca:	f000 bfd7 	b.w	8005c7c <LCD_Init+0x3e34>
 8004cce:	bf00      	nop
 8004cd0:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0xB505) {
 8004cd4:	4bf0      	ldr	r3, [pc, #960]	; (8005098 <LCD_Init+0x3250>)
 8004cd6:	889b      	ldrh	r3, [r3, #4]
 8004cd8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	f040 8103 	bne.w	8004ee8 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f7fb fe43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cea:	2100      	movs	r1, #0
 8004cec:	2000      	movs	r0, #0
 8004cee:	f7fb fe3f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f7fb fe3b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fb fe37 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004d02:	2101      	movs	r1, #1
 8004d04:	20a4      	movs	r0, #164	; 0xa4
 8004d06:	f7fb fe33 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004d0a:	2014      	movs	r0, #20
 8004d0c:	f002 fdc2 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004d10:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d14:	2060      	movs	r0, #96	; 0x60
 8004d16:	f7fb fe2b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004d1a:	f240 2102 	movw	r1, #514	; 0x202
 8004d1e:	2008      	movs	r0, #8
 8004d20:	f7fb fe26 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004d24:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004d28:	2030      	movs	r0, #48	; 0x30
 8004d2a:	f7fb fe21 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004d2e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004d32:	2031      	movs	r0, #49	; 0x31
 8004d34:	f7fb fe1c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004d38:	f240 6104 	movw	r1, #1540	; 0x604
 8004d3c:	2032      	movs	r0, #50	; 0x32
 8004d3e:	f7fb fe17 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004d42:	f640 6116 	movw	r1, #3606	; 0xe16
 8004d46:	2033      	movs	r0, #51	; 0x33
 8004d48:	f7fb fe12 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004d4c:	f242 2111 	movw	r1, #8721	; 0x2211
 8004d50:	2034      	movs	r0, #52	; 0x34
 8004d52:	f7fb fe0d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004d56:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004d5a:	2035      	movs	r0, #53	; 0x35
 8004d5c:	f7fb fe08 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004d60:	f248 5107 	movw	r1, #34055	; 0x8507
 8004d64:	2036      	movs	r0, #54	; 0x36
 8004d66:	f7fb fe03 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004d6a:	f241 4107 	movw	r1, #5127	; 0x1407
 8004d6e:	2037      	movs	r0, #55	; 0x37
 8004d70:	f7fb fdfe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004d74:	f241 4103 	movw	r1, #5123	; 0x1403
 8004d78:	2038      	movs	r0, #56	; 0x38
 8004d7a:	f7fb fdf9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004d7e:	2120      	movs	r1, #32
 8004d80:	2039      	movs	r0, #57	; 0x39
 8004d82:	f7fb fdf5 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004d86:	211a      	movs	r1, #26
 8004d88:	2090      	movs	r0, #144	; 0x90
 8004d8a:	f7fb fdf1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2010      	movs	r0, #16
 8004d92:	f7fb fded 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004d96:	2107      	movs	r1, #7
 8004d98:	2011      	movs	r0, #17
 8004d9a:	f7fb fde9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2012      	movs	r0, #18
 8004da2:	f7fb fde5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004da6:	2100      	movs	r1, #0
 8004da8:	2013      	movs	r0, #19
 8004daa:	f7fb fde1 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004dae:	2014      	movs	r0, #20
 8004db0:	f002 fd70 	bl	8007894 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004db4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004db8:	2010      	movs	r0, #16
 8004dba:	f7fb fdd9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004dbe:	f240 1137 	movw	r1, #311	; 0x137
 8004dc2:	2011      	movs	r0, #17
 8004dc4:	f7fb fdd4 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004dc8:	2014      	movs	r0, #20
 8004dca:	f002 fd63 	bl	8007894 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004dce:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004dd2:	2012      	movs	r0, #18
 8004dd4:	f7fb fdcc 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004dd8:	2014      	movs	r0, #20
 8004dda:	f002 fd5b 	bl	8007894 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004dde:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004de2:	2013      	movs	r0, #19
 8004de4:	f7fb fdc4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	202a      	movs	r0, #42	; 0x2a
 8004dec:	f7fb fdc0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004df0:	2148      	movs	r1, #72	; 0x48
 8004df2:	2029      	movs	r0, #41	; 0x29
 8004df4:	f7fb fdbc 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004df8:	2014      	movs	r0, #20
 8004dfa:	f002 fd4b 	bl	8007894 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e02:	2001      	movs	r0, #1
 8004e04:	f7fb fdb4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004e08:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	f7fb fdaf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004e12:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e16:	2003      	movs	r0, #3
 8004e18:	f7fb fdaa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e1c:	f240 2102 	movw	r1, #514	; 0x202
 8004e20:	2008      	movs	r0, #8
 8004e22:	f7fb fda5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004e26:	2100      	movs	r1, #0
 8004e28:	200a      	movs	r0, #10
 8004e2a:	f7fb fda1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	200c      	movs	r0, #12
 8004e32:	f7fb fd9d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004e36:	2100      	movs	r1, #0
 8004e38:	200d      	movs	r0, #13
 8004e3a:	f7fb fd99 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004e3e:	2130      	movs	r1, #48	; 0x30
 8004e40:	200e      	movs	r0, #14
 8004e42:	f7fb fd95 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004e46:	2100      	movs	r1, #0
 8004e48:	2050      	movs	r0, #80	; 0x50
 8004e4a:	f7fb fd91 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004e4e:	21ef      	movs	r1, #239	; 0xef
 8004e50:	2051      	movs	r0, #81	; 0x51
 8004e52:	f7fb fd8d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004e56:	2100      	movs	r1, #0
 8004e58:	2052      	movs	r0, #82	; 0x52
 8004e5a:	f7fb fd89 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004e5e:	f240 113f 	movw	r1, #319	; 0x13f
 8004e62:	2053      	movs	r0, #83	; 0x53
 8004e64:	f7fb fd84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004e68:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e6c:	2060      	movs	r0, #96	; 0x60
 8004e6e:	f7fb fd7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004e72:	2101      	movs	r1, #1
 8004e74:	2061      	movs	r0, #97	; 0x61
 8004e76:	f7fb fd7b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	206a      	movs	r0, #106	; 0x6a
 8004e7e:	f7fb fd77 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004e82:	2111      	movs	r1, #17
 8004e84:	2090      	movs	r0, #144	; 0x90
 8004e86:	f7fb fd73 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004e8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e8e:	2092      	movs	r0, #146	; 0x92
 8004e90:	f7fb fd6e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004e94:	f240 4102 	movw	r1, #1026	; 0x402
 8004e98:	2093      	movs	r0, #147	; 0x93
 8004e9a:	f7fb fd69 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	2094      	movs	r0, #148	; 0x94
 8004ea2:	f7fb fd65 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004ea6:	2014      	movs	r0, #20
 8004ea8:	f002 fcf4 	bl	8007894 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004eac:	2101      	movs	r1, #1
 8004eae:	2007      	movs	r0, #7
 8004eb0:	f7fb fd5e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004eb4:	2014      	movs	r0, #20
 8004eb6:	f002 fced 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004eba:	2161      	movs	r1, #97	; 0x61
 8004ebc:	2007      	movs	r0, #7
 8004ebe:	f7fb fd57 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004ec2:	f240 1173 	movw	r1, #371	; 0x173
 8004ec6:	2007      	movs	r0, #7
 8004ec8:	f7fb fd52 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004ecc:	2100      	movs	r1, #0
 8004ece:	2020      	movs	r0, #32
 8004ed0:	f7fb fd4e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2021      	movs	r0, #33	; 0x21
 8004ed8:	f7fb fd4a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004edc:	2122      	movs	r1, #34	; 0x22
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f7fb fd46 	bl	8000970 <LCD_WriteReg>
 8004ee4:	f000 beca 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ee8:	4b6b      	ldr	r3, [pc, #428]	; (8005098 <LCD_Init+0x3250>)
 8004eea:	889b      	ldrh	r3, [r3, #4]
 8004eec:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	f040 80d3 	bne.w	800509c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7fb fd39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004efe:	2100      	movs	r1, #0
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7fb fd35 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004f06:	2014      	movs	r0, #20
 8004f08:	f002 fcc4 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f7fb fd2e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f14:	2100      	movs	r1, #0
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fb fd2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7fb fd26 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f24:	2100      	movs	r1, #0
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7fb fd22 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	20a4      	movs	r0, #164	; 0xa4
 8004f30:	f7fb fd1e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004f34:	2014      	movs	r0, #20
 8004f36:	f002 fcad 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004f3a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f3e:	2060      	movs	r0, #96	; 0x60
 8004f40:	f7fb fd16 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004f44:	f640 0106 	movw	r1, #2054	; 0x806
 8004f48:	2008      	movs	r0, #8
 8004f4a:	f7fb fd11 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004f4e:	f240 7103 	movw	r1, #1795	; 0x703
 8004f52:	2030      	movs	r0, #48	; 0x30
 8004f54:	f7fb fd0c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004f58:	2101      	movs	r1, #1
 8004f5a:	2031      	movs	r0, #49	; 0x31
 8004f5c:	f7fb fd08 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004f60:	2104      	movs	r1, #4
 8004f62:	2032      	movs	r0, #50	; 0x32
 8004f64:	f7fb fd04 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004f68:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f6c:	2033      	movs	r0, #51	; 0x33
 8004f6e:	f7fb fcff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004f72:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f76:	2034      	movs	r0, #52	; 0x34
 8004f78:	f7fb fcfa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004f7c:	f240 1103 	movw	r1, #259	; 0x103
 8004f80:	2035      	movs	r0, #53	; 0x35
 8004f82:	f7fb fcf5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004f86:	211f      	movs	r1, #31
 8004f88:	2036      	movs	r0, #54	; 0x36
 8004f8a:	f7fb fcf1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004f8e:	f240 7103 	movw	r1, #1795	; 0x703
 8004f92:	2037      	movs	r0, #55	; 0x37
 8004f94:	f7fb fcec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004f98:	2101      	movs	r1, #1
 8004f9a:	2038      	movs	r0, #56	; 0x38
 8004f9c:	f7fb fce8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	2039      	movs	r0, #57	; 0x39
 8004fa4:	f7fb fce4 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004fa8:	2115      	movs	r1, #21
 8004faa:	2090      	movs	r0, #144	; 0x90
 8004fac:	f7fb fce0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004fb0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004fb4:	2010      	movs	r0, #16
 8004fb6:	f7fb fcdb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004fba:	f240 2147 	movw	r1, #583	; 0x247
 8004fbe:	2011      	movs	r0, #17
 8004fc0:	f7fb fcd6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004fc4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004fc8:	2012      	movs	r0, #18
 8004fca:	f7fb fcd1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004fce:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004fd2:	2013      	movs	r0, #19
 8004fd4:	f7fb fccc 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(120);
 8004fd8:	2078      	movs	r0, #120	; 0x78
 8004fda:	f002 fc5b 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	f7fb fcc4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fec:	2002      	movs	r0, #2
 8004fee:	f7fb fcbf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004ff2:	f241 0130 	movw	r1, #4144	; 0x1030
 8004ff6:	2003      	movs	r0, #3
 8004ff8:	f7fb fcba 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	200a      	movs	r0, #10
 8005000:	f7fb fcb6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005004:	2100      	movs	r1, #0
 8005006:	200c      	movs	r0, #12
 8005008:	f7fb fcb2 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800500c:	2120      	movs	r1, #32
 800500e:	200e      	movs	r0, #14
 8005010:	f7fb fcae 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005014:	2100      	movs	r1, #0
 8005016:	200f      	movs	r0, #15
 8005018:	f7fb fcaa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800501c:	2100      	movs	r1, #0
 800501e:	2020      	movs	r0, #32
 8005020:	f7fb fca6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005024:	2100      	movs	r1, #0
 8005026:	2021      	movs	r0, #33	; 0x21
 8005028:	f7fb fca2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800502c:	213d      	movs	r1, #61	; 0x3d
 800502e:	202a      	movs	r0, #42	; 0x2a
 8005030:	f7fb fc9e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8005034:	2014      	movs	r0, #20
 8005036:	f002 fc2d 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800503a:	212d      	movs	r1, #45	; 0x2d
 800503c:	2029      	movs	r0, #41	; 0x29
 800503e:	f7fb fc97 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005042:	2100      	movs	r1, #0
 8005044:	2050      	movs	r0, #80	; 0x50
 8005046:	f7fb fc93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800504a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800504e:	2051      	movs	r0, #81	; 0x51
 8005050:	f7fb fc8e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005054:	2100      	movs	r1, #0
 8005056:	2052      	movs	r0, #82	; 0x52
 8005058:	f7fb fc8a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800505c:	f240 113f 	movw	r1, #319	; 0x13f
 8005060:	2053      	movs	r0, #83	; 0x53
 8005062:	f7fb fc85 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005066:	2100      	movs	r1, #0
 8005068:	2061      	movs	r0, #97	; 0x61
 800506a:	f7fb fc81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800506e:	2100      	movs	r1, #0
 8005070:	206a      	movs	r0, #106	; 0x6a
 8005072:	f7fb fc7d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005076:	f44f 7140 	mov.w	r1, #768	; 0x300
 800507a:	2092      	movs	r0, #146	; 0x92
 800507c:	f7fb fc78 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005080:	2105      	movs	r1, #5
 8005082:	2093      	movs	r0, #147	; 0x93
 8005084:	f7fb fc74 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800508c:	2007      	movs	r0, #7
 800508e:	f7fb fc6f 	bl	8000970 <LCD_WriteReg>
 8005092:	f000 bdf3 	b.w	8005c7c <LCD_Init+0x3e34>
 8005096:	bf00      	nop
 8005098:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 800509c:	4bc2      	ldr	r3, [pc, #776]	; (80053a8 <LCD_Init+0x3560>)
 800509e:	889b      	ldrh	r3, [r3, #4]
 80050a0:	f648 1289 	movw	r2, #35209	; 0x8989
 80050a4:	4293      	cmp	r3, r2
 80050a6:	f040 80bc 	bne.w	8005222 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80050aa:	2101      	movs	r1, #1
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7fb fc5f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80050b2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80050b6:	2003      	movs	r0, #3
 80050b8:	f7fb fc5a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80050bc:	2100      	movs	r1, #0
 80050be:	200c      	movs	r0, #12
 80050c0:	f7fb fc56 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80050c4:	f640 010c 	movw	r1, #2060	; 0x80c
 80050c8:	200d      	movs	r0, #13
 80050ca:	f7fb fc51 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80050ce:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80050d2:	200e      	movs	r0, #14
 80050d4:	f7fb fc4c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80050d8:	21b0      	movs	r1, #176	; 0xb0
 80050da:	201e      	movs	r0, #30
 80050dc:	f7fb fc48 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80050e0:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80050e4:	2001      	movs	r0, #1
 80050e6:	f7fb fc43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80050ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050ee:	2002      	movs	r0, #2
 80050f0:	f7fb fc3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80050f4:	2100      	movs	r1, #0
 80050f6:	2010      	movs	r0, #16
 80050f8:	f7fb fc3a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80050fc:	f246 0178 	movw	r1, #24696	; 0x6078
 8005100:	2011      	movs	r0, #17
 8005102:	f7fb fc35 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005106:	2100      	movs	r1, #0
 8005108:	2005      	movs	r0, #5
 800510a:	f7fb fc31 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800510e:	2100      	movs	r1, #0
 8005110:	2006      	movs	r0, #6
 8005112:	f7fb fc2d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005116:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800511a:	2016      	movs	r0, #22
 800511c:	f7fb fc28 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005120:	2103      	movs	r1, #3
 8005122:	2017      	movs	r0, #23
 8005124:	f7fb fc24 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005128:	f240 2133 	movw	r1, #563	; 0x233
 800512c:	2007      	movs	r0, #7
 800512e:	f7fb fc1f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005132:	2100      	movs	r1, #0
 8005134:	200b      	movs	r0, #11
 8005136:	f7fb fc1b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800513a:	2100      	movs	r1, #0
 800513c:	200f      	movs	r0, #15
 800513e:	f7fb fc17 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005142:	2100      	movs	r1, #0
 8005144:	2041      	movs	r0, #65	; 0x41
 8005146:	f7fb fc13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800514a:	2100      	movs	r1, #0
 800514c:	2042      	movs	r0, #66	; 0x42
 800514e:	f7fb fc0f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005152:	2100      	movs	r1, #0
 8005154:	2048      	movs	r0, #72	; 0x48
 8005156:	f7fb fc0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800515a:	f240 113f 	movw	r1, #319	; 0x13f
 800515e:	2049      	movs	r0, #73	; 0x49
 8005160:	f7fb fc06 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005164:	2100      	movs	r1, #0
 8005166:	204a      	movs	r0, #74	; 0x4a
 8005168:	f7fb fc02 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800516c:	2100      	movs	r1, #0
 800516e:	204b      	movs	r0, #75	; 0x4b
 8005170:	f7fb fbfe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005174:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005178:	2044      	movs	r0, #68	; 0x44
 800517a:	f7fb fbf9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	2045      	movs	r0, #69	; 0x45
 8005182:	f7fb fbf5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005186:	f240 113f 	movw	r1, #319	; 0x13f
 800518a:	2046      	movs	r0, #70	; 0x46
 800518c:	f7fb fbf0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005190:	f240 7107 	movw	r1, #1799	; 0x707
 8005194:	2030      	movs	r0, #48	; 0x30
 8005196:	f7fb fbeb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800519a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800519e:	2031      	movs	r0, #49	; 0x31
 80051a0:	f7fb fbe6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80051a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051a8:	2032      	movs	r0, #50	; 0x32
 80051aa:	f7fb fbe1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80051ae:	f240 5102 	movw	r1, #1282	; 0x502
 80051b2:	2033      	movs	r0, #51	; 0x33
 80051b4:	f7fb fbdc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80051b8:	f240 5107 	movw	r1, #1287	; 0x507
 80051bc:	2034      	movs	r0, #52	; 0x34
 80051be:	f7fb fbd7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80051c2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051c6:	2035      	movs	r0, #53	; 0x35
 80051c8:	f7fb fbd2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80051cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051d0:	2036      	movs	r0, #54	; 0x36
 80051d2:	f7fb fbcd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80051d6:	f240 5102 	movw	r1, #1282	; 0x502
 80051da:	2037      	movs	r0, #55	; 0x37
 80051dc:	f7fb fbc8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80051e0:	f240 3102 	movw	r1, #770	; 0x302
 80051e4:	203a      	movs	r0, #58	; 0x3a
 80051e6:	f7fb fbc3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80051ea:	f240 3102 	movw	r1, #770	; 0x302
 80051ee:	203b      	movs	r0, #59	; 0x3b
 80051f0:	f7fb fbbe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80051f4:	2100      	movs	r1, #0
 80051f6:	2023      	movs	r0, #35	; 0x23
 80051f8:	f7fb fbba 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80051fc:	2100      	movs	r1, #0
 80051fe:	2024      	movs	r0, #36	; 0x24
 8005200:	f7fb fbb6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005208:	2025      	movs	r0, #37	; 0x25
 800520a:	f7fb fbb1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800520e:	2100      	movs	r1, #0
 8005210:	204f      	movs	r0, #79	; 0x4f
 8005212:	f7fb fbad 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005216:	2100      	movs	r1, #0
 8005218:	204e      	movs	r0, #78	; 0x4e
 800521a:	f7fb fba9 	bl	8000970 <LCD_WriteReg>
 800521e:	f000 bd2d 	b.w	8005c7c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005222:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <LCD_Init+0x3560>)
 8005224:	889b      	ldrh	r3, [r3, #4]
 8005226:	f244 5231 	movw	r2, #17713	; 0x4531
 800522a:	4293      	cmp	r3, r2
 800522c:	f040 80be 	bne.w	80053ac <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005230:	2101      	movs	r1, #1
 8005232:	2000      	movs	r0, #0
 8005234:	f7fb fb9c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 8005238:	200a      	movs	r0, #10
 800523a:	f002 fb2b 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800523e:	f241 6128 	movw	r1, #5672	; 0x1628
 8005242:	2010      	movs	r0, #16
 8005244:	f7fb fb94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005248:	210e      	movs	r1, #14
 800524a:	2012      	movs	r0, #18
 800524c:	f7fb fb90 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005250:	f640 2139 	movw	r1, #2617	; 0xa39
 8005254:	2013      	movs	r0, #19
 8005256:	f7fb fb8b 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 800525a:	200a      	movs	r0, #10
 800525c:	f002 fb1a 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005260:	2140      	movs	r1, #64	; 0x40
 8005262:	2011      	movs	r0, #17
 8005264:	f7fb fb84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	2015      	movs	r0, #21
 800526c:	f7fb fb80 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 8005270:	200a      	movs	r0, #10
 8005272:	f002 fb0f 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005276:	211e      	movs	r1, #30
 8005278:	2012      	movs	r0, #18
 800527a:	f7fb fb79 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 800527e:	200a      	movs	r0, #10
 8005280:	f002 fb08 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005284:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005288:	2010      	movs	r0, #16
 800528a:	f7fb fb71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800528e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005292:	2013      	movs	r0, #19
 8005294:	f7fb fb6c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 8005298:	200a      	movs	r0, #10
 800529a:	f002 fafb 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800529e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052a2:	2001      	movs	r0, #1
 80052a4:	f7fb fb64 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80052a8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052ac:	2002      	movs	r0, #2
 80052ae:	f7fb fb5f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80052b2:	f241 0138 	movw	r1, #4152	; 0x1038
 80052b6:	2003      	movs	r0, #3
 80052b8:	f7fb fb5a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80052bc:	f240 2102 	movw	r1, #514	; 0x202
 80052c0:	2008      	movs	r0, #8
 80052c2:	f7fb fb55 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80052c6:	2108      	movs	r1, #8
 80052c8:	200a      	movs	r0, #10
 80052ca:	f7fb fb51 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80052ce:	2100      	movs	r1, #0
 80052d0:	2030      	movs	r0, #48	; 0x30
 80052d2:	f7fb fb4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80052d6:	f240 4102 	movw	r1, #1026	; 0x402
 80052da:	2031      	movs	r0, #49	; 0x31
 80052dc:	f7fb fb48 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80052e0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80052e4:	2032      	movs	r0, #50	; 0x32
 80052e6:	f7fb fb43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80052ea:	f240 5103 	movw	r1, #1283	; 0x503
 80052ee:	2033      	movs	r0, #51	; 0x33
 80052f0:	f7fb fb3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80052f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80052f8:	2034      	movs	r0, #52	; 0x34
 80052fa:	f7fb fb39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80052fe:	f240 3101 	movw	r1, #769	; 0x301
 8005302:	2035      	movs	r0, #53	; 0x35
 8005304:	f7fb fb34 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005308:	f240 7107 	movw	r1, #1799	; 0x707
 800530c:	2036      	movs	r0, #54	; 0x36
 800530e:	f7fb fb2f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005312:	f240 3105 	movw	r1, #773	; 0x305
 8005316:	2037      	movs	r0, #55	; 0x37
 8005318:	f7fb fb2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800531c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005320:	2038      	movs	r0, #56	; 0x38
 8005322:	f7fb fb25 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005326:	f640 710b 	movw	r1, #3851	; 0xf0b
 800532a:	2039      	movs	r0, #57	; 0x39
 800532c:	f7fb fb20 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005330:	2102      	movs	r1, #2
 8005332:	2041      	movs	r0, #65	; 0x41
 8005334:	f7fb fb1c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005338:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800533c:	2060      	movs	r0, #96	; 0x60
 800533e:	f7fb fb17 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005342:	2101      	movs	r1, #1
 8005344:	2061      	movs	r0, #97	; 0x61
 8005346:	f7fb fb13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800534a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800534e:	2090      	movs	r0, #144	; 0x90
 8005350:	f7fb fb0e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005354:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005358:	2092      	movs	r0, #146	; 0x92
 800535a:	f7fb fb09 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800535e:	2104      	movs	r1, #4
 8005360:	2093      	movs	r0, #147	; 0x93
 8005362:	f7fb fb05 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800536a:	20a0      	movs	r0, #160	; 0xa0
 800536c:	f7fb fb00 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005370:	2101      	movs	r1, #1
 8005372:	2007      	movs	r0, #7
 8005374:	f7fb fafc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005378:	2121      	movs	r1, #33	; 0x21
 800537a:	2007      	movs	r0, #7
 800537c:	f7fb faf8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005380:	2123      	movs	r1, #35	; 0x23
 8005382:	2007      	movs	r0, #7
 8005384:	f7fb faf4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005388:	2133      	movs	r1, #51	; 0x33
 800538a:	2007      	movs	r0, #7
 800538c:	f7fb faf0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005390:	f240 1133 	movw	r1, #307	; 0x133
 8005394:	2007      	movs	r0, #7
 8005396:	f7fb faeb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800539a:	2100      	movs	r1, #0
 800539c:	20a0      	movs	r0, #160	; 0xa0
 800539e:	f7fb fae7 	bl	8000970 <LCD_WriteReg>
 80053a2:	f000 bc6b 	b.w	8005c7c <LCD_Init+0x3e34>
 80053a6:	bf00      	nop
 80053a8:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0x4535) {
 80053ac:	4b5b      	ldr	r3, [pc, #364]	; (800551c <LCD_Init+0x36d4>)
 80053ae:	889b      	ldrh	r3, [r3, #4]
 80053b0:	f244 5235 	movw	r2, #17717	; 0x4535
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f040 80b3 	bne.w	8005520 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80053ba:	2130      	movs	r1, #48	; 0x30
 80053bc:	2015      	movs	r0, #21
 80053be:	f7fb fad7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80053c2:	2110      	movs	r1, #16
 80053c4:	209a      	movs	r0, #154	; 0x9a
 80053c6:	f7fb fad3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80053ca:	2120      	movs	r1, #32
 80053cc:	2011      	movs	r0, #17
 80053ce:	f7fb facf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80053d2:	f243 4128 	movw	r1, #13352	; 0x3428
 80053d6:	2010      	movs	r0, #16
 80053d8:	f7fb faca 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80053dc:	2102      	movs	r1, #2
 80053de:	2012      	movs	r0, #18
 80053e0:	f7fb fac6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80053e4:	f241 0138 	movw	r1, #4152	; 0x1038
 80053e8:	2013      	movs	r0, #19
 80053ea:	f7fb fac1 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(40);
 80053ee:	2028      	movs	r0, #40	; 0x28
 80053f0:	f002 fa50 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80053f4:	2112      	movs	r1, #18
 80053f6:	2012      	movs	r0, #18
 80053f8:	f7fb faba 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(40);
 80053fc:	2028      	movs	r0, #40	; 0x28
 80053fe:	f002 fa49 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005402:	f243 4120 	movw	r1, #13344	; 0x3420
 8005406:	2010      	movs	r0, #16
 8005408:	f7fb fab2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800540c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005410:	2013      	movs	r0, #19
 8005412:	f7fb faad 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(70);
 8005416:	2046      	movs	r0, #70	; 0x46
 8005418:	f002 fa3c 	bl	8007894 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800541c:	2100      	movs	r1, #0
 800541e:	2030      	movs	r0, #48	; 0x30
 8005420:	f7fb faa6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005424:	f240 4102 	movw	r1, #1026	; 0x402
 8005428:	2031      	movs	r0, #49	; 0x31
 800542a:	f7fb faa1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800542e:	f240 3107 	movw	r1, #775	; 0x307
 8005432:	2032      	movs	r0, #50	; 0x32
 8005434:	f7fb fa9c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005438:	f44f 7141 	mov.w	r1, #772	; 0x304
 800543c:	2033      	movs	r0, #51	; 0x33
 800543e:	f7fb fa97 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005442:	2104      	movs	r1, #4
 8005444:	2034      	movs	r0, #52	; 0x34
 8005446:	f7fb fa93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800544a:	f240 4101 	movw	r1, #1025	; 0x401
 800544e:	2035      	movs	r0, #53	; 0x35
 8005450:	f7fb fa8e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005454:	f240 7107 	movw	r1, #1799	; 0x707
 8005458:	2036      	movs	r0, #54	; 0x36
 800545a:	f7fb fa89 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800545e:	f240 3105 	movw	r1, #773	; 0x305
 8005462:	2037      	movs	r0, #55	; 0x37
 8005464:	f7fb fa84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005468:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800546c:	2038      	movs	r0, #56	; 0x38
 800546e:	f7fb fa7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005472:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005476:	2039      	movs	r0, #57	; 0x39
 8005478:	f7fb fa7a 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800547c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005480:	2001      	movs	r0, #1
 8005482:	f7fb fa75 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005486:	f44f 7140 	mov.w	r1, #768	; 0x300
 800548a:	2002      	movs	r0, #2
 800548c:	f7fb fa70 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005490:	f241 0130 	movw	r1, #4144	; 0x1030
 8005494:	2003      	movs	r0, #3
 8005496:	f7fb fa6b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800549a:	f640 0108 	movw	r1, #2056	; 0x808
 800549e:	2008      	movs	r0, #8
 80054a0:	f7fb fa66 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80054a4:	2108      	movs	r1, #8
 80054a6:	200a      	movs	r0, #10
 80054a8:	f7fb fa62 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80054ac:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80054b0:	2060      	movs	r0, #96	; 0x60
 80054b2:	f7fb fa5d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80054b6:	2101      	movs	r1, #1
 80054b8:	2061      	movs	r0, #97	; 0x61
 80054ba:	f7fb fa59 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80054be:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80054c2:	2090      	movs	r0, #144	; 0x90
 80054c4:	f7fb fa54 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80054c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054cc:	2092      	movs	r0, #146	; 0x92
 80054ce:	f7fb fa4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80054d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054d6:	2093      	movs	r0, #147	; 0x93
 80054d8:	f7fb fa4a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80054dc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80054e0:	20a0      	movs	r0, #160	; 0xa0
 80054e2:	f7fb fa45 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80054e6:	2110      	movs	r1, #16
 80054e8:	20a3      	movs	r0, #163	; 0xa3
 80054ea:	f7fb fa41 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80054ee:	2101      	movs	r1, #1
 80054f0:	2007      	movs	r0, #7
 80054f2:	f7fb fa3d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80054f6:	2121      	movs	r1, #33	; 0x21
 80054f8:	2007      	movs	r0, #7
 80054fa:	f7fb fa39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80054fe:	2123      	movs	r1, #35	; 0x23
 8005500:	2007      	movs	r0, #7
 8005502:	f7fb fa35 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005506:	2133      	movs	r1, #51	; 0x33
 8005508:	2007      	movs	r0, #7
 800550a:	f7fb fa31 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800550e:	f240 1133 	movw	r1, #307	; 0x133
 8005512:	2007      	movs	r0, #7
 8005514:	f7fb fa2c 	bl	8000970 <LCD_WriteReg>
 8005518:	e3b0      	b.n	8005c7c <LCD_Init+0x3e34>
 800551a:	bf00      	nop
 800551c:	200010cc 	.word	0x200010cc
	} else if (lcddev.id == 0X1963) {
 8005520:	4ba8      	ldr	r3, [pc, #672]	; (80057c4 <LCD_Init+0x397c>)
 8005522:	889b      	ldrh	r3, [r3, #4]
 8005524:	f641 1263 	movw	r2, #6499	; 0x1963
 8005528:	4293      	cmp	r3, r2
 800552a:	f040 83a7 	bne.w	8005c7c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800552e:	20e2      	movs	r0, #226	; 0xe2
 8005530:	f7fb f992 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005534:	4ba4      	ldr	r3, [pc, #656]	; (80057c8 <LCD_Init+0x3980>)
 8005536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553a:	611a      	str	r2, [r3, #16]
 800553c:	4ba2      	ldr	r3, [pc, #648]	; (80057c8 <LCD_Init+0x3980>)
 800553e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005542:	615a      	str	r2, [r3, #20]
 8005544:	4ba1      	ldr	r3, [pc, #644]	; (80057cc <LCD_Init+0x3984>)
 8005546:	221d      	movs	r2, #29
 8005548:	60da      	str	r2, [r3, #12]
 800554a:	4b9f      	ldr	r3, [pc, #636]	; (80057c8 <LCD_Init+0x3980>)
 800554c:	2280      	movs	r2, #128	; 0x80
 800554e:	615a      	str	r2, [r3, #20]
 8005550:	4b9d      	ldr	r3, [pc, #628]	; (80057c8 <LCD_Init+0x3980>)
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	4b9c      	ldr	r3, [pc, #624]	; (80057c8 <LCD_Init+0x3980>)
 8005558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800555e:	4b9a      	ldr	r3, [pc, #616]	; (80057c8 <LCD_Init+0x3980>)
 8005560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005564:	611a      	str	r2, [r3, #16]
 8005566:	4b98      	ldr	r3, [pc, #608]	; (80057c8 <LCD_Init+0x3980>)
 8005568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556c:	615a      	str	r2, [r3, #20]
 800556e:	4b97      	ldr	r3, [pc, #604]	; (80057cc <LCD_Init+0x3984>)
 8005570:	2202      	movs	r2, #2
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	4b94      	ldr	r3, [pc, #592]	; (80057c8 <LCD_Init+0x3980>)
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	615a      	str	r2, [r3, #20]
 800557a:	4b93      	ldr	r3, [pc, #588]	; (80057c8 <LCD_Init+0x3980>)
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	4b91      	ldr	r3, [pc, #580]	; (80057c8 <LCD_Init+0x3980>)
 8005582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005586:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005588:	4b8f      	ldr	r3, [pc, #572]	; (80057c8 <LCD_Init+0x3980>)
 800558a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800558e:	611a      	str	r2, [r3, #16]
 8005590:	4b8d      	ldr	r3, [pc, #564]	; (80057c8 <LCD_Init+0x3980>)
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	615a      	str	r2, [r3, #20]
 8005598:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <LCD_Init+0x3984>)
 800559a:	2204      	movs	r2, #4
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	4b8a      	ldr	r3, [pc, #552]	; (80057c8 <LCD_Init+0x3980>)
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	615a      	str	r2, [r3, #20]
 80055a4:	4b88      	ldr	r3, [pc, #544]	; (80057c8 <LCD_Init+0x3980>)
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	611a      	str	r2, [r3, #16]
 80055aa:	4b87      	ldr	r3, [pc, #540]	; (80057c8 <LCD_Init+0x3980>)
 80055ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80055b2:	2001      	movs	r0, #1
 80055b4:	f002 f96e 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80055b8:	20e0      	movs	r0, #224	; 0xe0
 80055ba:	f7fb f94d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80055be:	4b82      	ldr	r3, [pc, #520]	; (80057c8 <LCD_Init+0x3980>)
 80055c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	4b80      	ldr	r3, [pc, #512]	; (80057c8 <LCD_Init+0x3980>)
 80055c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055cc:	615a      	str	r2, [r3, #20]
 80055ce:	4b7f      	ldr	r3, [pc, #508]	; (80057cc <LCD_Init+0x3984>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	4b7c      	ldr	r3, [pc, #496]	; (80057c8 <LCD_Init+0x3980>)
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	615a      	str	r2, [r3, #20]
 80055da:	4b7b      	ldr	r3, [pc, #492]	; (80057c8 <LCD_Init+0x3980>)
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	611a      	str	r2, [r3, #16]
 80055e0:	4b79      	ldr	r3, [pc, #484]	; (80057c8 <LCD_Init+0x3980>)
 80055e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e6:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80055e8:	200a      	movs	r0, #10
 80055ea:	f002 f953 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80055ee:	20e0      	movs	r0, #224	; 0xe0
 80055f0:	f7fb f932 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80055f4:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <LCD_Init+0x3980>)
 80055f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055fa:	611a      	str	r2, [r3, #16]
 80055fc:	4b72      	ldr	r3, [pc, #456]	; (80057c8 <LCD_Init+0x3980>)
 80055fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005602:	615a      	str	r2, [r3, #20]
 8005604:	4b71      	ldr	r3, [pc, #452]	; (80057cc <LCD_Init+0x3984>)
 8005606:	2203      	movs	r2, #3
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <LCD_Init+0x3980>)
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	615a      	str	r2, [r3, #20]
 8005610:	4b6d      	ldr	r3, [pc, #436]	; (80057c8 <LCD_Init+0x3980>)
 8005612:	2280      	movs	r2, #128	; 0x80
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <LCD_Init+0x3980>)
 8005618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800561e:	200c      	movs	r0, #12
 8005620:	f002 f938 	bl	8007894 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005624:	2001      	movs	r0, #1
 8005626:	f7fb f917 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(10);
 800562a:	200a      	movs	r0, #10
 800562c:	f002 f932 	bl	8007894 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005630:	20e6      	movs	r0, #230	; 0xe6
 8005632:	f7fb f911 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005636:	4b64      	ldr	r3, [pc, #400]	; (80057c8 <LCD_Init+0x3980>)
 8005638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563c:	611a      	str	r2, [r3, #16]
 800563e:	4b62      	ldr	r3, [pc, #392]	; (80057c8 <LCD_Init+0x3980>)
 8005640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005644:	615a      	str	r2, [r3, #20]
 8005646:	4b61      	ldr	r3, [pc, #388]	; (80057cc <LCD_Init+0x3984>)
 8005648:	222f      	movs	r2, #47	; 0x2f
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	4b5e      	ldr	r3, [pc, #376]	; (80057c8 <LCD_Init+0x3980>)
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	615a      	str	r2, [r3, #20]
 8005652:	4b5d      	ldr	r3, [pc, #372]	; (80057c8 <LCD_Init+0x3980>)
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	611a      	str	r2, [r3, #16]
 8005658:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <LCD_Init+0x3980>)
 800565a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800565e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005660:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <LCD_Init+0x3980>)
 8005662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005666:	611a      	str	r2, [r3, #16]
 8005668:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <LCD_Init+0x3980>)
 800566a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	4b56      	ldr	r3, [pc, #344]	; (80057cc <LCD_Init+0x3984>)
 8005672:	22ff      	movs	r2, #255	; 0xff
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	4b54      	ldr	r3, [pc, #336]	; (80057c8 <LCD_Init+0x3980>)
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	615a      	str	r2, [r3, #20]
 800567c:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <LCD_Init+0x3980>)
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	4b51      	ldr	r3, [pc, #324]	; (80057c8 <LCD_Init+0x3980>)
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800568a:	4b4f      	ldr	r3, [pc, #316]	; (80057c8 <LCD_Init+0x3980>)
 800568c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005690:	611a      	str	r2, [r3, #16]
 8005692:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <LCD_Init+0x3980>)
 8005694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005698:	615a      	str	r2, [r3, #20]
 800569a:	4b4c      	ldr	r3, [pc, #304]	; (80057cc <LCD_Init+0x3984>)
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <LCD_Init+0x3980>)
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	615a      	str	r2, [r3, #20]
 80056a6:	4b48      	ldr	r3, [pc, #288]	; (80057c8 <LCD_Init+0x3980>)
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	611a      	str	r2, [r3, #16]
 80056ac:	4b46      	ldr	r3, [pc, #280]	; (80057c8 <LCD_Init+0x3980>)
 80056ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80056b4:	20b0      	movs	r0, #176	; 0xb0
 80056b6:	f7fb f8cf 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80056ba:	4b43      	ldr	r3, [pc, #268]	; (80057c8 <LCD_Init+0x3980>)
 80056bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c0:	611a      	str	r2, [r3, #16]
 80056c2:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <LCD_Init+0x3980>)
 80056c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c8:	615a      	str	r2, [r3, #20]
 80056ca:	4b40      	ldr	r3, [pc, #256]	; (80057cc <LCD_Init+0x3984>)
 80056cc:	2220      	movs	r2, #32
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	4b3d      	ldr	r3, [pc, #244]	; (80057c8 <LCD_Init+0x3980>)
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <LCD_Init+0x3980>)
 80056d8:	2280      	movs	r2, #128	; 0x80
 80056da:	611a      	str	r2, [r3, #16]
 80056dc:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <LCD_Init+0x3980>)
 80056de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80056e4:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <LCD_Init+0x3980>)
 80056e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ea:	611a      	str	r2, [r3, #16]
 80056ec:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <LCD_Init+0x3980>)
 80056ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f2:	615a      	str	r2, [r3, #20]
 80056f4:	4b35      	ldr	r3, [pc, #212]	; (80057cc <LCD_Init+0x3984>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	4b33      	ldr	r3, [pc, #204]	; (80057c8 <LCD_Init+0x3980>)
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	615a      	str	r2, [r3, #20]
 8005700:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <LCD_Init+0x3980>)
 8005702:	2280      	movs	r2, #128	; 0x80
 8005704:	611a      	str	r2, [r3, #16]
 8005706:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <LCD_Init+0x3980>)
 8005708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <LCD_Init+0x3980>)
 8005710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005714:	611a      	str	r2, [r3, #16]
 8005716:	4b2c      	ldr	r3, [pc, #176]	; (80057c8 <LCD_Init+0x3980>)
 8005718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571c:	615a      	str	r2, [r3, #20]
 800571e:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <LCD_Init+0x3984>)
 8005720:	2203      	movs	r2, #3
 8005722:	60da      	str	r2, [r3, #12]
 8005724:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <LCD_Init+0x3980>)
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	615a      	str	r2, [r3, #20]
 800572a:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <LCD_Init+0x3980>)
 800572c:	2280      	movs	r2, #128	; 0x80
 800572e:	611a      	str	r2, [r3, #16]
 8005730:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <LCD_Init+0x3980>)
 8005732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005736:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <LCD_Init+0x3980>)
 800573a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573e:	611a      	str	r2, [r3, #16]
 8005740:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <LCD_Init+0x3980>)
 8005742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005746:	615a      	str	r2, [r3, #20]
 8005748:	4b20      	ldr	r3, [pc, #128]	; (80057cc <LCD_Init+0x3984>)
 800574a:	f240 321f 	movw	r2, #799	; 0x31f
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <LCD_Init+0x3980>)
 8005752:	2280      	movs	r2, #128	; 0x80
 8005754:	615a      	str	r2, [r3, #20]
 8005756:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <LCD_Init+0x3980>)
 8005758:	2280      	movs	r2, #128	; 0x80
 800575a:	611a      	str	r2, [r3, #16]
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <LCD_Init+0x3980>)
 800575e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005762:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005764:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <LCD_Init+0x3980>)
 8005766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576a:	611a      	str	r2, [r3, #16]
 800576c:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <LCD_Init+0x3980>)
 800576e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005772:	615a      	str	r2, [r3, #20]
 8005774:	4b15      	ldr	r3, [pc, #84]	; (80057cc <LCD_Init+0x3984>)
 8005776:	2201      	movs	r2, #1
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <LCD_Init+0x3980>)
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	615a      	str	r2, [r3, #20]
 8005780:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <LCD_Init+0x3980>)
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <LCD_Init+0x3980>)
 8005788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800578e:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <LCD_Init+0x3980>)
 8005790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005794:	611a      	str	r2, [r3, #16]
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <LCD_Init+0x3980>)
 8005798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579c:	615a      	str	r2, [r3, #20]
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <LCD_Init+0x3984>)
 80057a0:	f240 12df 	movw	r2, #479	; 0x1df
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <LCD_Init+0x3980>)
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	615a      	str	r2, [r3, #20]
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <LCD_Init+0x3980>)
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <LCD_Init+0x3980>)
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80057ba:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <LCD_Init+0x3980>)
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	e006      	b.n	80057d0 <LCD_Init+0x3988>
 80057c2:	bf00      	nop
 80057c4:	200010cc 	.word	0x200010cc
 80057c8:	40011000 	.word	0x40011000
 80057cc:	40010c00 	.word	0x40010c00
 80057d0:	611a      	str	r2, [r3, #16]
 80057d2:	4ba3      	ldr	r3, [pc, #652]	; (8005a60 <LCD_Init+0x3c18>)
 80057d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d8:	615a      	str	r2, [r3, #20]
 80057da:	4ba2      	ldr	r3, [pc, #648]	; (8005a64 <LCD_Init+0x3c1c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	4b9f      	ldr	r3, [pc, #636]	; (8005a60 <LCD_Init+0x3c18>)
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	615a      	str	r2, [r3, #20]
 80057e6:	4b9e      	ldr	r3, [pc, #632]	; (8005a60 <LCD_Init+0x3c18>)
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	611a      	str	r2, [r3, #16]
 80057ec:	4b9c      	ldr	r3, [pc, #624]	; (8005a60 <LCD_Init+0x3c18>)
 80057ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80057f4:	20b4      	movs	r0, #180	; 0xb4
 80057f6:	f7fb f82f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80057fa:	4b99      	ldr	r3, [pc, #612]	; (8005a60 <LCD_Init+0x3c18>)
 80057fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005800:	611a      	str	r2, [r3, #16]
 8005802:	4b97      	ldr	r3, [pc, #604]	; (8005a60 <LCD_Init+0x3c18>)
 8005804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	4b96      	ldr	r3, [pc, #600]	; (8005a64 <LCD_Init+0x3c1c>)
 800580c:	2204      	movs	r2, #4
 800580e:	60da      	str	r2, [r3, #12]
 8005810:	4b93      	ldr	r3, [pc, #588]	; (8005a60 <LCD_Init+0x3c18>)
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	615a      	str	r2, [r3, #20]
 8005816:	4b92      	ldr	r3, [pc, #584]	; (8005a60 <LCD_Init+0x3c18>)
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	4b90      	ldr	r3, [pc, #576]	; (8005a60 <LCD_Init+0x3c18>)
 800581e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005822:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005824:	4b8e      	ldr	r3, [pc, #568]	; (8005a60 <LCD_Init+0x3c18>)
 8005826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582a:	611a      	str	r2, [r3, #16]
 800582c:	4b8c      	ldr	r3, [pc, #560]	; (8005a60 <LCD_Init+0x3c18>)
 800582e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005832:	615a      	str	r2, [r3, #20]
 8005834:	4b8b      	ldr	r3, [pc, #556]	; (8005a64 <LCD_Init+0x3c1c>)
 8005836:	f240 421f 	movw	r2, #1055	; 0x41f
 800583a:	60da      	str	r2, [r3, #12]
 800583c:	4b88      	ldr	r3, [pc, #544]	; (8005a60 <LCD_Init+0x3c18>)
 800583e:	2280      	movs	r2, #128	; 0x80
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	4b87      	ldr	r3, [pc, #540]	; (8005a60 <LCD_Init+0x3c18>)
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	611a      	str	r2, [r3, #16]
 8005848:	4b85      	ldr	r3, [pc, #532]	; (8005a60 <LCD_Init+0x3c18>)
 800584a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005850:	4b83      	ldr	r3, [pc, #524]	; (8005a60 <LCD_Init+0x3c18>)
 8005852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005856:	611a      	str	r2, [r3, #16]
 8005858:	4b81      	ldr	r3, [pc, #516]	; (8005a60 <LCD_Init+0x3c18>)
 800585a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585e:	615a      	str	r2, [r3, #20]
 8005860:	4b80      	ldr	r3, [pc, #512]	; (8005a64 <LCD_Init+0x3c1c>)
 8005862:	2200      	movs	r2, #0
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	4b7e      	ldr	r3, [pc, #504]	; (8005a60 <LCD_Init+0x3c18>)
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	615a      	str	r2, [r3, #20]
 800586c:	4b7c      	ldr	r3, [pc, #496]	; (8005a60 <LCD_Init+0x3c18>)
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	611a      	str	r2, [r3, #16]
 8005872:	4b7b      	ldr	r3, [pc, #492]	; (8005a60 <LCD_Init+0x3c18>)
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800587a:	4b79      	ldr	r3, [pc, #484]	; (8005a60 <LCD_Init+0x3c18>)
 800587c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005880:	611a      	str	r2, [r3, #16]
 8005882:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <LCD_Init+0x3c18>)
 8005884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005888:	615a      	str	r2, [r3, #20]
 800588a:	4b76      	ldr	r3, [pc, #472]	; (8005a64 <LCD_Init+0x3c1c>)
 800588c:	222e      	movs	r2, #46	; 0x2e
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <LCD_Init+0x3c18>)
 8005892:	2280      	movs	r2, #128	; 0x80
 8005894:	615a      	str	r2, [r3, #20]
 8005896:	4b72      	ldr	r3, [pc, #456]	; (8005a60 <LCD_Init+0x3c18>)
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	611a      	str	r2, [r3, #16]
 800589c:	4b70      	ldr	r3, [pc, #448]	; (8005a60 <LCD_Init+0x3c18>)
 800589e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80058a4:	4b6e      	ldr	r3, [pc, #440]	; (8005a60 <LCD_Init+0x3c18>)
 80058a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058aa:	611a      	str	r2, [r3, #16]
 80058ac:	4b6c      	ldr	r3, [pc, #432]	; (8005a60 <LCD_Init+0x3c18>)
 80058ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	4b6b      	ldr	r3, [pc, #428]	; (8005a64 <LCD_Init+0x3c1c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	4b69      	ldr	r3, [pc, #420]	; (8005a60 <LCD_Init+0x3c18>)
 80058bc:	2280      	movs	r2, #128	; 0x80
 80058be:	615a      	str	r2, [r3, #20]
 80058c0:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <LCD_Init+0x3c18>)
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	611a      	str	r2, [r3, #16]
 80058c6:	4b66      	ldr	r3, [pc, #408]	; (8005a60 <LCD_Init+0x3c18>)
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058ce:	4b64      	ldr	r3, [pc, #400]	; (8005a60 <LCD_Init+0x3c18>)
 80058d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	4b62      	ldr	r3, [pc, #392]	; (8005a60 <LCD_Init+0x3c18>)
 80058d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058dc:	615a      	str	r2, [r3, #20]
 80058de:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <LCD_Init+0x3c1c>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	4b5e      	ldr	r3, [pc, #376]	; (8005a60 <LCD_Init+0x3c18>)
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	615a      	str	r2, [r3, #20]
 80058ea:	4b5d      	ldr	r3, [pc, #372]	; (8005a60 <LCD_Init+0x3c18>)
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	611a      	str	r2, [r3, #16]
 80058f0:	4b5b      	ldr	r3, [pc, #364]	; (8005a60 <LCD_Init+0x3c18>)
 80058f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80058f8:	4b59      	ldr	r3, [pc, #356]	; (8005a60 <LCD_Init+0x3c18>)
 80058fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fe:	611a      	str	r2, [r3, #16]
 8005900:	4b57      	ldr	r3, [pc, #348]	; (8005a60 <LCD_Init+0x3c18>)
 8005902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005906:	615a      	str	r2, [r3, #20]
 8005908:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <LCD_Init+0x3c1c>)
 800590a:	2200      	movs	r2, #0
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	4b54      	ldr	r3, [pc, #336]	; (8005a60 <LCD_Init+0x3c18>)
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	615a      	str	r2, [r3, #20]
 8005914:	4b52      	ldr	r3, [pc, #328]	; (8005a60 <LCD_Init+0x3c18>)
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	611a      	str	r2, [r3, #16]
 800591a:	4b51      	ldr	r3, [pc, #324]	; (8005a60 <LCD_Init+0x3c18>)
 800591c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005920:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005922:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <LCD_Init+0x3c18>)
 8005924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005928:	611a      	str	r2, [r3, #16]
 800592a:	4b4d      	ldr	r3, [pc, #308]	; (8005a60 <LCD_Init+0x3c18>)
 800592c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005930:	615a      	str	r2, [r3, #20]
 8005932:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <LCD_Init+0x3c1c>)
 8005934:	2200      	movs	r2, #0
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	4b49      	ldr	r3, [pc, #292]	; (8005a60 <LCD_Init+0x3c18>)
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	615a      	str	r2, [r3, #20]
 800593e:	4b48      	ldr	r3, [pc, #288]	; (8005a60 <LCD_Init+0x3c18>)
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	611a      	str	r2, [r3, #16]
 8005944:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <LCD_Init+0x3c18>)
 8005946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 800594c:	20b6      	movs	r0, #182	; 0xb6
 800594e:	f7fa ff83 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005952:	4b43      	ldr	r3, [pc, #268]	; (8005a60 <LCD_Init+0x3c18>)
 8005954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005958:	611a      	str	r2, [r3, #16]
 800595a:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <LCD_Init+0x3c18>)
 800595c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005960:	615a      	str	r2, [r3, #20]
 8005962:	4b40      	ldr	r3, [pc, #256]	; (8005a64 <LCD_Init+0x3c1c>)
 8005964:	2202      	movs	r2, #2
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <LCD_Init+0x3c18>)
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	615a      	str	r2, [r3, #20]
 800596e:	4b3c      	ldr	r3, [pc, #240]	; (8005a60 <LCD_Init+0x3c18>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	611a      	str	r2, [r3, #16]
 8005974:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <LCD_Init+0x3c18>)
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800597c:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <LCD_Init+0x3c18>)
 800597e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005982:	611a      	str	r2, [r3, #16]
 8005984:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <LCD_Init+0x3c18>)
 8005986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598a:	615a      	str	r2, [r3, #20]
 800598c:	4b35      	ldr	r3, [pc, #212]	; (8005a64 <LCD_Init+0x3c1c>)
 800598e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <LCD_Init+0x3c18>)
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <LCD_Init+0x3c18>)
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	4b2f      	ldr	r3, [pc, #188]	; (8005a60 <LCD_Init+0x3c18>)
 80059a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 80059a8:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <LCD_Init+0x3c18>)
 80059aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ae:	611a      	str	r2, [r3, #16]
 80059b0:	4b2b      	ldr	r3, [pc, #172]	; (8005a60 <LCD_Init+0x3c18>)
 80059b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b6:	615a      	str	r2, [r3, #20]
 80059b8:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <LCD_Init+0x3c1c>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <LCD_Init+0x3c18>)
 80059c0:	2280      	movs	r2, #128	; 0x80
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <LCD_Init+0x3c18>)
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <LCD_Init+0x3c18>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <LCD_Init+0x3c18>)
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <LCD_Init+0x3c18>)
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	615a      	str	r2, [r3, #20]
 80059e2:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <LCD_Init+0x3c1c>)
 80059e4:	2217      	movs	r2, #23
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <LCD_Init+0x3c18>)
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <LCD_Init+0x3c18>)
 80059f0:	2280      	movs	r2, #128	; 0x80
 80059f2:	611a      	str	r2, [r3, #16]
 80059f4:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <LCD_Init+0x3c18>)
 80059f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80059fc:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <LCD_Init+0x3c18>)
 80059fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a02:	611a      	str	r2, [r3, #16]
 8005a04:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <LCD_Init+0x3c18>)
 8005a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0a:	615a      	str	r2, [r3, #20]
 8005a0c:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <LCD_Init+0x3c1c>)
 8005a0e:	2215      	movs	r2, #21
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <LCD_Init+0x3c18>)
 8005a14:	2280      	movs	r2, #128	; 0x80
 8005a16:	615a      	str	r2, [r3, #20]
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <LCD_Init+0x3c18>)
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	611a      	str	r2, [r3, #16]
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <LCD_Init+0x3c18>)
 8005a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a24:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a26:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <LCD_Init+0x3c18>)
 8005a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a2c:	611a      	str	r2, [r3, #16]
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <LCD_Init+0x3c18>)
 8005a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a34:	615a      	str	r2, [r3, #20]
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <LCD_Init+0x3c1c>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <LCD_Init+0x3c18>)
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <LCD_Init+0x3c18>)
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	611a      	str	r2, [r3, #16]
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <LCD_Init+0x3c18>)
 8005a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <LCD_Init+0x3c18>)
 8005a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a56:	611a      	str	r2, [r3, #16]
 8005a58:	4b01      	ldr	r3, [pc, #4]	; (8005a60 <LCD_Init+0x3c18>)
 8005a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5e:	e003      	b.n	8005a68 <LCD_Init+0x3c20>
 8005a60:	40011000 	.word	0x40011000
 8005a64:	40010c00 	.word	0x40010c00
 8005a68:	615a      	str	r2, [r3, #20]
 8005a6a:	4b8b      	ldr	r3, [pc, #556]	; (8005c98 <LCD_Init+0x3e50>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	4b8a      	ldr	r3, [pc, #552]	; (8005c9c <LCD_Init+0x3e54>)
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	615a      	str	r2, [r3, #20]
 8005a76:	4b89      	ldr	r3, [pc, #548]	; (8005c9c <LCD_Init+0x3e54>)
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	611a      	str	r2, [r3, #16]
 8005a7c:	4b87      	ldr	r3, [pc, #540]	; (8005c9c <LCD_Init+0x3e54>)
 8005a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a82:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005a84:	20f0      	movs	r0, #240	; 0xf0
 8005a86:	f7fa fee7 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005a8a:	4b84      	ldr	r3, [pc, #528]	; (8005c9c <LCD_Init+0x3e54>)
 8005a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	4b82      	ldr	r3, [pc, #520]	; (8005c9c <LCD_Init+0x3e54>)
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	4b7f      	ldr	r3, [pc, #508]	; (8005c98 <LCD_Init+0x3e50>)
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	4b7e      	ldr	r3, [pc, #504]	; (8005c9c <LCD_Init+0x3e54>)
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	615a      	str	r2, [r3, #20]
 8005aa6:	4b7d      	ldr	r3, [pc, #500]	; (8005c9c <LCD_Init+0x3e54>)
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	611a      	str	r2, [r3, #16]
 8005aac:	4b7b      	ldr	r3, [pc, #492]	; (8005c9c <LCD_Init+0x3e54>)
 8005aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005ab4:	2029      	movs	r0, #41	; 0x29
 8005ab6:	f7fa fecf 	bl	8000858 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005aba:	20d0      	movs	r0, #208	; 0xd0
 8005abc:	f7fa fecc 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005ac0:	4b76      	ldr	r3, [pc, #472]	; (8005c9c <LCD_Init+0x3e54>)
 8005ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac6:	611a      	str	r2, [r3, #16]
 8005ac8:	4b74      	ldr	r3, [pc, #464]	; (8005c9c <LCD_Init+0x3e54>)
 8005aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ace:	615a      	str	r2, [r3, #20]
 8005ad0:	4b71      	ldr	r3, [pc, #452]	; (8005c98 <LCD_Init+0x3e50>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	4b71      	ldr	r3, [pc, #452]	; (8005c9c <LCD_Init+0x3e54>)
 8005ad8:	2280      	movs	r2, #128	; 0x80
 8005ada:	615a      	str	r2, [r3, #20]
 8005adc:	4b6f      	ldr	r3, [pc, #444]	; (8005c9c <LCD_Init+0x3e54>)
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	4b6e      	ldr	r3, [pc, #440]	; (8005c9c <LCD_Init+0x3e54>)
 8005ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae8:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005aea:	20be      	movs	r0, #190	; 0xbe
 8005aec:	f7fa feb4 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005af0:	4b6a      	ldr	r3, [pc, #424]	; (8005c9c <LCD_Init+0x3e54>)
 8005af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af6:	611a      	str	r2, [r3, #16]
 8005af8:	4b68      	ldr	r3, [pc, #416]	; (8005c9c <LCD_Init+0x3e54>)
 8005afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afe:	615a      	str	r2, [r3, #20]
 8005b00:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <LCD_Init+0x3e50>)
 8005b02:	2205      	movs	r2, #5
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	4b65      	ldr	r3, [pc, #404]	; (8005c9c <LCD_Init+0x3e54>)
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	615a      	str	r2, [r3, #20]
 8005b0c:	4b63      	ldr	r3, [pc, #396]	; (8005c9c <LCD_Init+0x3e54>)
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	611a      	str	r2, [r3, #16]
 8005b12:	4b62      	ldr	r3, [pc, #392]	; (8005c9c <LCD_Init+0x3e54>)
 8005b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b18:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005b1a:	4b60      	ldr	r3, [pc, #384]	; (8005c9c <LCD_Init+0x3e54>)
 8005b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	4b5e      	ldr	r3, [pc, #376]	; (8005c9c <LCD_Init+0x3e54>)
 8005b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b28:	615a      	str	r2, [r3, #20]
 8005b2a:	4b5b      	ldr	r3, [pc, #364]	; (8005c98 <LCD_Init+0x3e50>)
 8005b2c:	22fe      	movs	r2, #254	; 0xfe
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	4b5a      	ldr	r3, [pc, #360]	; (8005c9c <LCD_Init+0x3e54>)
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	615a      	str	r2, [r3, #20]
 8005b36:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <LCD_Init+0x3e54>)
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	611a      	str	r2, [r3, #16]
 8005b3c:	4b57      	ldr	r3, [pc, #348]	; (8005c9c <LCD_Init+0x3e54>)
 8005b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005b44:	4b55      	ldr	r3, [pc, #340]	; (8005c9c <LCD_Init+0x3e54>)
 8005b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4b53      	ldr	r3, [pc, #332]	; (8005c9c <LCD_Init+0x3e54>)
 8005b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b52:	615a      	str	r2, [r3, #20]
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <LCD_Init+0x3e50>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	4b50      	ldr	r3, [pc, #320]	; (8005c9c <LCD_Init+0x3e54>)
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	615a      	str	r2, [r3, #20]
 8005b60:	4b4e      	ldr	r3, [pc, #312]	; (8005c9c <LCD_Init+0x3e54>)
 8005b62:	2280      	movs	r2, #128	; 0x80
 8005b64:	611a      	str	r2, [r3, #16]
 8005b66:	4b4d      	ldr	r3, [pc, #308]	; (8005c9c <LCD_Init+0x3e54>)
 8005b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005b6e:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <LCD_Init+0x3e54>)
 8005b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	4b49      	ldr	r3, [pc, #292]	; (8005c9c <LCD_Init+0x3e54>)
 8005b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7c:	615a      	str	r2, [r3, #20]
 8005b7e:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <LCD_Init+0x3e50>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	4b45      	ldr	r3, [pc, #276]	; (8005c9c <LCD_Init+0x3e54>)
 8005b86:	2280      	movs	r2, #128	; 0x80
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	4b44      	ldr	r3, [pc, #272]	; (8005c9c <LCD_Init+0x3e54>)
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	611a      	str	r2, [r3, #16]
 8005b90:	4b42      	ldr	r3, [pc, #264]	; (8005c9c <LCD_Init+0x3e54>)
 8005b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005b98:	4b40      	ldr	r3, [pc, #256]	; (8005c9c <LCD_Init+0x3e54>)
 8005b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9e:	611a      	str	r2, [r3, #16]
 8005ba0:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <LCD_Init+0x3e54>)
 8005ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba6:	615a      	str	r2, [r3, #20]
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <LCD_Init+0x3e50>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <LCD_Init+0x3e54>)
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	615a      	str	r2, [r3, #20]
 8005bb4:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <LCD_Init+0x3e54>)
 8005bb6:	2280      	movs	r2, #128	; 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <LCD_Init+0x3e54>)
 8005bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005bc2:	4b36      	ldr	r3, [pc, #216]	; (8005c9c <LCD_Init+0x3e54>)
 8005bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc8:	611a      	str	r2, [r3, #16]
 8005bca:	4b34      	ldr	r3, [pc, #208]	; (8005c9c <LCD_Init+0x3e54>)
 8005bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd0:	615a      	str	r2, [r3, #20]
 8005bd2:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <LCD_Init+0x3e50>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <LCD_Init+0x3e54>)
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
 8005bde:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <LCD_Init+0x3e54>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	611a      	str	r2, [r3, #16]
 8005be4:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <LCD_Init+0x3e54>)
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005bec:	20b8      	movs	r0, #184	; 0xb8
 8005bee:	f7fa fe33 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <LCD_Init+0x3e54>)
 8005bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf8:	611a      	str	r2, [r3, #16]
 8005bfa:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <LCD_Init+0x3e54>)
 8005bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c00:	615a      	str	r2, [r3, #20]
 8005c02:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <LCD_Init+0x3e50>)
 8005c04:	2203      	movs	r2, #3
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <LCD_Init+0x3e54>)
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	615a      	str	r2, [r3, #20]
 8005c0e:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <LCD_Init+0x3e54>)
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	611a      	str	r2, [r3, #16]
 8005c14:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <LCD_Init+0x3e54>)
 8005c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <LCD_Init+0x3e54>)
 8005c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c22:	611a      	str	r2, [r3, #16]
 8005c24:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <LCD_Init+0x3e54>)
 8005c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2a:	615a      	str	r2, [r3, #20]
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <LCD_Init+0x3e50>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <LCD_Init+0x3e54>)
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <LCD_Init+0x3e54>)
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	611a      	str	r2, [r3, #16]
 8005c3e:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <LCD_Init+0x3e54>)
 8005c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c44:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005c46:	20ba      	movs	r0, #186	; 0xba
 8005c48:	f7fa fe06 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <LCD_Init+0x3e54>)
 8005c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c52:	611a      	str	r2, [r3, #16]
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <LCD_Init+0x3e54>)
 8005c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <LCD_Init+0x3e50>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <LCD_Init+0x3e54>)
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <LCD_Init+0x3e54>)
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	611a      	str	r2, [r3, #16]
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <LCD_Init+0x3e54>)
 8005c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c74:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005c76:	2064      	movs	r0, #100	; 0x64
 8005c78:	f7fb ff36 	bl	8001ae8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f7fb ffd7 	bl	8001c30 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <LCD_Init+0x3e58>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005c88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c8c:	f000 f80a 	bl	8005ca4 <LCD_Clear>
}
 8005c90:	bf00      	nop
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40010c00 	.word	0x40010c00
 8005c9c:	40011000 	.word	0x40011000
 8005ca0:	422201a8 	.word	0x422201a8

08005ca4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	; (8005d5c <LCD_Clear+0xb8>)
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005cb8:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <LCD_Clear+0xb8>)
 8005cba:	885b      	ldrh	r3, [r3, #2]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	fb02 f303 	mul.w	r3, r2, r3
 8005cc4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005cc6:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <LCD_Clear+0xb8>)
 8005cc8:	889b      	ldrh	r3, [r3, #4]
 8005cca:	f646 0204 	movw	r2, #26628	; 0x6804
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d11a      	bne.n	8005d08 <LCD_Clear+0x64>
 8005cd2:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <LCD_Clear+0xb8>)
 8005cd4:	799b      	ldrb	r3, [r3, #6]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d116      	bne.n	8005d08 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005cda:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <LCD_Clear+0xb8>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <LCD_Clear+0xb8>)
 8005ce2:	222a      	movs	r2, #42	; 0x2a
 8005ce4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <LCD_Clear+0xb8>)
 8005ce8:	222b      	movs	r2, #43	; 0x2b
 8005cea:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005cec:	2100      	movs	r1, #0
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f7fa fe84 	bl	80009fc <LCD_SetCursor>
		lcddev.dir = 1;
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <LCD_Clear+0xb8>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005cfa:	4b18      	ldr	r3, [pc, #96]	; (8005d5c <LCD_Clear+0xb8>)
 8005cfc:	222b      	movs	r2, #43	; 0x2b
 8005cfe:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005d00:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <LCD_Clear+0xb8>)
 8005d02:	222a      	movs	r2, #42	; 0x2a
 8005d04:	819a      	strh	r2, [r3, #12]
 8005d06:	e003      	b.n	8005d10 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005d08:	2100      	movs	r1, #0
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f7fa fe76 	bl	80009fc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005d10:	f7fa fe68 	bl	80009e4 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e017      	b.n	8005d4a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <LCD_Clear+0xbc>)
 8005d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d20:	611a      	str	r2, [r3, #16]
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <LCD_Clear+0xbc>)
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	615a      	str	r2, [r3, #20]
 8005d2a:	4a0e      	ldr	r2, [pc, #56]	; (8005d64 <LCD_Clear+0xc0>)
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	60d3      	str	r3, [r2, #12]
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <LCD_Clear+0xbc>)
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	615a      	str	r2, [r3, #20]
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <LCD_Clear+0xbc>)
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	611a      	str	r2, [r3, #16]
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <LCD_Clear+0xbc>)
 8005d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d42:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3e3      	bcc.n	8005d1a <LCD_Clear+0x76>
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200010cc 	.word	0x200010cc
 8005d60:	40011000 	.word	0x40011000
 8005d64:	40010c00 	.word	0x40010c00

08005d68 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4623      	mov	r3, r4
 8005d78:	80fb      	strh	r3, [r7, #6]
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	80bb      	strh	r3, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]
 8005d82:	4613      	mov	r3, r2
 8005d84:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005d86:	88bb      	ldrh	r3, [r7, #4]
 8005d88:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005d8a:	78bb      	ldrb	r3, [r7, #2]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	78bb      	ldrb	r3, [r7, #2]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bf14      	ite	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	2300      	moveq	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	78ba      	ldrb	r2, [r7, #2]
 8005daa:	0852      	lsrs	r2, r2, #1
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	3b20      	subs	r3, #32
 8005db8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005dba:	2300      	movs	r3, #0
 8005dbc:	737b      	strb	r3, [r7, #13]
 8005dbe:	e069      	b.n	8005e94 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005dc0:	78bb      	ldrb	r3, [r7, #2]
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d10b      	bne.n	8005dde <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	7b79      	ldrb	r1, [r7, #13]
 8005dca:	4838      	ldr	r0, [pc, #224]	; (8005eac <LCD_ShowChar+0x144>)
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4403      	add	r3, r0
 8005dd6:	440b      	add	r3, r1
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e019      	b.n	8005e12 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005dde:	78bb      	ldrb	r3, [r7, #2]
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d108      	bne.n	8005df6 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	7b7b      	ldrb	r3, [r7, #13]
 8005de8:	4931      	ldr	r1, [pc, #196]	; (8005eb0 <LCD_ShowChar+0x148>)
 8005dea:	0112      	lsls	r2, r2, #4
 8005dec:	440a      	add	r2, r1
 8005dee:	4413      	add	r3, r2
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	73fb      	strb	r3, [r7, #15]
 8005df4:	e00d      	b.n	8005e12 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005df6:	78bb      	ldrb	r3, [r7, #2]
 8005df8:	2b18      	cmp	r3, #24
 8005dfa:	d150      	bne.n	8005e9e <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	7b79      	ldrb	r1, [r7, #13]
 8005e00:	482c      	ldr	r0, [pc, #176]	; (8005eb4 <LCD_ShowChar+0x14c>)
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4403      	add	r3, r0
 8005e0c:	440b      	add	r3, r1
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005e12:	2300      	movs	r3, #0
 8005e14:	73bb      	strb	r3, [r7, #14]
 8005e16:	e035      	b.n	8005e84 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da07      	bge.n	8005e30 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <LCD_ShowChar+0x150>)
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	88b9      	ldrh	r1, [r7, #4]
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fb fbc5 	bl	80015b8 <LCD_Fast_DrawPoint>
 8005e2e:	e00a      	b.n	8005e46 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005e30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d106      	bne.n	8005e46 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005e38:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <LCD_ShowChar+0x154>)
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	88b9      	ldrh	r1, [r7, #4]
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb fbb9 	bl	80015b8 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
			y++;
 8005e4c:	88bb      	ldrh	r3, [r7, #4]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <LCD_ShowChar+0x158>)
 8005e54:	885b      	ldrh	r3, [r3, #2]
 8005e56:	88ba      	ldrh	r2, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d222      	bcs.n	8005ea2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005e5c:	88ba      	ldrh	r2, [r7, #4]
 8005e5e:	897b      	ldrh	r3, [r7, #10]
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	78bb      	ldrb	r3, [r7, #2]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d10a      	bne.n	8005e7e <LCD_ShowChar+0x116>
				y = y0;
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	80bb      	strh	r3, [r7, #4]
				x++;
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005e72:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <LCD_ShowChar+0x158>)
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d307      	bcc.n	8005e8c <LCD_ShowChar+0x124>
					return;	//超区域了
 8005e7c:	e012      	b.n	8005ea4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	3301      	adds	r3, #1
 8005e82:	73bb      	strb	r3, [r7, #14]
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2b07      	cmp	r3, #7
 8005e88:	d9c6      	bls.n	8005e18 <LCD_ShowChar+0xb0>
 8005e8a:	e000      	b.n	8005e8e <LCD_ShowChar+0x126>
				break;
 8005e8c:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005e8e:	7b7b      	ldrb	r3, [r7, #13]
 8005e90:	3301      	adds	r3, #1
 8005e92:	737b      	strb	r3, [r7, #13]
 8005e94:	7b7a      	ldrb	r2, [r7, #13]
 8005e96:	7a7b      	ldrb	r3, [r7, #9]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d391      	bcc.n	8005dc0 <LCD_ShowChar+0x58>
 8005e9c:	e002      	b.n	8005ea4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005ea2:	bf00      	nop
			}
		}
	}
}
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd90      	pop	{r4, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	0800b088 	.word	0x0800b088
 8005eb0:	0800b4fc 	.word	0x0800b4fc
 8005eb4:	0800baec 	.word	0x0800baec
 8005eb8:	20000098 	.word	0x20000098
 8005ebc:	20000000 	.word	0x20000000
 8005ec0:	200010cc 	.word	0x200010cc

08005ec4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	80fb      	strh	r3, [r7, #6]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80bb      	strh	r3, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	807b      	strh	r3, [r7, #2]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	73fb      	strb	r3, [r7, #15]
	width += x;
 8005ee6:	887a      	ldrh	r2, [r7, #2]
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	4413      	add	r3, r2
 8005eec:	807b      	strh	r3, [r7, #2]
	height += y;
 8005eee:	883a      	ldrh	r2, [r7, #0]
 8005ef0:	88bb      	ldrh	r3, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005ef6:	e024      	b.n	8005f42 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	887b      	ldrh	r3, [r7, #2]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d307      	bcc.n	8005f10 <LCD_ShowString+0x4c>
			x = x0;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	80fb      	strh	r3, [r7, #6]
			y += size;
 8005f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	88bb      	ldrh	r3, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8005f10:	88ba      	ldrh	r2, [r7, #4]
 8005f12:	883b      	ldrh	r3, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d21d      	bcs.n	8005f54 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	781a      	ldrb	r2, [r3, #0]
 8005f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f20:	88b9      	ldrh	r1, [r7, #4]
 8005f22:	88f8      	ldrh	r0, [r7, #6]
 8005f24:	2400      	movs	r4, #0
 8005f26:	9400      	str	r4, [sp, #0]
 8005f28:	f7ff ff1e 	bl	8005d68 <LCD_ShowChar>
		x += size / 2;
 8005f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	4413      	add	r3, r2
 8005f3a:	80fb      	strh	r3, [r7, #6]
		p++;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	3301      	adds	r3, #1
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b7e      	cmp	r3, #126	; 0x7e
 8005f48:	d805      	bhi.n	8005f56 <LCD_ShowString+0x92>
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b1f      	cmp	r3, #31
 8005f50:	d8d2      	bhi.n	8005ef8 <LCD_ShowString+0x34>
	}
}
 8005f52:	e000      	b.n	8005f56 <LCD_ShowString+0x92>
			break;	//退出
 8005f54:	bf00      	nop
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}
	...

08005f60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005f64:	f001 fc34 	bl	80077d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005f68:	f000 f83e 	bl	8005fe8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	LCD_Init();
 8005f6c:	f7fb ff6c 	bl	8001e48 <LCD_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005f70:	f000 f9e8 	bl	8006344 <MX_GPIO_Init>
	MX_DMA_Init();
 8005f74:	f000 f9c0 	bl	80062f8 <MX_DMA_Init>
	MX_TIM3_Init();
 8005f78:	f000 f91c 	bl	80061b4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8005f7c:	f000 f968 	bl	8006250 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8005f80:	f000 f990 	bl	80062a4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8005f84:	f000 f8c8 	bl	8006118 <MX_TIM2_Init>
	MX_TIM1_Init();
 8005f88:	f000 f874 	bl	8006074 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <main+0x74>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <main+0x74>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0210 	orr.w	r2, r2, #16
 8005f9a:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 8005f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa0:	490d      	ldr	r1, [pc, #52]	; (8005fd8 <main+0x78>)
 8005fa2:	480c      	ldr	r0, [pc, #48]	; (8005fd4 <main+0x74>)
 8005fa4:	f003 fd5c 	bl	8009a60 <HAL_UART_Receive_DMA>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <main+0x7c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <main+0x7c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0210 	orr.w	r2, r2, #16
 8005fb6:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 8005fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fbc:	4908      	ldr	r1, [pc, #32]	; (8005fe0 <main+0x80>)
 8005fbe:	4807      	ldr	r0, [pc, #28]	; (8005fdc <main+0x7c>)
 8005fc0:	f003 fd4e 	bl	8009a60 <HAL_UART_Receive_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (mode == 1) {
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <main+0x84>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d1fb      	bne.n	8005fc4 <main+0x64>
			Get_Answer();
 8005fcc:	f000 fc28 	bl	8006820 <Get_Answer>
		if (mode == 1) {
 8005fd0:	e7f8      	b.n	8005fc4 <main+0x64>
 8005fd2:	bf00      	nop
 8005fd4:	200021ac 	.word	0x200021ac
 8005fd8:	20001168 	.word	0x20001168
 8005fdc:	20002a7c 	.word	0x20002a7c
 8005fe0:	20002234 	.word	0x20002234
 8005fe4:	200010ac 	.word	0x200010ac

08005fe8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b090      	sub	sp, #64	; 0x40
 8005fec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005fee:	f107 0318 	add.w	r3, r7, #24
 8005ff2:	2228      	movs	r2, #40	; 0x28
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f004 f9e4 	bl	800a3c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005ffc:	1d3b      	adds	r3, r7, #4
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	609a      	str	r2, [r3, #8]
 8006006:	60da      	str	r2, [r3, #12]
 8006008:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800600a:	2301      	movs	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800600e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006012:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006014:	2300      	movs	r3, #0
 8006016:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006018:	2301      	movs	r3, #1
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800601c:	2302      	movs	r3, #2
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006024:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006026:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800602c:	f107 0318 	add.w	r3, r7, #24
 8006030:	4618      	mov	r0, r3
 8006032:	f002 fbbf 	bl	80087b4 <HAL_RCC_OscConfig>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <SystemClock_Config+0x58>
		Error_Handler();
 800603c:	f000 fc5a 	bl	80068f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006040:	230f      	movs	r3, #15
 8006042:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006044:	2302      	movs	r3, #2
 8006046:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800604c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006050:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	2102      	movs	r1, #2
 800605a:	4618      	mov	r0, r3
 800605c:	f002 fe2a 	bl	8008cb4 <HAL_RCC_ClockConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <SystemClock_Config+0x82>
		Error_Handler();
 8006066:	f000 fc45 	bl	80068f4 <Error_Handler>
	}
}
 800606a:	bf00      	nop
 800606c:	3740      	adds	r7, #64	; 0x40
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800607a:	f107 0308 	add.w	r3, r7, #8
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	609a      	str	r2, [r3, #8]
 8006086:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006088:	463b      	mov	r3, r7
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8006090:	4b1f      	ldr	r3, [pc, #124]	; (8006110 <MX_TIM1_Init+0x9c>)
 8006092:	4a20      	ldr	r2, [pc, #128]	; (8006114 <MX_TIM1_Init+0xa0>)
 8006094:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 9999;
 8006096:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <MX_TIM1_Init+0x9c>)
 8006098:	f242 720f 	movw	r2, #9999	; 0x270f
 800609c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800609e:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7199;
 80060a4:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060a6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80060aa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060ac:	4b18      	ldr	r3, [pc, #96]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80060b2:	4b17      	ldr	r3, [pc, #92]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060b8:	4b15      	ldr	r3, [pc, #84]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80060be:	4814      	ldr	r0, [pc, #80]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060c0:	f002 ff92 	bl	8008fe8 <HAL_TIM_Base_Init>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <MX_TIM1_Init+0x5a>
		Error_Handler();
 80060ca:	f000 fc13 	bl	80068f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80060d4:	f107 0308 	add.w	r3, r7, #8
 80060d8:	4619      	mov	r1, r3
 80060da:	480d      	ldr	r0, [pc, #52]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060dc:	f003 f96a 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <MX_TIM1_Init+0x76>
		Error_Handler();
 80060e6:	f000 fc05 	bl	80068f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060ea:	2300      	movs	r3, #0
 80060ec:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80060f2:	463b      	mov	r3, r7
 80060f4:	4619      	mov	r1, r3
 80060f6:	4806      	ldr	r0, [pc, #24]	; (8006110 <MX_TIM1_Init+0x9c>)
 80060f8:	f003 fb54 	bl	80097a4 <HAL_TIMEx_MasterConfigSynchronization>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 8006102:	f000 fbf7 	bl	80068f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	200021ec 	.word	0x200021ec
 8006114:	40012c00 	.word	0x40012c00

08006118 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	605a      	str	r2, [r3, #4]
 8006128:	609a      	str	r2, [r3, #8]
 800612a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800612c:	463b      	mov	r3, r7
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8006134:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <MX_TIM2_Init+0x98>)
 8006136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800613a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7199;
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <MX_TIM2_Init+0x98>)
 800613e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006142:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <MX_TIM2_Init+0x98>)
 8006146:	2200      	movs	r2, #0
 8006148:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999;
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <MX_TIM2_Init+0x98>)
 800614c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006150:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <MX_TIM2_Init+0x98>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <MX_TIM2_Init+0x98>)
 800615a:	2280      	movs	r2, #128	; 0x80
 800615c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800615e:	4814      	ldr	r0, [pc, #80]	; (80061b0 <MX_TIM2_Init+0x98>)
 8006160:	f002 ff42 	bl	8008fe8 <HAL_TIM_Base_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <MX_TIM2_Init+0x56>
		Error_Handler();
 800616a:	f000 fbc3 	bl	80068f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800616e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006172:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	4619      	mov	r1, r3
 800617a:	480d      	ldr	r0, [pc, #52]	; (80061b0 <MX_TIM2_Init+0x98>)
 800617c:	f003 f91a 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <MX_TIM2_Init+0x72>
		Error_Handler();
 8006186:	f000 fbb5 	bl	80068f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800618e:	2300      	movs	r3, #0
 8006190:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8006192:	463b      	mov	r3, r7
 8006194:	4619      	mov	r1, r3
 8006196:	4806      	ldr	r0, [pc, #24]	; (80061b0 <MX_TIM2_Init+0x98>)
 8006198:	f003 fb04 	bl	80097a4 <HAL_TIMEx_MasterConfigSynchronization>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80061a2:	f000 fba7 	bl	80068f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80061a6:	bf00      	nop
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20002a34 	.word	0x20002a34

080061b4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	609a      	str	r2, [r3, #8]
 80061c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80061c8:	463b      	mov	r3, r7
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <MX_TIM3_Init+0x94>)
 80061d2:	4a1e      	ldr	r2, [pc, #120]	; (800624c <MX_TIM3_Init+0x98>)
 80061d4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7199;
 80061d6:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <MX_TIM3_Init+0x94>)
 80061d8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80061dc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <MX_TIM3_Init+0x94>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 80061e4:	4b18      	ldr	r3, [pc, #96]	; (8006248 <MX_TIM3_Init+0x94>)
 80061e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80061ea:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061ec:	4b16      	ldr	r3, [pc, #88]	; (8006248 <MX_TIM3_Init+0x94>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <MX_TIM3_Init+0x94>)
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80061f8:	4813      	ldr	r0, [pc, #76]	; (8006248 <MX_TIM3_Init+0x94>)
 80061fa:	f002 fef5 	bl	8008fe8 <HAL_TIM_Base_Init>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_TIM3_Init+0x54>
		Error_Handler();
 8006204:	f000 fb76 	bl	80068f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800620c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4619      	mov	r1, r3
 8006214:	480c      	ldr	r0, [pc, #48]	; (8006248 <MX_TIM3_Init+0x94>)
 8006216:	f003 f8cd 	bl	80093b4 <HAL_TIM_ConfigClockSource>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <MX_TIM3_Init+0x70>
		Error_Handler();
 8006220:	f000 fb68 	bl	80068f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006224:	2300      	movs	r3, #0
 8006226:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006228:	2300      	movs	r3, #0
 800622a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800622c:	463b      	mov	r3, r7
 800622e:	4619      	mov	r1, r3
 8006230:	4805      	ldr	r0, [pc, #20]	; (8006248 <MX_TIM3_Init+0x94>)
 8006232:	f003 fab7 	bl	80097a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800623c:	f000 fb5a 	bl	80068f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20001120 	.word	0x20001120
 800624c:	40000400 	.word	0x40000400

08006250 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <MX_USART1_UART_Init+0x4c>)
 8006256:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <MX_USART1_UART_Init+0x50>)
 8006258:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <MX_USART1_UART_Init+0x4c>)
 800625c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006260:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <MX_USART1_UART_Init+0x4c>)
 8006264:	2200      	movs	r2, #0
 8006266:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <MX_USART1_UART_Init+0x4c>)
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <MX_USART1_UART_Init+0x4c>)
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006274:	4b09      	ldr	r3, [pc, #36]	; (800629c <MX_USART1_UART_Init+0x4c>)
 8006276:	220c      	movs	r2, #12
 8006278:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <MX_USART1_UART_Init+0x4c>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <MX_USART1_UART_Init+0x4c>)
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8006286:	4805      	ldr	r0, [pc, #20]	; (800629c <MX_USART1_UART_Init+0x4c>)
 8006288:	f003 fb0a 	bl	80098a0 <HAL_UART_Init>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8006292:	f000 fb2f 	bl	80068f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8006296:	bf00      	nop
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200021ac 	.word	0x200021ac
 80062a0:	40013800 	.word	0x40013800

080062a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <MX_USART2_UART_Init+0x50>)
 80062ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062b6:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062ca:	220c      	movs	r2, #12
 80062cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062ce:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80062da:	4805      	ldr	r0, [pc, #20]	; (80062f0 <MX_USART2_UART_Init+0x4c>)
 80062dc:	f003 fae0 	bl	80098a0 <HAL_UART_Init>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80062e6:	f000 fb05 	bl	80068f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20002a7c 	.word	0x20002a7c
 80062f4:	40004400 	.word	0x40004400

080062f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <MX_DMA_Init+0x48>)
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <MX_DMA_Init+0x48>)
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	6153      	str	r3, [r2, #20]
 800630a:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <MX_DMA_Init+0x48>)
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	607b      	str	r3, [r7, #4]
 8006314:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006316:	2200      	movs	r2, #0
 8006318:	2100      	movs	r1, #0
 800631a:	200f      	movs	r0, #15
 800631c:	f001 fbb5 	bl	8007a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006320:	200f      	movs	r0, #15
 8006322:	f001 fbce 	bl	8007ac2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	2010      	movs	r0, #16
 800632c:	f001 fbad 	bl	8007a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8006330:	2010      	movs	r0, #16
 8006332:	f001 fbc6 	bl	8007ac2 <HAL_NVIC_EnableIRQ>

}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000

08006344 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800634a:	f107 0310 	add.w	r3, r7, #16
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	609a      	str	r2, [r3, #8]
 8006356:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006358:	4b3c      	ldr	r3, [pc, #240]	; (800644c <MX_GPIO_Init+0x108>)
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	4a3b      	ldr	r2, [pc, #236]	; (800644c <MX_GPIO_Init+0x108>)
 800635e:	f043 0320 	orr.w	r3, r3, #32
 8006362:	6193      	str	r3, [r2, #24]
 8006364:	4b39      	ldr	r3, [pc, #228]	; (800644c <MX_GPIO_Init+0x108>)
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <MX_GPIO_Init+0x108>)
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	4a35      	ldr	r2, [pc, #212]	; (800644c <MX_GPIO_Init+0x108>)
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	6193      	str	r3, [r2, #24]
 800637c:	4b33      	ldr	r3, [pc, #204]	; (800644c <MX_GPIO_Init+0x108>)
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006388:	4b30      	ldr	r3, [pc, #192]	; (800644c <MX_GPIO_Init+0x108>)
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	4a2f      	ldr	r2, [pc, #188]	; (800644c <MX_GPIO_Init+0x108>)
 800638e:	f043 0310 	orr.w	r3, r3, #16
 8006392:	6193      	str	r3, [r2, #24]
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <MX_GPIO_Init+0x108>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a6:	482a      	ldr	r0, [pc, #168]	; (8006450 <MX_GPIO_Init+0x10c>)
 80063a8:	f002 f9d3 	bl	8008752 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80063ac:	2200      	movs	r2, #0
 80063ae:	2104      	movs	r1, #4
 80063b0:	4828      	ldr	r0, [pc, #160]	; (8006454 <MX_GPIO_Init+0x110>)
 80063b2:	f002 f9ce 	bl	8008752 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : KEY0_Pin */
	GPIO_InitStruct.Pin = KEY0_Pin;
 80063b6:	2320      	movs	r3, #32
 80063b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063ba:	4b27      	ldr	r3, [pc, #156]	; (8006458 <MX_GPIO_Init+0x114>)
 80063bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063be:	2301      	movs	r3, #1
 80063c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80063c2:	f107 0310 	add.w	r3, r7, #16
 80063c6:	4619      	mov	r1, r3
 80063c8:	4824      	ldr	r0, [pc, #144]	; (800645c <MX_GPIO_Init+0x118>)
 80063ca:	f002 f817 	bl	80083fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED0_Pin */
	GPIO_InitStruct.Pin = LED0_Pin;
 80063ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063dc:	2302      	movs	r3, #2
 80063de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80063e0:	f107 0310 	add.w	r3, r7, #16
 80063e4:	4619      	mov	r1, r3
 80063e6:	481a      	ldr	r0, [pc, #104]	; (8006450 <MX_GPIO_Init+0x10c>)
 80063e8:	f002 f808 	bl	80083fc <HAL_GPIO_Init>

	/*Configure GPIO pin : KEY1_Pin */
	GPIO_InitStruct.Pin = KEY1_Pin;
 80063ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063f2:	4b19      	ldr	r3, [pc, #100]	; (8006458 <MX_GPIO_Init+0x114>)
 80063f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063f6:	2301      	movs	r3, #1
 80063f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80063fa:	f107 0310 	add.w	r3, r7, #16
 80063fe:	4619      	mov	r1, r3
 8006400:	4813      	ldr	r0, [pc, #76]	; (8006450 <MX_GPIO_Init+0x10c>)
 8006402:	f001 fffb 	bl	80083fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8006406:	2304      	movs	r3, #4
 8006408:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800640a:	2301      	movs	r3, #1
 800640c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006412:	2302      	movs	r3, #2
 8006414:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8006416:	f107 0310 	add.w	r3, r7, #16
 800641a:	4619      	mov	r1, r3
 800641c:	480d      	ldr	r0, [pc, #52]	; (8006454 <MX_GPIO_Init+0x110>)
 800641e:	f001 ffed 	bl	80083fc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8006422:	2200      	movs	r2, #0
 8006424:	2102      	movs	r1, #2
 8006426:	2017      	movs	r0, #23
 8006428:	f001 fb2f 	bl	8007a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800642c:	2017      	movs	r0, #23
 800642e:	f001 fb48 	bl	8007ac2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8006432:	2200      	movs	r2, #0
 8006434:	2102      	movs	r1, #2
 8006436:	2028      	movs	r0, #40	; 0x28
 8006438:	f001 fb27 	bl	8007a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800643c:	2028      	movs	r0, #40	; 0x28
 800643e:	f001 fb40 	bl	8007ac2 <HAL_NVIC_EnableIRQ>

}
 8006442:	bf00      	nop
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000
 8006450:	40010800 	.word	0x40010800
 8006454:	40011400 	.word	0x40011400
 8006458:	10110000 	.word	0x10110000
 800645c:	40011000 	.word	0x40011000

08006460 <Show_Question>:

/* USER CODE BEGIN 4 */
void Show_Question() {
 8006460:	b580      	push	{r7, lr}
 8006462:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8006466:	af02      	add	r7, sp, #8
	LCD_Clear(WHITE);
 8006468:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800646c:	f7ff fc1a 	bl	8005ca4 <LCD_Clear>
	BACK_COLOR = WHITE;
 8006470:	4b6f      	ldr	r3, [pc, #444]	; (8006630 <Show_Question+0x1d0>)
 8006472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006476:	801a      	strh	r2, [r3, #0]

	//HAL_UART_Transmit(&huart1, received_Data, received_Length, 0xffff);
	int i;
	int question_length;
	for (i = 0; ; i++) {
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		if (received_Data[i] != '|') {
 800647e:	4a6d      	ldr	r2, [pc, #436]	; (8006634 <Show_Question+0x1d4>)
 8006480:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8006484:	4413      	add	r3, r2
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b7c      	cmp	r3, #124	; 0x7c
 800648a:	d00b      	beq.n	80064a4 <Show_Question+0x44>
			question[i] = received_Data[i];
 800648c:	4a69      	ldr	r2, [pc, #420]	; (8006634 <Show_Question+0x1d4>)
 800648e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8006492:	4413      	add	r3, r2
 8006494:	7819      	ldrb	r1, [r3, #0]
 8006496:	4a68      	ldr	r2, [pc, #416]	; (8006638 <Show_Question+0x1d8>)
 8006498:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800649c:	4413      	add	r3, r2
 800649e:	460a      	mov	r2, r1
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e01f      	b.n	80064e4 <Show_Question+0x84>
		} else {
			question_length = i + 1;
 80064a4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80064a8:	3301      	adds	r3, #1
 80064aa:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			break;
 80064ae:	bf00      	nop
		}
	}
	i++;
 80064b0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80064b4:	3301      	adds	r3, #1
 80064b6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

	LCD_ShowString(10, 90, 200, 24, 12, (uint8_t*) question);
 80064ba:	4b5f      	ldr	r3, [pc, #380]	; (8006638 <Show_Question+0x1d8>)
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	230c      	movs	r3, #12
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	2318      	movs	r3, #24
 80064c4:	22c8      	movs	r2, #200	; 0xc8
 80064c6:	215a      	movs	r1, #90	; 0x5a
 80064c8:	200a      	movs	r0, #10
 80064ca:	f7ff fcfb 	bl	8005ec4 <LCD_ShowString>
	char choice[1024] = { 0 };
 80064ce:	463b      	mov	r3, r7
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f003 ff71 	bl	800a3c4 <memset>
 80064e2:	e005      	b.n	80064f0 <Show_Question+0x90>
	for (i = 0; ; i++) {
 80064e4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80064e8:	3301      	adds	r3, #1
 80064ea:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		if (received_Data[i] != '|') {
 80064ee:	e7c6      	b.n	800647e <Show_Question+0x1e>
	for (; ; i++) {
		if (received_Data[i] != '|') {
 80064f0:	4a50      	ldr	r2, [pc, #320]	; (8006634 <Show_Question+0x1d4>)
 80064f2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80064f6:	4413      	add	r3, r2
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b7c      	cmp	r3, #124	; 0x7c
 80064fc:	d00c      	beq.n	8006518 <Show_Question+0xb8>
			choice[i - question_length] = received_Data[i];
 80064fe:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8006502:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	494a      	ldr	r1, [pc, #296]	; (8006634 <Show_Question+0x1d4>)
 800650a:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 800650e:	440a      	add	r2, r1
 8006510:	7811      	ldrb	r1, [r2, #0]
 8006512:	463a      	mov	r2, r7
 8006514:	54d1      	strb	r1, [r2, r3]
 8006516:	e011      	b.n	800653c <Show_Question+0xdc>
		} else {
			question_length = i + 1 - question_length;
 8006518:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			break;
 8006528:	bf00      	nop
		}
	}
	i++;
 800652a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800652e:	3301      	adds	r3, #1
 8006530:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	points = 0;
 8006534:	4b41      	ldr	r3, [pc, #260]	; (800663c <Show_Question+0x1dc>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e005      	b.n	8006548 <Show_Question+0xe8>
	for (; ; i++) {
 800653c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8006540:	3301      	adds	r3, #1
 8006542:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		if (received_Data[i] != '|') {
 8006546:	e7d3      	b.n	80064f0 <Show_Question+0x90>
	for (; ; i++) {
		if (received_Data[i] != '|') {
 8006548:	4a3a      	ldr	r2, [pc, #232]	; (8006634 <Show_Question+0x1d4>)
 800654a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800654e:	4413      	add	r3, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b7c      	cmp	r3, #124	; 0x7c
 8006554:	d01a      	beq.n	800658c <Show_Question+0x12c>
			points *= 10;
 8006556:	4b39      	ldr	r3, [pc, #228]	; (800663c <Show_Question+0x1dc>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	461a      	mov	r2, r3
 8006564:	4b35      	ldr	r3, [pc, #212]	; (800663c <Show_Question+0x1dc>)
 8006566:	601a      	str	r2, [r3, #0]
			points += received_Data[i] - '0';
 8006568:	4a32      	ldr	r2, [pc, #200]	; (8006634 <Show_Question+0x1d4>)
 800656a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <Show_Question+0x1dc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4413      	add	r3, r2
 800657c:	4a2f      	ldr	r2, [pc, #188]	; (800663c <Show_Question+0x1dc>)
 800657e:	6013      	str	r3, [r2, #0]
	for (; ; i++) {
 8006580:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8006584:	3301      	adds	r3, #1
 8006586:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		if (received_Data[i] != '|') {
 800658a:	e7dd      	b.n	8006548 <Show_Question+0xe8>
		} else {
			break;
 800658c:	bf00      	nop
		}
	}
	i++;
 800658e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8006592:	3301      	adds	r3, #1
 8006594:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	time_limit = 0;
 8006598:	4b29      	ldr	r3, [pc, #164]	; (8006640 <Show_Question+0x1e0>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
	for (; ; i++) {
		if (received_Data[i] != '|') {
 800659e:	4a25      	ldr	r2, [pc, #148]	; (8006634 <Show_Question+0x1d4>)
 80065a0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80065a4:	4413      	add	r3, r2
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b7c      	cmp	r3, #124	; 0x7c
 80065aa:	d01a      	beq.n	80065e2 <Show_Question+0x182>
			time_limit *= 10;
 80065ac:	4b24      	ldr	r3, [pc, #144]	; (8006640 <Show_Question+0x1e0>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b21      	ldr	r3, [pc, #132]	; (8006640 <Show_Question+0x1e0>)
 80065bc:	601a      	str	r2, [r3, #0]
			time_limit += received_Data[i] - '0';
 80065be:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <Show_Question+0x1d4>)
 80065c0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80065c4:	4413      	add	r3, r2
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80065cc:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <Show_Question+0x1e0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <Show_Question+0x1e0>)
 80065d4:	6013      	str	r3, [r2, #0]
	for (; ; i++) {
 80065d6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80065da:	3301      	adds	r3, #1
 80065dc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		if (received_Data[i] != '|') {
 80065e0:	e7dd      	b.n	800659e <Show_Question+0x13e>
		} else {
			break;
 80065e2:	bf00      	nop
		}
	}
	LCD_ShowString(10, 130, 200, 24, 12, (uint8_t*) choice);
 80065e4:	463b      	mov	r3, r7
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	230c      	movs	r3, #12
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2318      	movs	r3, #24
 80065ee:	22c8      	movs	r2, #200	; 0xc8
 80065f0:	2182      	movs	r1, #130	; 0x82
 80065f2:	200a      	movs	r0, #10
 80065f4:	f7ff fc66 	bl	8005ec4 <LCD_ShowString>
	HAL_UART_Transmit(&huart1, (uint8_t*) choice, question_length, 0xffff);
 80065f8:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	4639      	mov	r1, r7
 8006600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006604:	480f      	ldr	r0, [pc, #60]	; (8006644 <Show_Question+0x1e4>)
 8006606:	f003 f998 	bl	800993a <HAL_UART_Transmit>
	Display_Points(points);
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <Show_Question+0x1dc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f81c 	bl	800664c <Display_Points>
	Display_Time(time_limit);
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <Show_Question+0x1e0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f000 f85b 	bl	80066d4 <Display_Time>
	received_Length = 0;
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <Show_Question+0x1e8>)
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]

}
 8006624:	bf00      	nop
 8006626:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000000 	.word	0x20000000
 8006634:	2000009c 	.word	0x2000009c
 8006638:	200008a4 	.word	0x200008a4
 800663c:	200010a4 	.word	0x200010a4
 8006640:	200010a8 	.word	0x200010a8
 8006644:	200021ac 	.word	0x200021ac
 8006648:	2000089c 	.word	0x2000089c

0800664c <Display_Points>:

void Display_Points(int p) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	; 0x28
 8006650:	af02      	add	r7, sp, #8
 8006652:	6078      	str	r0, [r7, #4]
	char msg[20];
	sprintf(msg, "%d", p);
 8006654:	f107 030c 	add.w	r3, r7, #12
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4919      	ldr	r1, [pc, #100]	; (80066c0 <Display_Points+0x74>)
 800665c:	4618      	mov	r0, r3
 800665e:	f003 feb9 	bl	800a3d4 <siprintf>
	POINT_COLOR = BLACK;
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <Display_Points+0x78>)
 8006664:	2200      	movs	r2, #0
 8006666:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10, 10, 200, 24, 16, (uint8_t*) "Points Awarded: ");
 8006668:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <Display_Points+0x7c>)
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	2310      	movs	r3, #16
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2318      	movs	r3, #24
 8006672:	22c8      	movs	r2, #200	; 0xc8
 8006674:	210a      	movs	r1, #10
 8006676:	200a      	movs	r0, #10
 8006678:	f7ff fc24 	bl	8005ec4 <LCD_ShowString>
	POINT_COLOR = RED;
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <Display_Points+0x78>)
 800667e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006682:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(200, 10, 200, 24, 16, (uint8_t*) msg);
 8006684:	f107 030c 	add.w	r3, r7, #12
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	2310      	movs	r3, #16
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2318      	movs	r3, #24
 8006690:	22c8      	movs	r2, #200	; 0xc8
 8006692:	210a      	movs	r1, #10
 8006694:	20c8      	movs	r0, #200	; 0xc8
 8006696:	f7ff fc15 	bl	8005ec4 <LCD_ShowString>
	sprintf(msg, "\r%d", p);
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	490a      	ldr	r1, [pc, #40]	; (80066cc <Display_Points+0x80>)
 80066a2:	4618      	mov	r0, r3
 80066a4:	f003 fe96 	bl	800a3d4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, 20, 0xffff);
 80066a8:	f107 010c 	add.w	r1, r7, #12
 80066ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066b0:	2214      	movs	r2, #20
 80066b2:	4807      	ldr	r0, [pc, #28]	; (80066d0 <Display_Points+0x84>)
 80066b4:	f003 f941 	bl	800993a <HAL_UART_Transmit>
}
 80066b8:	bf00      	nop
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	0800acb0 	.word	0x0800acb0
 80066c4:	20000098 	.word	0x20000098
 80066c8:	0800acb4 	.word	0x0800acb4
 80066cc:	0800acc8 	.word	0x0800acc8
 80066d0:	200021ac 	.word	0x200021ac

080066d4 <Display_Time>:

void Display_Time(int t) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
	char msg[20];
	sprintf(msg, "%d s", t);
 80066dc:	f107 030c 	add.w	r3, r7, #12
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4912      	ldr	r1, [pc, #72]	; (800672c <Display_Time+0x58>)
 80066e4:	4618      	mov	r0, r3
 80066e6:	f003 fe75 	bl	800a3d4 <siprintf>
	POINT_COLOR = BLACK;
 80066ea:	4b11      	ldr	r3, [pc, #68]	; (8006730 <Display_Time+0x5c>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10, 45, 200, 24, 24, (uint8_t*) "Time Limit: ");
 80066f0:	4b10      	ldr	r3, [pc, #64]	; (8006734 <Display_Time+0x60>)
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	2318      	movs	r3, #24
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2318      	movs	r3, #24
 80066fa:	22c8      	movs	r2, #200	; 0xc8
 80066fc:	212d      	movs	r1, #45	; 0x2d
 80066fe:	200a      	movs	r0, #10
 8006700:	f7ff fbe0 	bl	8005ec4 <LCD_ShowString>
	POINT_COLOR = RED;
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <Display_Time+0x5c>)
 8006706:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800670a:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(150, 45, 200, 24, 24, (uint8_t*) msg);
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	2318      	movs	r3, #24
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2318      	movs	r3, #24
 8006718:	22c8      	movs	r2, #200	; 0xc8
 800671a:	212d      	movs	r1, #45	; 0x2d
 800671c:	2096      	movs	r0, #150	; 0x96
 800671e:	f7ff fbd1 	bl	8005ec4 <LCD_ShowString>
}
 8006722:	bf00      	nop
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	0800accc 	.word	0x0800accc
 8006730:	20000098 	.word	0x20000098
 8006734:	0800acd4 	.word	0x0800acd4

08006738 <Show_Feedback>:

void Show_Feedback() {
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af02      	add	r7, sp, #8
	LCD_Clear(WHITE);
 800673e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006742:	f7ff faaf 	bl	8005ca4 <LCD_Clear>
	BACK_COLOR = WHITE;
 8006746:	4b31      	ldr	r3, [pc, #196]	; (800680c <Show_Feedback+0xd4>)
 8006748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800674c:	801a      	strh	r2, [r3, #0]
	int i;
	int feedback_length;
	for (i = 0; i < received_Length; i++) {
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	e016      	b.n	8006782 <Show_Feedback+0x4a>
		if (received_Data[i] != '|') {
 8006754:	4a2e      	ldr	r2, [pc, #184]	; (8006810 <Show_Feedback+0xd8>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b7c      	cmp	r3, #124	; 0x7c
 800675e:	d009      	beq.n	8006774 <Show_Feedback+0x3c>
			feedback[i] = received_Data[i];
 8006760:	4a2b      	ldr	r2, [pc, #172]	; (8006810 <Show_Feedback+0xd8>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	7819      	ldrb	r1, [r3, #0]
 8006768:	4a2a      	ldr	r2, [pc, #168]	; (8006814 <Show_Feedback+0xdc>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	460a      	mov	r2, r1
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e003      	b.n	800677c <Show_Feedback+0x44>
		} else {
			feedback_length = i + 1;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3301      	adds	r3, #1
 8006778:	603b      	str	r3, [r7, #0]
			break;
 800677a:	e008      	b.n	800678e <Show_Feedback+0x56>
	for (i = 0; i < received_Length; i++) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3301      	adds	r3, #1
 8006780:	607b      	str	r3, [r7, #4]
 8006782:	4b25      	ldr	r3, [pc, #148]	; (8006818 <Show_Feedback+0xe0>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4293      	cmp	r3, r2
 800678c:	dbe2      	blt.n	8006754 <Show_Feedback+0x1c>
		}
	}
	i++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3301      	adds	r3, #1
 8006792:	607b      	str	r3, [r7, #4]
	points = 0;
 8006794:	4b21      	ldr	r3, [pc, #132]	; (800681c <Show_Feedback+0xe4>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
	for (; i < received_Length; i++) {
 800679a:	e01c      	b.n	80067d6 <Show_Feedback+0x9e>
		if (received_Data[i] != '|') {
 800679c:	4a1c      	ldr	r2, [pc, #112]	; (8006810 <Show_Feedback+0xd8>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4413      	add	r3, r2
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b7c      	cmp	r3, #124	; 0x7c
 80067a6:	d01d      	beq.n	80067e4 <Show_Feedback+0xac>
			points *= 10;
 80067a8:	4b1c      	ldr	r3, [pc, #112]	; (800681c <Show_Feedback+0xe4>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b19      	ldr	r3, [pc, #100]	; (800681c <Show_Feedback+0xe4>)
 80067b8:	601a      	str	r2, [r3, #0]
			points += received_Data[i] - '0';
 80067ba:	4a15      	ldr	r2, [pc, #84]	; (8006810 <Show_Feedback+0xd8>)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <Show_Feedback+0xe4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4413      	add	r3, r2
 80067cc:	4a13      	ldr	r2, [pc, #76]	; (800681c <Show_Feedback+0xe4>)
 80067ce:	6013      	str	r3, [r2, #0]
	for (; i < received_Length; i++) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3301      	adds	r3, #1
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <Show_Feedback+0xe0>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4293      	cmp	r3, r2
 80067e0:	dbdc      	blt.n	800679c <Show_Feedback+0x64>
 80067e2:	e000      	b.n	80067e6 <Show_Feedback+0xae>
		} else {
			break;
 80067e4:	bf00      	nop
		}
	}
	LCD_ShowString(10, 90, 200, 24, 12, (uint8_t*) feedback);
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <Show_Feedback+0xdc>)
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	230c      	movs	r3, #12
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2318      	movs	r3, #24
 80067f0:	22c8      	movs	r2, #200	; 0xc8
 80067f2:	215a      	movs	r1, #90	; 0x5a
 80067f4:	200a      	movs	r0, #10
 80067f6:	f7ff fb65 	bl	8005ec4 <LCD_ShowString>
	Display_Points(points);
 80067fa:	4b08      	ldr	r3, [pc, #32]	; (800681c <Show_Feedback+0xe4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff ff24 	bl	800664c <Display_Points>
}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000000 	.word	0x20000000
 8006810:	2000009c 	.word	0x2000009c
 8006814:	20000ca4 	.word	0x20000ca4
 8006818:	2000089c 	.word	0x2000089c
 800681c:	200010a4 	.word	0x200010a4

08006820 <Get_Answer>:

void Get_Answer() {
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
	char answer[5];
	if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8006826:	2120      	movs	r1, #32
 8006828:	4819      	ldr	r0, [pc, #100]	; (8006890 <Get_Answer+0x70>)
 800682a:	f001 ff7b 	bl	8008724 <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d110      	bne.n	8006856 <Get_Answer+0x36>
		sprintf(answer, "0");
 8006834:	463b      	mov	r3, r7
 8006836:	4917      	ldr	r1, [pc, #92]	; (8006894 <Get_Answer+0x74>)
 8006838:	4618      	mov	r0, r3
 800683a:	f003 fdcb 	bl	800a3d4 <siprintf>
		send_message((uint8_t*) answer);
 800683e:	463b      	mov	r3, r7
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fe81 	bl	8007548 <send_message>
		Display_Answer(answer);
 8006846:	463b      	mov	r3, r7
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f82b 	bl	80068a4 <Display_Answer>
		mode=2;
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <Get_Answer+0x78>)
 8006850:	2202      	movs	r2, #2
 8006852:	601a      	str	r2, [r3, #0]
		sprintf(answer, "1");
		send_message((uint8_t*) answer);
		Display_Answer(answer);
		mode=2;
	}
}
 8006854:	e017      	b.n	8006886 <Get_Answer+0x66>
	} else if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8006856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800685a:	4810      	ldr	r0, [pc, #64]	; (800689c <Get_Answer+0x7c>)
 800685c:	f001 ff62 	bl	8008724 <HAL_GPIO_ReadPin>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <Get_Answer+0x66>
		sprintf(answer, "1");
 8006866:	463b      	mov	r3, r7
 8006868:	490d      	ldr	r1, [pc, #52]	; (80068a0 <Get_Answer+0x80>)
 800686a:	4618      	mov	r0, r3
 800686c:	f003 fdb2 	bl	800a3d4 <siprintf>
		send_message((uint8_t*) answer);
 8006870:	463b      	mov	r3, r7
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fe68 	bl	8007548 <send_message>
		Display_Answer(answer);
 8006878:	463b      	mov	r3, r7
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f812 	bl	80068a4 <Display_Answer>
		mode=2;
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <Get_Answer+0x78>)
 8006882:	2202      	movs	r2, #2
 8006884:	601a      	str	r2, [r3, #0]
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40011000 	.word	0x40011000
 8006894:	0800ace4 	.word	0x0800ace4
 8006898:	200010ac 	.word	0x200010ac
 800689c:	40010800 	.word	0x40010800
 80068a0:	0800ace8 	.word	0x0800ace8

080068a4 <Display_Answer>:

void Display_Answer(char a[]) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	6078      	str	r0, [r7, #4]
	POINT_COLOR = BLACK;
 80068ac:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <Display_Answer+0x48>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10, 200, 200, 24, 24, (uint8_t*) "Your Answer: ");
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <Display_Answer+0x4c>)
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	2318      	movs	r3, #24
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	2318      	movs	r3, #24
 80068bc:	22c8      	movs	r2, #200	; 0xc8
 80068be:	21c8      	movs	r1, #200	; 0xc8
 80068c0:	200a      	movs	r0, #10
 80068c2:	f7ff faff 	bl	8005ec4 <LCD_ShowString>
	POINT_COLOR = RED;
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <Display_Answer+0x48>)
 80068c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80068cc:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(170, 200, 200, 24, 24, (uint8_t*) a);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	2318      	movs	r3, #24
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2318      	movs	r3, #24
 80068d8:	22c8      	movs	r2, #200	; 0xc8
 80068da:	21c8      	movs	r1, #200	; 0xc8
 80068dc:	20aa      	movs	r0, #170	; 0xaa
 80068de:	f7ff faf1 	bl	8005ec4 <LCD_ShowString>
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000098 	.word	0x20000098
 80068f0:	0800acec 	.word	0x0800acec

080068f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <HAL_MspInit+0x5c>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	4a14      	ldr	r2, [pc, #80]	; (800695c <HAL_MspInit+0x5c>)
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	6193      	str	r3, [r2, #24]
 8006912:	4b12      	ldr	r3, [pc, #72]	; (800695c <HAL_MspInit+0x5c>)
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
 800691c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <HAL_MspInit+0x5c>)
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	4a0e      	ldr	r2, [pc, #56]	; (800695c <HAL_MspInit+0x5c>)
 8006924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006928:	61d3      	str	r3, [r2, #28]
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <HAL_MspInit+0x5c>)
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <HAL_MspInit+0x60>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	4a04      	ldr	r2, [pc, #16]	; (8006960 <HAL_MspInit+0x60>)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr
 800695c:	40021000 	.word	0x40021000
 8006960:	40010000 	.word	0x40010000

08006964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a23      	ldr	r2, [pc, #140]	; (8006a00 <HAL_TIM_Base_MspInit+0x9c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10c      	bne.n	8006990 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006976:	4b23      	ldr	r3, [pc, #140]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	4a22      	ldr	r2, [pc, #136]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 800697c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006980:	6193      	str	r3, [r2, #24]
 8006982:	4b20      	ldr	r3, [pc, #128]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800698e:	e032      	b.n	80069f6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006998:	d114      	bne.n	80069c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800699a:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	61d3      	str	r3, [r2, #28]
 80069a6:	4b17      	ldr	r3, [pc, #92]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80069b2:	2200      	movs	r2, #0
 80069b4:	2104      	movs	r1, #4
 80069b6:	201c      	movs	r0, #28
 80069b8:	f001 f867 	bl	8007a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80069bc:	201c      	movs	r0, #28
 80069be:	f001 f880 	bl	8007ac2 <HAL_NVIC_EnableIRQ>
}
 80069c2:	e018      	b.n	80069f6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <HAL_TIM_Base_MspInit+0xa4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d113      	bne.n	80069f6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 80069d4:	f043 0302 	orr.w	r3, r3, #2
 80069d8:	61d3      	str	r3, [r2, #28]
 80069da:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <HAL_TIM_Base_MspInit+0xa0>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80069e6:	2200      	movs	r2, #0
 80069e8:	2103      	movs	r1, #3
 80069ea:	201d      	movs	r0, #29
 80069ec:	f001 f84d 	bl	8007a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80069f0:	201d      	movs	r0, #29
 80069f2:	f001 f866 	bl	8007ac2 <HAL_NVIC_EnableIRQ>
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40021000 	.word	0x40021000
 8006a08:	40000400 	.word	0x40000400

08006a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a14:	f107 0318 	add.w	r3, r7, #24
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a65      	ldr	r2, [pc, #404]	; (8006bbc <HAL_UART_MspInit+0x1b0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d160      	bne.n	8006aee <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a2c:	4b64      	ldr	r3, [pc, #400]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	4a63      	ldr	r2, [pc, #396]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a36:	6193      	str	r3, [r2, #24]
 8006a38:	4b61      	ldr	r3, [pc, #388]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a44:	4b5e      	ldr	r3, [pc, #376]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	4a5d      	ldr	r2, [pc, #372]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	6193      	str	r3, [r2, #24]
 8006a50:	4b5b      	ldr	r3, [pc, #364]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a62:	2302      	movs	r3, #2
 8006a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a66:	2303      	movs	r3, #3
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a6a:	f107 0318 	add.w	r3, r7, #24
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4854      	ldr	r0, [pc, #336]	; (8006bc4 <HAL_UART_MspInit+0x1b8>)
 8006a72:	f001 fcc3 	bl	80083fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a84:	f107 0318 	add.w	r3, r7, #24
 8006a88:	4619      	mov	r1, r3
 8006a8a:	484e      	ldr	r0, [pc, #312]	; (8006bc4 <HAL_UART_MspInit+0x1b8>)
 8006a8c:	f001 fcb6 	bl	80083fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006a90:	4b4d      	ldr	r3, [pc, #308]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006a92:	4a4e      	ldr	r2, [pc, #312]	; (8006bcc <HAL_UART_MspInit+0x1c0>)
 8006a94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a96:	4b4c      	ldr	r3, [pc, #304]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a9c:	4b4a      	ldr	r3, [pc, #296]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006aa2:	4b49      	ldr	r3, [pc, #292]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006aa4:	2280      	movs	r2, #128	; 0x80
 8006aa6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006aa8:	4b47      	ldr	r3, [pc, #284]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006aae:	4b46      	ldr	r3, [pc, #280]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006ab4:	4b44      	ldr	r3, [pc, #272]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006aba:	4b43      	ldr	r3, [pc, #268]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006ac0:	4841      	ldr	r0, [pc, #260]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006ac2:	f001 f819 	bl	8007af8 <HAL_DMA_Init>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8006acc:	f7ff ff12 	bl	80068f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3d      	ldr	r2, [pc, #244]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8006ad6:	4a3c      	ldr	r2, [pc, #240]	; (8006bc8 <HAL_UART_MspInit+0x1bc>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006adc:	2200      	movs	r2, #0
 8006ade:	2101      	movs	r1, #1
 8006ae0:	2025      	movs	r0, #37	; 0x25
 8006ae2:	f000 ffd2 	bl	8007a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006ae6:	2025      	movs	r0, #37	; 0x25
 8006ae8:	f000 ffeb 	bl	8007ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006aec:	e062      	b.n	8006bb4 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a37      	ldr	r2, [pc, #220]	; (8006bd0 <HAL_UART_MspInit+0x1c4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d15d      	bne.n	8006bb4 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006af8:	4b31      	ldr	r3, [pc, #196]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b02:	61d3      	str	r3, [r2, #28]
 8006b04:	4b2e      	ldr	r3, [pc, #184]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b10:	4b2b      	ldr	r3, [pc, #172]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	4a2a      	ldr	r2, [pc, #168]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006b16:	f043 0304 	orr.w	r3, r3, #4
 8006b1a:	6193      	str	r3, [r2, #24]
 8006b1c:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <HAL_UART_MspInit+0x1b4>)
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b28:	2304      	movs	r3, #4
 8006b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b30:	2303      	movs	r3, #3
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b34:	f107 0318 	add.w	r3, r7, #24
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4822      	ldr	r0, [pc, #136]	; (8006bc4 <HAL_UART_MspInit+0x1b8>)
 8006b3c:	f001 fc5e 	bl	80083fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006b40:	2308      	movs	r3, #8
 8006b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b4c:	f107 0318 	add.w	r3, r7, #24
 8006b50:	4619      	mov	r1, r3
 8006b52:	481c      	ldr	r0, [pc, #112]	; (8006bc4 <HAL_UART_MspInit+0x1b8>)
 8006b54:	f001 fc52 	bl	80083fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006b58:	4b1e      	ldr	r3, [pc, #120]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_UART_MspInit+0x1cc>)
 8006b5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b64:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b6a:	4b1a      	ldr	r3, [pc, #104]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b70:	4b18      	ldr	r3, [pc, #96]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b76:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006b7c:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b7e:	2220      	movs	r2, #32
 8006b80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006b88:	4812      	ldr	r0, [pc, #72]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b8a:	f000 ffb5 	bl	8007af8 <HAL_DMA_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8006b94:	f7ff feae 	bl	80068f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a0e      	ldr	r2, [pc, #56]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8006b9e:	4a0d      	ldr	r2, [pc, #52]	; (8006bd4 <HAL_UART_MspInit+0x1c8>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	2026      	movs	r0, #38	; 0x26
 8006baa:	f000 ff6e 	bl	8007a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006bae:	2026      	movs	r0, #38	; 0x26
 8006bb0:	f000 ff87 	bl	8007ac2 <HAL_NVIC_EnableIRQ>
}
 8006bb4:	bf00      	nop
 8006bb6:	3728      	adds	r7, #40	; 0x28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40013800 	.word	0x40013800
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	40010800 	.word	0x40010800
 8006bc8:	20002168 	.word	0x20002168
 8006bcc:	40020058 	.word	0x40020058
 8006bd0:	40004400 	.word	0x40004400
 8006bd4:	200010dc 	.word	0x200010dc
 8006bd8:	4002006c 	.word	0x4002006c

08006bdc <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr

08006be8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8006bec:	e7fe      	b.n	8006bec <HardFault_Handler+0x4>

08006bee <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8006bf2:	e7fe      	b.n	8006bf2 <MemManage_Handler+0x4>

08006bf4 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8006bf8:	e7fe      	b.n	8006bf8 <BusFault_Handler+0x4>

08006bfa <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8006bfe:	e7fe      	b.n	8006bfe <UsageFault_Handler+0x4>

08006c00 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8006c1c:	bf00      	nop
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr

08006c24 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8006c28:	f000 fe18 	bl	800785c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8006c2c:	bf00      	nop
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <DMA1_Channel5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006c34:	4802      	ldr	r0, [pc, #8]	; (8006c40 <DMA1_Channel5_IRQHandler+0x10>)
 8006c36:	f001 f977 	bl	8007f28 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006c3a:	bf00      	nop
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20002168 	.word	0x20002168

08006c44 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006c48:	4802      	ldr	r0, [pc, #8]	; (8006c54 <DMA1_Channel6_IRQHandler+0x10>)
 8006c4a:	f001 f96d 	bl	8007f28 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006c4e:	bf00      	nop
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	200010dc 	.word	0x200010dc

08006c58 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006c5c:	2020      	movs	r0, #32
 8006c5e:	f001 fd91 	bl	8008784 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8006c62:	bf00      	nop
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8006c6c:	4802      	ldr	r0, [pc, #8]	; (8006c78 <TIM2_IRQHandler+0x10>)
 8006c6e:	f002 fa99 	bl	80091a4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8006c72:	bf00      	nop
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20002a34 	.word	0x20002a34

08006c7c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8006c80:	480c      	ldr	r0, [pc, #48]	; (8006cb4 <TIM3_IRQHandler+0x38>)
 8006c82:	f002 fa8f 	bl	80091a4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	if (time_limit > 0) {
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <TIM3_IRQHandler+0x3c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd0a      	ble.n	8006ca4 <TIM3_IRQHandler+0x28>
		time_limit--;
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <TIM3_IRQHandler+0x3c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <TIM3_IRQHandler+0x3c>)
 8006c96:	6013      	str	r3, [r2, #0]
		Display_Time(time_limit);
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <TIM3_IRQHandler+0x3c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fd19 	bl	80066d4 <Display_Time>
	} else {
		HAL_TIM_Base_Stop_IT(&htim3);
		mode = 2;
	}
	/* USER CODE END TIM3_IRQn 1 */
}
 8006ca2:	e005      	b.n	8006cb0 <TIM3_IRQHandler+0x34>
		HAL_TIM_Base_Stop_IT(&htim3);
 8006ca4:	4803      	ldr	r0, [pc, #12]	; (8006cb4 <TIM3_IRQHandler+0x38>)
 8006ca6:	f002 fa4f 	bl	8009148 <HAL_TIM_Base_Stop_IT>
		mode = 2;
 8006caa:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <TIM3_IRQHandler+0x40>)
 8006cac:	2202      	movs	r2, #2
 8006cae:	601a      	str	r2, [r3, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	20001120 	.word	0x20001120
 8006cb8:	200010a8 	.word	0x200010a8
 8006cbc:	200010ac 	.word	0x200010ac

08006cc0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8006cc4:	4806      	ldr	r0, [pc, #24]	; (8006ce0 <USART1_IRQHandler+0x20>)
 8006cc6:	f002 ffa7 	bl	8009c18 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_RxCpltCallback(&huart1);
 8006cca:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <USART1_IRQHandler+0x20>)
 8006ccc:	f000 f8aa 	bl	8006e24 <HAL_UART_RxCpltCallback>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 8006cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cd4:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <USART1_IRQHandler+0x24>)
 8006cd6:	4802      	ldr	r0, [pc, #8]	; (8006ce0 <USART1_IRQHandler+0x20>)
 8006cd8:	f002 fec2 	bl	8009a60 <HAL_UART_Receive_DMA>
	/* USER CODE END USART1_IRQn 1 */
}
 8006cdc:	bf00      	nop
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	200021ac 	.word	0x200021ac
 8006ce4:	20001168 	.word	0x20001168

08006ce8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8006cec:	4806      	ldr	r0, [pc, #24]	; (8006d08 <USART2_IRQHandler+0x20>)
 8006cee:	f002 ff93 	bl	8009c18 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_RxCpltCallback(&huart2);
 8006cf2:	4805      	ldr	r0, [pc, #20]	; (8006d08 <USART2_IRQHandler+0x20>)
 8006cf4:	f000 f896 	bl	8006e24 <HAL_UART_RxCpltCallback>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 8006cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cfc:	4903      	ldr	r1, [pc, #12]	; (8006d0c <USART2_IRQHandler+0x24>)
 8006cfe:	4802      	ldr	r0, [pc, #8]	; (8006d08 <USART2_IRQHandler+0x20>)
 8006d00:	f002 feae 	bl	8009a60 <HAL_UART_Receive_DMA>
	/* USER CODE END USART2_IRQn 1 */
}
 8006d04:	bf00      	nop
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20002a7c 	.word	0x20002a7c
 8006d0c:	20002234 	.word	0x20002234

08006d10 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006d14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d18:	f001 fd34 	bl	8008784 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8006d2a:	2064      	movs	r0, #100	; 0x64
 8006d2c:	f000 fdb2 	bl	8007894 <HAL_Delay>
//                }
//            default:
//                break;
//        }
//    }
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	if (htim == (&htim3)) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a31      	ldr	r2, [pc, #196]	; (8006e08 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d15c      	bne.n	8006e02 <HAL_TIM_PeriodElapsedCallback+0xca>
		HAL_Delay(300);
 8006d48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006d4c:	f000 fda2 	bl	8007894 <HAL_Delay>
		++timer_count;
 8006d50:	4b2e      	ldr	r3, [pc, #184]	; (8006e0c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	4a2d      	ldr	r2, [pc, #180]	; (8006e0c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006d58:	6013      	str	r3, [r2, #0]
		timer_count %= 15;
 8006d5a:	4b2c      	ldr	r3, [pc, #176]	; (8006e0c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b2c      	ldr	r3, [pc, #176]	; (8006e10 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006d60:	fb83 1302 	smull	r1, r3, r3, r2
 8006d64:	4413      	add	r3, r2
 8006d66:	10d9      	asrs	r1, r3, #3
 8006d68:	17d3      	asrs	r3, r2, #31
 8006d6a:	1ac9      	subs	r1, r1, r3
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	1a5b      	subs	r3, r3, r1
 8006d72:	1ad1      	subs	r1, r2, r3
 8006d74:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8006d76:	6019      	str	r1, [r3, #0]
//			} else {
//				send_cmd((uint8_t*) "AT+PING=\"192.168.4.1\"\r\n", 0);
//			}
//
//		}
		if (connect_flag == 0) {
 8006d78:	4b26      	ldr	r3, [pc, #152]	; (8006e14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8006d80:	2201      	movs	r2, #1
 8006d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d86:	4824      	ldr	r0, [pc, #144]	; (8006e18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006d88:	f001 fce3 	bl	8008752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); //0
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2104      	movs	r1, #4
 8006d90:	4822      	ldr	r0, [pc, #136]	; (8006e1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8006d92:	f001 fcde 	bl	8008752 <HAL_GPIO_WritePin>
			return;
 8006d96:	e034      	b.n	8006e02 <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		if (connect_flag == 1) { // 连接上wifi 但是没有连接tcp
 8006d98:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10b      	bne.n	8006db8 <HAL_TIM_PeriodElapsedCallback+0x80>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8006da0:	2200      	movs	r2, #0
 8006da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006da6:	481c      	ldr	r0, [pc, #112]	; (8006e18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006da8:	f001 fcd3 	bl	8008752 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); //0
 8006dac:	2201      	movs	r2, #1
 8006dae:	2104      	movs	r1, #4
 8006db0:	481a      	ldr	r0, [pc, #104]	; (8006e1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8006db2:	f001 fcce 	bl	8008752 <HAL_GPIO_WritePin>
			return;
 8006db6:	e024      	b.n	8006e02 <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		if (connect_flag == 2) {
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d120      	bne.n	8006e02 <HAL_TIM_PeriodElapsedCallback+0xca>
			if (sending_flag == 0) {
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10b      	bne.n	8006de0 <HAL_TIM_PeriodElapsedCallback+0xa8>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dce:	4812      	ldr	r0, [pc, #72]	; (8006e18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006dd0:	f001 fcbf 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	4810      	ldr	r0, [pc, #64]	; (8006e1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8006dda:	f001 fcba 	bl	8008752 <HAL_GPIO_WritePin>
			} else if (sending_flag == 1) {
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
			}
			return;
 8006dde:	e00f      	b.n	8006e00 <HAL_TIM_PeriodElapsedCallback+0xc8>
			} else if (sending_flag == 1) {
 8006de0:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d10b      	bne.n	8006e00 <HAL_TIM_PeriodElapsedCallback+0xc8>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8006de8:	2200      	movs	r2, #0
 8006dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dee:	480a      	ldr	r0, [pc, #40]	; (8006e18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006df0:	f001 fcaf 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8006df4:	2200      	movs	r2, #0
 8006df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dfa:	4807      	ldr	r0, [pc, #28]	; (8006e18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006dfc:	f001 fca9 	bl	8008752 <HAL_GPIO_WritePin>
			return;
 8006e00:	bf00      	nop
		}
	}
}
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20001120 	.word	0x20001120
 8006e0c:	200010b8 	.word	0x200010b8
 8006e10:	88888889 	.word	0x88888889
 8006e14:	200010b0 	.word	0x200010b0
 8006e18:	40010800 	.word	0x40010800
 8006e1c:	40011400 	.word	0x40011400
 8006e20:	200010b4 	.word	0x200010b4

08006e24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	// to receive the data from the usart1
	if (huart->Instance == USART1) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4aa3      	ldr	r2, [pc, #652]	; (80070c0 <HAL_UART_RxCpltCallback+0x29c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f040 8104 	bne.w	8007040 <HAL_UART_RxCpltCallback+0x21c>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8006e38:	4ba2      	ldr	r3, [pc, #648]	; (80070c4 <HAL_UART_RxCpltCallback+0x2a0>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b10      	cmp	r3, #16
 8006e44:	f040 834e 	bne.w	80074e4 <HAL_UART_RxCpltCallback+0x6c0>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	4b9d      	ldr	r3, [pc, #628]	; (80070c4 <HAL_UART_RxCpltCallback+0x2a0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	4b9b      	ldr	r3, [pc, #620]	; (80070c4 <HAL_UART_RxCpltCallback+0x2a0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
			HAL_UART_DMAStop(&huart1);
 8006e5e:	4899      	ldr	r0, [pc, #612]	; (80070c4 <HAL_UART_RxCpltCallback+0x2a0>)
 8006e60:	f002 fe7e 	bl	8009b60 <HAL_UART_DMAStop>
			uint8_t data_length = 2048 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8006e64:	4b98      	ldr	r3, [pc, #608]	; (80070c8 <HAL_UART_RxCpltCallback+0x2a4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	425b      	negs	r3, r3
 8006e6e:	75bb      	strb	r3, [r7, #22]
			send_msg_uart1((uint8_t*) "enter usart receive function", 0);
 8006e70:	2100      	movs	r1, #0
 8006e72:	4896      	ldr	r0, [pc, #600]	; (80070cc <HAL_UART_RxCpltCallback+0x2a8>)
 8006e74:	f000 fb96 	bl	80075a4 <send_msg_uart1>
			if (link_number != -1 && uart1_rx_buffer[0] == '>'
 8006e78:	4b95      	ldr	r3, [pc, #596]	; (80070d0 <HAL_UART_RxCpltCallback+0x2ac>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e80:	d028      	beq.n	8006ed4 <HAL_UART_RxCpltCallback+0xb0>
 8006e82:	4b94      	ldr	r3, [pc, #592]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b3e      	cmp	r3, #62	; 0x3e
 8006e88:	d124      	bne.n	8006ed4 <HAL_UART_RxCpltCallback+0xb0>
					&& connect_flag == 2) {
 8006e8a:	4b93      	ldr	r3, [pc, #588]	; (80070d8 <HAL_UART_RxCpltCallback+0x2b4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d120      	bne.n	8006ed4 <HAL_UART_RxCpltCallback+0xb0>
				sending_flag = 1;
 8006e92:	4b92      	ldr	r3, [pc, #584]	; (80070dc <HAL_UART_RxCpltCallback+0x2b8>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e9e:	4890      	ldr	r0, [pc, #576]	; (80070e0 <HAL_UART_RxCpltCallback+0x2bc>)
 8006ea0:	f001 fc57 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	488e      	ldr	r0, [pc, #568]	; (80070e4 <HAL_UART_RxCpltCallback+0x2c0>)
 8006eaa:	f001 fc52 	bl	8008752 <HAL_GPIO_WritePin>
				send_message(uart1_rx_buffer + 1);
 8006eae:	4b8e      	ldr	r3, [pc, #568]	; (80070e8 <HAL_UART_RxCpltCallback+0x2c4>)
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fb49 	bl	8007548 <send_message>
				sending_flag = 0;
 8006eb6:	4b89      	ldr	r3, [pc, #548]	; (80070dc <HAL_UART_RxCpltCallback+0x2b8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ec2:	4887      	ldr	r0, [pc, #540]	; (80070e0 <HAL_UART_RxCpltCallback+0x2bc>)
 8006ec4:	f001 fc45 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2104      	movs	r1, #4
 8006ecc:	4885      	ldr	r0, [pc, #532]	; (80070e4 <HAL_UART_RxCpltCallback+0x2c0>)
 8006ece:	f001 fc40 	bl	8008752 <HAL_GPIO_WritePin>
 8006ed2:	e0a6      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "server\r\n") == 0) {
 8006ed4:	4985      	ldr	r1, [pc, #532]	; (80070ec <HAL_UART_RxCpltCallback+0x2c8>)
 8006ed6:	487f      	ldr	r0, [pc, #508]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006ed8:	f7f9 f9a6 	bl	8000228 <strcmp>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <HAL_UART_RxCpltCallback+0xd8>
				esp8266_mode = 1;
 8006ee2:	4b83      	ldr	r3, [pc, #524]	; (80070f0 <HAL_UART_RxCpltCallback+0x2cc>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
				send_msg_uart1((uint8_t*) "SET AS SERVER\r\n", 0);
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4882      	ldr	r0, [pc, #520]	; (80070f4 <HAL_UART_RxCpltCallback+0x2d0>)
 8006eec:	f000 fb5a 	bl	80075a4 <send_msg_uart1>
				send_cmd("AT+CWMODE=3\r\n", 1000);
 8006ef0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ef4:	4880      	ldr	r0, [pc, #512]	; (80070f8 <HAL_UART_RxCpltCallback+0x2d4>)
 8006ef6:	f000 fb0d 	bl	8007514 <send_cmd>
 8006efa:	e092      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "client\r\n") == 0) {
 8006efc:	497f      	ldr	r1, [pc, #508]	; (80070fc <HAL_UART_RxCpltCallback+0x2d8>)
 8006efe:	4875      	ldr	r0, [pc, #468]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006f00:	f7f9 f992 	bl	8000228 <strcmp>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d111      	bne.n	8006f2e <HAL_UART_RxCpltCallback+0x10a>
				esp8266_mode = 0;
 8006f0a:	4b79      	ldr	r3, [pc, #484]	; (80070f0 <HAL_UART_RxCpltCallback+0x2cc>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
				send_msg_uart1((uint8_t*) "SET AS CLIENT\r\n", 0);
 8006f10:	2100      	movs	r1, #0
 8006f12:	487b      	ldr	r0, [pc, #492]	; (8007100 <HAL_UART_RxCpltCallback+0x2dc>)
 8006f14:	f000 fb46 	bl	80075a4 <send_msg_uart1>
				send_cmd("AT+CWJAP?\r\n", 1000);
 8006f18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f1c:	4879      	ldr	r0, [pc, #484]	; (8007104 <HAL_UART_RxCpltCallback+0x2e0>)
 8006f1e:	f000 faf9 	bl	8007514 <send_cmd>
				send_cmd("AT+CIFSR\r\n", 1000);
 8006f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f26:	4878      	ldr	r0, [pc, #480]	; (8007108 <HAL_UART_RxCpltCallback+0x2e4>)
 8006f28:	f000 faf4 	bl	8007514 <send_cmd>
 8006f2c:	e079      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "start\r\n") == 0
 8006f2e:	4977      	ldr	r1, [pc, #476]	; (800710c <HAL_UART_RxCpltCallback+0x2e8>)
 8006f30:	4868      	ldr	r0, [pc, #416]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006f32:	f7f9 f979 	bl	8000228 <strcmp>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d106      	bne.n	8006f4a <HAL_UART_RxCpltCallback+0x126>
					&& esp8266_mode == 1) {
 8006f3c:	4b6c      	ldr	r3, [pc, #432]	; (80070f0 <HAL_UART_RxCpltCallback+0x2cc>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d102      	bne.n	8006f4a <HAL_UART_RxCpltCallback+0x126>
				//reset();
				init_server();
 8006f44:	f000 fbac 	bl	80076a0 <init_server>
 8006f48:	e06b      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "connect to wifi\r\n") == 0
 8006f4a:	4971      	ldr	r1, [pc, #452]	; (8007110 <HAL_UART_RxCpltCallback+0x2ec>)
 8006f4c:	4861      	ldr	r0, [pc, #388]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006f4e:	f7f9 f96b 	bl	8000228 <strcmp>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <HAL_UART_RxCpltCallback+0x142>
					&& esp8266_mode == 0) {
 8006f58:	4b65      	ldr	r3, [pc, #404]	; (80070f0 <HAL_UART_RxCpltCallback+0x2cc>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_UART_RxCpltCallback+0x142>
				//reset();
				connect_to_wifi();
 8006f60:	f000 fb68 	bl	8007634 <connect_to_wifi>
 8006f64:	e05d      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "connect to server\r\n") == 0
 8006f66:	496b      	ldr	r1, [pc, #428]	; (8007114 <HAL_UART_RxCpltCallback+0x2f0>)
 8006f68:	485a      	ldr	r0, [pc, #360]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006f6a:	f7f9 f95d 	bl	8000228 <strcmp>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d108      	bne.n	8006f86 <HAL_UART_RxCpltCallback+0x162>
					&& esp8266_mode == 0) {
 8006f74:	4b5e      	ldr	r3, [pc, #376]	; (80070f0 <HAL_UART_RxCpltCallback+0x2cc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_UART_RxCpltCallback+0x162>
				send_cmd(
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4866      	ldr	r0, [pc, #408]	; (8007118 <HAL_UART_RxCpltCallback+0x2f4>)
 8006f80:	f000 fac8 	bl	8007514 <send_cmd>
 8006f84:	e04d      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
						(uint8_t*) "AT+CIPSTART=0,\"TCP\",\"192.168.4.1\",8089\r\n",
						0);
			} else if (strcmp(uart1_rx_buffer, "close connection\r\n") == 0) {
 8006f86:	4965      	ldr	r1, [pc, #404]	; (800711c <HAL_UART_RxCpltCallback+0x2f8>)
 8006f88:	4852      	ldr	r0, [pc, #328]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006f8a:	f7f9 f94d 	bl	8000228 <strcmp>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d107      	bne.n	8006fa4 <HAL_UART_RxCpltCallback+0x180>
				send_cmd((uint8_t*) "AT+CIPCLOSE=0\r\n", 2000);
 8006f94:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f98:	4861      	ldr	r0, [pc, #388]	; (8007120 <HAL_UART_RxCpltCallback+0x2fc>)
 8006f9a:	f000 fabb 	bl	8007514 <send_cmd>
				init_var();
 8006f9e:	f000 fb1b 	bl	80075d8 <init_var>
 8006fa2:	e03e      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strncmp(uart1_rx_buffer, "quit wifi\r\n") == 0
 8006fa4:	495f      	ldr	r1, [pc, #380]	; (8007124 <HAL_UART_RxCpltCallback+0x300>)
 8006fa6:	484b      	ldr	r0, [pc, #300]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006fa8:	f003 fa34 	bl	800a414 <strncmp>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_UART_RxCpltCallback+0x1a6>
					&& esp8266_mode == 0) {
 8006fb2:	4b4f      	ldr	r3, [pc, #316]	; (80070f0 <HAL_UART_RxCpltCallback+0x2cc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d107      	bne.n	8006fca <HAL_UART_RxCpltCallback+0x1a6>
				send_cmd("AT+CWQAP\r\n", 1000);
 8006fba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006fbe:	485a      	ldr	r0, [pc, #360]	; (8007128 <HAL_UART_RxCpltCallback+0x304>)
 8006fc0:	f000 faa8 	bl	8007514 <send_cmd>
				init_var();
 8006fc4:	f000 fb08 	bl	80075d8 <init_var>
 8006fc8:	e02b      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strncmp(uart1_rx_buffer, "ip status\r\n") == 0) {
 8006fca:	4958      	ldr	r1, [pc, #352]	; (800712c <HAL_UART_RxCpltCallback+0x308>)
 8006fcc:	4841      	ldr	r0, [pc, #260]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006fce:	f003 fa21 	bl	800a414 <strncmp>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <HAL_UART_RxCpltCallback+0x1ca>
				send_cmd("AT+CIPSTATUS\r\n", 1000);
 8006fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006fdc:	4854      	ldr	r0, [pc, #336]	; (8007130 <HAL_UART_RxCpltCallback+0x30c>)
 8006fde:	f000 fa99 	bl	8007514 <send_cmd>
				send_cmd("AT+CIFSR\r\n", 1000);
 8006fe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006fe6:	4848      	ldr	r0, [pc, #288]	; (8007108 <HAL_UART_RxCpltCallback+0x2e4>)
 8006fe8:	f000 fa94 	bl	8007514 <send_cmd>
 8006fec:	e019      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strncmp(uart1_rx_buffer, "wifi status\r\n") == 0) {
 8006fee:	4951      	ldr	r1, [pc, #324]	; (8007134 <HAL_UART_RxCpltCallback+0x310>)
 8006ff0:	4838      	ldr	r0, [pc, #224]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8006ff2:	f003 fa0f 	bl	800a414 <strncmp>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <HAL_UART_RxCpltCallback+0x1ee>
//				send_cmd("AT+CWSAP?\r\n", 1000);
				send_cmd("AT+CWLIF\r\n", 1000);
 8006ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007000:	484d      	ldr	r0, [pc, #308]	; (8007138 <HAL_UART_RxCpltCallback+0x314>)
 8007002:	f000 fa87 	bl	8007514 <send_cmd>
				send_cmd("AT+CIPSTATUS\r\n", 1000);
 8007006:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800700a:	4849      	ldr	r0, [pc, #292]	; (8007130 <HAL_UART_RxCpltCallback+0x30c>)
 800700c:	f000 fa82 	bl	8007514 <send_cmd>
 8007010:	e007      	b.n	8007022 <HAL_UART_RxCpltCallback+0x1fe>
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) uart1_rx_buffer,
 8007012:	7dbb      	ldrb	r3, [r7, #22]
 8007014:	b29a      	uxth	r2, r3
 8007016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800701a:	492e      	ldr	r1, [pc, #184]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 800701c:	4847      	ldr	r0, [pc, #284]	; (800713c <HAL_UART_RxCpltCallback+0x318>)
 800701e:	f002 fc8c 	bl	800993a <HAL_UART_Transmit>
						data_length, 0xffff);
			}
			memset(uart1_rx_buffer, 0, data_length);
 8007022:	7dbb      	ldrb	r3, [r7, #22]
 8007024:	461a      	mov	r2, r3
 8007026:	2100      	movs	r1, #0
 8007028:	482a      	ldr	r0, [pc, #168]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 800702a:	f003 f9cb 	bl	800a3c4 <memset>
			data_length = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	75bb      	strb	r3, [r7, #22]
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 8007032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007036:	4927      	ldr	r1, [pc, #156]	; (80070d4 <HAL_UART_RxCpltCallback+0x2b0>)
 8007038:	4822      	ldr	r0, [pc, #136]	; (80070c4 <HAL_UART_RxCpltCallback+0x2a0>)
 800703a:	f002 fd11 	bl	8009a60 <HAL_UART_Receive_DMA>
			memset(uart2_rx_buffer, 0, data_length);
			data_length = 0;
			HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
		}
	}
}
 800703e:	e251      	b.n	80074e4 <HAL_UART_RxCpltCallback+0x6c0>
	} else if (huart->Instance == USART2) { // to receive the data from the usart2
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a3e      	ldr	r2, [pc, #248]	; (8007140 <HAL_UART_RxCpltCallback+0x31c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f040 824c 	bne.w	80074e4 <HAL_UART_RxCpltCallback+0x6c0>
		if (RESET != __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 800704c:	4b3b      	ldr	r3, [pc, #236]	; (800713c <HAL_UART_RxCpltCallback+0x318>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b10      	cmp	r3, #16
 8007058:	f040 8244 	bne.w	80074e4 <HAL_UART_RxCpltCallback+0x6c0>
			__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	4b36      	ldr	r3, [pc, #216]	; (800713c <HAL_UART_RxCpltCallback+0x318>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	4b34      	ldr	r3, [pc, #208]	; (800713c <HAL_UART_RxCpltCallback+0x318>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
			HAL_UART_DMAStop(&huart2);
 8007072:	4832      	ldr	r0, [pc, #200]	; (800713c <HAL_UART_RxCpltCallback+0x318>)
 8007074:	f002 fd74 	bl	8009b60 <HAL_UART_DMAStop>
			uint8_t data_length = 2048 - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8007078:	4b32      	ldr	r3, [pc, #200]	; (8007144 <HAL_UART_RxCpltCallback+0x320>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	425b      	negs	r3, r3
 8007082:	75fb      	strb	r3, [r7, #23]
			if (strncmp(uart2_rx_buffer, "WIFI CONNECTED\r\n", 16) == 0
 8007084:	2210      	movs	r2, #16
 8007086:	4930      	ldr	r1, [pc, #192]	; (8007148 <HAL_UART_RxCpltCallback+0x324>)
 8007088:	4830      	ldr	r0, [pc, #192]	; (800714c <HAL_UART_RxCpltCallback+0x328>)
 800708a:	f003 f9c3 	bl	800a414 <strncmp>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d15d      	bne.n	8007150 <HAL_UART_RxCpltCallback+0x32c>
					&& connect_flag == 0) {
 8007094:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <HAL_UART_RxCpltCallback+0x2b4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d159      	bne.n	8007150 <HAL_UART_RxCpltCallback+0x32c>
				connect_flag = 1;
 800709c:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <HAL_UART_RxCpltCallback+0x2b4>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 80070a2:	2201      	movs	r2, #1
 80070a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070a8:	480d      	ldr	r0, [pc, #52]	; (80070e0 <HAL_UART_RxCpltCallback+0x2bc>)
 80070aa:	f001 fb52 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 80070ae:	2200      	movs	r2, #0
 80070b0:	2104      	movs	r1, #4
 80070b2:	480c      	ldr	r0, [pc, #48]	; (80070e4 <HAL_UART_RxCpltCallback+0x2c0>)
 80070b4:	f001 fb4d 	bl	8008752 <HAL_GPIO_WritePin>
				link_number = 0;
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_UART_RxCpltCallback+0x2ac>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e203      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
 80070c0:	40013800 	.word	0x40013800
 80070c4:	200021ac 	.word	0x200021ac
 80070c8:	20002168 	.word	0x20002168
 80070cc:	0800acfc 	.word	0x0800acfc
 80070d0:	20000008 	.word	0x20000008
 80070d4:	20001168 	.word	0x20001168
 80070d8:	200010b0 	.word	0x200010b0
 80070dc:	200010b4 	.word	0x200010b4
 80070e0:	40010800 	.word	0x40010800
 80070e4:	40011400 	.word	0x40011400
 80070e8:	20001169 	.word	0x20001169
 80070ec:	0800ad1c 	.word	0x0800ad1c
 80070f0:	20000004 	.word	0x20000004
 80070f4:	0800ad28 	.word	0x0800ad28
 80070f8:	0800ad38 	.word	0x0800ad38
 80070fc:	0800ad48 	.word	0x0800ad48
 8007100:	0800ad54 	.word	0x0800ad54
 8007104:	0800ad64 	.word	0x0800ad64
 8007108:	0800ad70 	.word	0x0800ad70
 800710c:	0800ad7c 	.word	0x0800ad7c
 8007110:	0800ad84 	.word	0x0800ad84
 8007114:	0800ad98 	.word	0x0800ad98
 8007118:	0800adac 	.word	0x0800adac
 800711c:	0800add8 	.word	0x0800add8
 8007120:	0800adec 	.word	0x0800adec
 8007124:	0800adfc 	.word	0x0800adfc
 8007128:	0800ae08 	.word	0x0800ae08
 800712c:	0800ae14 	.word	0x0800ae14
 8007130:	0800ae20 	.word	0x0800ae20
 8007134:	0800ae30 	.word	0x0800ae30
 8007138:	0800ae40 	.word	0x0800ae40
 800713c:	20002a7c 	.word	0x20002a7c
 8007140:	40004400 	.word	0x40004400
 8007144:	200010dc 	.word	0x200010dc
 8007148:	0800ae4c 	.word	0x0800ae4c
 800714c:	20002234 	.word	0x20002234
			} else if (strncmp(uart2_rx_buffer, "WIFI GOT IP\r\n", 13) == 0) { // client 端会收到这个消息, 这里变成连接状�??
 8007150:	220d      	movs	r2, #13
 8007152:	49ac      	ldr	r1, [pc, #688]	; (8007404 <HAL_UART_RxCpltCallback+0x5e0>)
 8007154:	48ac      	ldr	r0, [pc, #688]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007156:	f003 f95d 	bl	800a414 <strncmp>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d111      	bne.n	8007184 <HAL_UART_RxCpltCallback+0x360>
				connect_flag = 1;
 8007160:	4baa      	ldr	r3, [pc, #680]	; (800740c <HAL_UART_RxCpltCallback+0x5e8>)
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8007166:	2201      	movs	r2, #1
 8007168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800716c:	48a8      	ldr	r0, [pc, #672]	; (8007410 <HAL_UART_RxCpltCallback+0x5ec>)
 800716e:	f001 faf0 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007172:	2200      	movs	r2, #0
 8007174:	2104      	movs	r1, #4
 8007176:	48a7      	ldr	r0, [pc, #668]	; (8007414 <HAL_UART_RxCpltCallback+0x5f0>)
 8007178:	f001 faeb 	bl	8008752 <HAL_GPIO_WritePin>
				link_number = 0;
 800717c:	4ba6      	ldr	r3, [pc, #664]	; (8007418 <HAL_UART_RxCpltCallback+0x5f4>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e1a1      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
			} else if (connect_flag == 1
 8007184:	4ba1      	ldr	r3, [pc, #644]	; (800740c <HAL_UART_RxCpltCallback+0x5e8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d12f      	bne.n	80071ec <HAL_UART_RxCpltCallback+0x3c8>
					&& strncmp(uart2_rx_buffer, (uint8_t*) "+", 1) == 0) {
 800718c:	2201      	movs	r2, #1
 800718e:	49a3      	ldr	r1, [pc, #652]	; (800741c <HAL_UART_RxCpltCallback+0x5f8>)
 8007190:	489d      	ldr	r0, [pc, #628]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007192:	f003 f93f 	bl	800a414 <strncmp>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d127      	bne.n	80071ec <HAL_UART_RxCpltCallback+0x3c8>
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 800719c:	49a0      	ldr	r1, [pc, #640]	; (8007420 <HAL_UART_RxCpltCallback+0x5fc>)
 800719e:	489a      	ldr	r0, [pc, #616]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 80071a0:	f003 f94a 	bl	800a438 <strstr>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01c      	beq.n	80071e4 <HAL_UART_RxCpltCallback+0x3c0>
					if (connection_counter > 2) {
 80071aa:	4b9e      	ldr	r3, [pc, #632]	; (8007424 <HAL_UART_RxCpltCallback+0x600>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	dd0e      	ble.n	80071d0 <HAL_UART_RxCpltCallback+0x3ac>
						send_msg_uart1((uint8_t*) "connection closed\r\n", 100);
 80071b2:	2164      	movs	r1, #100	; 0x64
 80071b4:	489c      	ldr	r0, [pc, #624]	; (8007428 <HAL_UART_RxCpltCallback+0x604>)
 80071b6:	f000 f9f5 	bl	80075a4 <send_msg_uart1>
						send_cmd((uint8_t*) "AT+CWQAP\r\n", 2000);
 80071ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80071be:	489b      	ldr	r0, [pc, #620]	; (800742c <HAL_UART_RxCpltCallback+0x608>)
 80071c0:	f000 f9a8 	bl	8007514 <send_cmd>
						init_var();
 80071c4:	f000 fa08 	bl	80075d8 <init_var>
						connection_counter = 0;
 80071c8:	4b96      	ldr	r3, [pc, #600]	; (8007424 <HAL_UART_RxCpltCallback+0x600>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 80071ce:	e17b      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
						send_msg_uart1((uint8_t*) "connection disturbance\r\n",
 80071d0:	2164      	movs	r1, #100	; 0x64
 80071d2:	4897      	ldr	r0, [pc, #604]	; (8007430 <HAL_UART_RxCpltCallback+0x60c>)
 80071d4:	f000 f9e6 	bl	80075a4 <send_msg_uart1>
						++connection_counter;
 80071d8:	4b92      	ldr	r3, [pc, #584]	; (8007424 <HAL_UART_RxCpltCallback+0x600>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a91      	ldr	r2, [pc, #580]	; (8007424 <HAL_UART_RxCpltCallback+0x600>)
 80071e0:	6013      	str	r3, [r2, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 80071e2:	e171      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
					connection_counter = 0;
 80071e4:	4b8f      	ldr	r3, [pc, #572]	; (8007424 <HAL_UART_RxCpltCallback+0x600>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 80071ea:	e16d      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
			} else if (connect_flag == 2) {
 80071ec:	4b87      	ldr	r3, [pc, #540]	; (800740c <HAL_UART_RxCpltCallback+0x5e8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f040 80cc 	bne.w	800738e <HAL_UART_RxCpltCallback+0x56a>
				if (strcmp(uart2_rx_buffer, "WIFI DISCONNECT\r\n", 16) == 0) { //client 端会收到这个消息
 80071f6:	2210      	movs	r2, #16
 80071f8:	498e      	ldr	r1, [pc, #568]	; (8007434 <HAL_UART_RxCpltCallback+0x610>)
 80071fa:	4883      	ldr	r0, [pc, #524]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 80071fc:	f7f9 f814 	bl	8000228 <strcmp>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_UART_RxCpltCallback+0x3f8>
					init_var();
 8007206:	f000 f9e7 	bl	80075d8 <init_var>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	b29a      	uxth	r2, r3
 800720e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007212:	497d      	ldr	r1, [pc, #500]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007214:	4888      	ldr	r0, [pc, #544]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 8007216:	f002 fb90 	bl	800993a <HAL_UART_Transmit>
 800721a:	e155      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
				} else if (strncmp(uart2_rx_buffer, "\r\n+IPD,", 7) == 0) {
 800721c:	2207      	movs	r2, #7
 800721e:	4987      	ldr	r1, [pc, #540]	; (800743c <HAL_UART_RxCpltCallback+0x618>)
 8007220:	4879      	ldr	r0, [pc, #484]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007222:	f003 f8f7 	bl	800a414 <strncmp>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d17b      	bne.n	8007324 <HAL_UART_RxCpltCallback+0x500>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 800722c:	2200      	movs	r2, #0
 800722e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007232:	4877      	ldr	r0, [pc, #476]	; (8007410 <HAL_UART_RxCpltCallback+0x5ec>)
 8007234:	f001 fa8d 	bl	8008752 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007238:	2200      	movs	r2, #0
 800723a:	2104      	movs	r1, #4
 800723c:	4875      	ldr	r0, [pc, #468]	; (8007414 <HAL_UART_RxCpltCallback+0x5f0>)
 800723e:	f001 fa88 	bl	8008752 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	b29a      	uxth	r2, r3
 8007246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800724a:	496f      	ldr	r1, [pc, #444]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 800724c:	487a      	ldr	r0, [pc, #488]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 800724e:	f002 fb74 	bl	800993a <HAL_UART_Transmit>
					for (i = 0; i < data_length; i++) {
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e011      	b.n	800727c <HAL_UART_RxCpltCallback+0x458>
						if (strcmp(':', uart2_rx_buffer[i]) == 0) {
 8007258:	4a6b      	ldr	r2, [pc, #428]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	4619      	mov	r1, r3
 8007262:	203a      	movs	r0, #58	; 0x3a
 8007264:	f7f8 ffe0 	bl	8000228 <strcmp>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <HAL_UART_RxCpltCallback+0x452>
							t = i + 1;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3301      	adds	r3, #1
 8007272:	61bb      	str	r3, [r7, #24]
							break;
 8007274:	e006      	b.n	8007284 <HAL_UART_RxCpltCallback+0x460>
					for (i = 0; i < data_length; i++) {
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3301      	adds	r3, #1
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	429a      	cmp	r2, r3
 8007282:	dbe9      	blt.n	8007258 <HAL_UART_RxCpltCallback+0x434>
					for (i = 0; i < data_length - t; i++) {
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	e00c      	b.n	80072a4 <HAL_UART_RxCpltCallback+0x480>
						received_Data[i] = uart2_rx_buffer[i + t];
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	4413      	add	r3, r2
 8007290:	4a5d      	ldr	r2, [pc, #372]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007292:	5cd1      	ldrb	r1, [r2, r3]
 8007294:	4a6a      	ldr	r2, [pc, #424]	; (8007440 <HAL_UART_RxCpltCallback+0x61c>)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	460a      	mov	r2, r1
 800729c:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < data_length - t; i++) {
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	3301      	adds	r3, #1
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	7dfa      	ldrb	r2, [r7, #23]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	dbec      	blt.n	800728a <HAL_UART_RxCpltCallback+0x466>
					complete_recv = 1;
 80072b0:	4b64      	ldr	r3, [pc, #400]	; (8007444 <HAL_UART_RxCpltCallback+0x620>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
					received_Length = data_length;
 80072b6:	4a64      	ldr	r2, [pc, #400]	; (8007448 <HAL_UART_RxCpltCallback+0x624>)
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	7013      	strb	r3, [r2, #0]
					if (complete_recv == 1 && mode == 0) {
 80072bc:	4b61      	ldr	r3, [pc, #388]	; (8007444 <HAL_UART_RxCpltCallback+0x620>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d118      	bne.n	80072f6 <HAL_UART_RxCpltCallback+0x4d2>
 80072c4:	4b61      	ldr	r3, [pc, #388]	; (800744c <HAL_UART_RxCpltCallback+0x628>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d114      	bne.n	80072f6 <HAL_UART_RxCpltCallback+0x4d2>
						HAL_UART_Transmit(&huart1, (uint8_t*) received_Data,
 80072cc:	4b5e      	ldr	r3, [pc, #376]	; (8007448 <HAL_UART_RxCpltCallback+0x624>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072d6:	495a      	ldr	r1, [pc, #360]	; (8007440 <HAL_UART_RxCpltCallback+0x61c>)
 80072d8:	4857      	ldr	r0, [pc, #348]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 80072da:	f002 fb2e 	bl	800993a <HAL_UART_Transmit>
						Show_Question();
 80072de:	f7ff f8bf 	bl	8006460 <Show_Question>
						HAL_TIM_Base_Start_IT(&htim3);
 80072e2:	485b      	ldr	r0, [pc, #364]	; (8007450 <HAL_UART_RxCpltCallback+0x62c>)
 80072e4:	f001 fed0 	bl	8009088 <HAL_TIM_Base_Start_IT>
						mode = 1;
 80072e8:	4b58      	ldr	r3, [pc, #352]	; (800744c <HAL_UART_RxCpltCallback+0x628>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
						complete_recv = 0;
 80072ee:	4b55      	ldr	r3, [pc, #340]	; (8007444 <HAL_UART_RxCpltCallback+0x620>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
					if (complete_recv == 1 && mode == 0) {
 80072f4:	e0e8      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
					} else if (complete_recv == 1) {
 80072f6:	4b53      	ldr	r3, [pc, #332]	; (8007444 <HAL_UART_RxCpltCallback+0x620>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	f040 80e4 	bne.w	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
						HAL_UART_Transmit(&huart1, (uint8_t*) received_Data,
 8007300:	4b51      	ldr	r3, [pc, #324]	; (8007448 <HAL_UART_RxCpltCallback+0x624>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b29a      	uxth	r2, r3
 8007306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800730a:	494d      	ldr	r1, [pc, #308]	; (8007440 <HAL_UART_RxCpltCallback+0x61c>)
 800730c:	484a      	ldr	r0, [pc, #296]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 800730e:	f002 fb14 	bl	800993a <HAL_UART_Transmit>
						Show_Feedback();
 8007312:	f7ff fa11 	bl	8006738 <Show_Feedback>
						mode = 0;
 8007316:	4b4d      	ldr	r3, [pc, #308]	; (800744c <HAL_UART_RxCpltCallback+0x628>)
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
						complete_recv = 0;
 800731c:	4b49      	ldr	r3, [pc, #292]	; (8007444 <HAL_UART_RxCpltCallback+0x620>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e0d1      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
				} else if (strncmp(uart2_rx_buffer, (uint8_t*) "SEND FAIL", 9)
 8007324:	2209      	movs	r2, #9
 8007326:	494b      	ldr	r1, [pc, #300]	; (8007454 <HAL_UART_RxCpltCallback+0x630>)
 8007328:	4837      	ldr	r0, [pc, #220]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 800732a:	f003 f873 	bl	800a414 <strncmp>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <HAL_UART_RxCpltCallback+0x526>
					init_var();
 8007334:	f000 f950 	bl	80075d8 <init_var>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	b29a      	uxth	r2, r3
 800733c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007340:	4931      	ldr	r1, [pc, #196]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007342:	483d      	ldr	r0, [pc, #244]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 8007344:	f002 faf9 	bl	800993a <HAL_UART_Transmit>
 8007348:	e0be      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
				} else if (strncmp(uart2_rx_buffer, (uint8_t*) "0,CLOSE OK", 10)
 800734a:	220a      	movs	r2, #10
 800734c:	4942      	ldr	r1, [pc, #264]	; (8007458 <HAL_UART_RxCpltCallback+0x634>)
 800734e:	482e      	ldr	r0, [pc, #184]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007350:	f003 f860 	bl	800a414 <strncmp>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	f040 80b6 	bne.w	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
					connect_flag = 1;
 800735c:	4b2b      	ldr	r3, [pc, #172]	; (800740c <HAL_UART_RxCpltCallback+0x5e8>)
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
					sending_flag = 0;
 8007362:	4b3e      	ldr	r3, [pc, #248]	; (800745c <HAL_UART_RxCpltCallback+0x638>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
					link_number = -1;
 8007368:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <HAL_UART_RxCpltCallback+0x5f4>)
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	601a      	str	r2, [r3, #0]
					connection_counter = 0;
 8007370:	4b2c      	ldr	r3, [pc, #176]	; (8007424 <HAL_UART_RxCpltCallback+0x600>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
					timer_count = 0;
 8007376:	4b3a      	ldr	r3, [pc, #232]	; (8007460 <HAL_UART_RxCpltCallback+0x63c>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	b29a      	uxth	r2, r3
 8007380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007384:	4920      	ldr	r1, [pc, #128]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007386:	482c      	ldr	r0, [pc, #176]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 8007388:	f002 fad7 	bl	800993a <HAL_UART_Transmit>
 800738c:	e09c      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT\r\n", 11) == 0) {
 800738e:	220b      	movs	r2, #11
 8007390:	4934      	ldr	r1, [pc, #208]	; (8007464 <HAL_UART_RxCpltCallback+0x640>)
 8007392:	481d      	ldr	r0, [pc, #116]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 8007394:	f003 f83e 	bl	800a414 <strncmp>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d118      	bne.n	80073d0 <HAL_UART_RxCpltCallback+0x5ac>
				link_number = 0;
 800739e:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <HAL_UART_RxCpltCallback+0x5f4>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
				connect_flag = 2;
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_UART_RxCpltCallback+0x5e8>)
 80073a6:	2202      	movs	r2, #2
 80073a8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 80073aa:	2201      	movs	r2, #1
 80073ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073b0:	4817      	ldr	r0, [pc, #92]	; (8007410 <HAL_UART_RxCpltCallback+0x5ec>)
 80073b2:	f001 f9ce 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 80073b6:	2200      	movs	r2, #0
 80073b8:	2104      	movs	r1, #4
 80073ba:	4816      	ldr	r0, [pc, #88]	; (8007414 <HAL_UART_RxCpltCallback+0x5f0>)
 80073bc:	f001 f9c9 	bl	8008752 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t*) "Connection on id 0\r\n",
 80073c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073c4:	2214      	movs	r2, #20
 80073c6:	4928      	ldr	r1, [pc, #160]	; (8007468 <HAL_UART_RxCpltCallback+0x644>)
 80073c8:	481b      	ldr	r0, [pc, #108]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 80073ca:	f002 fab6 	bl	800993a <HAL_UART_Transmit>
 80073ce:	e07b      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT FAIL\r\n", 16) == 0||
 80073d0:	2210      	movs	r2, #16
 80073d2:	4926      	ldr	r1, [pc, #152]	; (800746c <HAL_UART_RxCpltCallback+0x648>)
 80073d4:	480c      	ldr	r0, [pc, #48]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 80073d6:	f003 f81d 	bl	800a414 <strncmp>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d006      	beq.n	80073ee <HAL_UART_RxCpltCallback+0x5ca>
			strstr(uart2_rx_buffer, "0,CLOSED\r\n") != NULL) {
 80073e0:	4923      	ldr	r1, [pc, #140]	; (8007470 <HAL_UART_RxCpltCallback+0x64c>)
 80073e2:	4809      	ldr	r0, [pc, #36]	; (8007408 <HAL_UART_RxCpltCallback+0x5e4>)
 80073e4:	f003 f828 	bl	800a438 <strstr>
 80073e8:	4603      	mov	r3, r0
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT FAIL\r\n", 16) == 0||
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d044      	beq.n	8007478 <HAL_UART_RxCpltCallback+0x654>
				init_var();
 80073ee:	f000 f8f3 	bl	80075d8 <init_var>
				HAL_UART_Transmit(&huart1,
 80073f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f6:	221a      	movs	r2, #26
 80073f8:	491e      	ldr	r1, [pc, #120]	; (8007474 <HAL_UART_RxCpltCallback+0x650>)
 80073fa:	480f      	ldr	r0, [pc, #60]	; (8007438 <HAL_UART_RxCpltCallback+0x614>)
 80073fc:	f002 fa9d 	bl	800993a <HAL_UART_Transmit>
 8007400:	e062      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
 8007402:	bf00      	nop
 8007404:	0800ae60 	.word	0x0800ae60
 8007408:	20002234 	.word	0x20002234
 800740c:	200010b0 	.word	0x200010b0
 8007410:	40010800 	.word	0x40010800
 8007414:	40011400 	.word	0x40011400
 8007418:	20000008 	.word	0x20000008
 800741c:	0800ae70 	.word	0x0800ae70
 8007420:	0800ae74 	.word	0x0800ae74
 8007424:	200010bc 	.word	0x200010bc
 8007428:	0800ae80 	.word	0x0800ae80
 800742c:	0800ae08 	.word	0x0800ae08
 8007430:	0800ae94 	.word	0x0800ae94
 8007434:	0800aeb0 	.word	0x0800aeb0
 8007438:	200021ac 	.word	0x200021ac
 800743c:	0800aec4 	.word	0x0800aec4
 8007440:	2000009c 	.word	0x2000009c
 8007444:	200008a0 	.word	0x200008a0
 8007448:	2000089c 	.word	0x2000089c
 800744c:	200010ac 	.word	0x200010ac
 8007450:	20001120 	.word	0x20001120
 8007454:	0800aecc 	.word	0x0800aecc
 8007458:	0800aed8 	.word	0x0800aed8
 800745c:	200010b4 	.word	0x200010b4
 8007460:	200010b8 	.word	0x200010b8
 8007464:	0800aee4 	.word	0x0800aee4
 8007468:	0800aef0 	.word	0x0800aef0
 800746c:	0800af08 	.word	0x0800af08
 8007470:	0800af1c 	.word	0x0800af1c
 8007474:	0800af28 	.word	0x0800af28
			} else if (strncmp(uart2_rx_buffer, "0,CLOSED\r\n", 10) == 0) {
 8007478:	220a      	movs	r2, #10
 800747a:	491c      	ldr	r1, [pc, #112]	; (80074ec <HAL_UART_RxCpltCallback+0x6c8>)
 800747c:	481c      	ldr	r0, [pc, #112]	; (80074f0 <HAL_UART_RxCpltCallback+0x6cc>)
 800747e:	f002 ffc9 	bl	800a414 <strncmp>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d117      	bne.n	80074b8 <HAL_UART_RxCpltCallback+0x694>
				connect_flag = 1;
 8007488:	4b1a      	ldr	r3, [pc, #104]	; (80074f4 <HAL_UART_RxCpltCallback+0x6d0>)
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]
				sending_flag = 0;
 800748e:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <HAL_UART_RxCpltCallback+0x6d4>)
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
				link_number = -1;
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <HAL_UART_RxCpltCallback+0x6d8>)
 8007496:	f04f 32ff 	mov.w	r2, #4294967295
 800749a:	601a      	str	r2, [r3, #0]
				connection_counter = 0;
 800749c:	4b18      	ldr	r3, [pc, #96]	; (8007500 <HAL_UART_RxCpltCallback+0x6dc>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
				timer_count = 0;
 80074a2:	4b18      	ldr	r3, [pc, #96]	; (8007504 <HAL_UART_RxCpltCallback+0x6e0>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,
 80074a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074ac:	221a      	movs	r2, #26
 80074ae:	4916      	ldr	r1, [pc, #88]	; (8007508 <HAL_UART_RxCpltCallback+0x6e4>)
 80074b0:	4816      	ldr	r0, [pc, #88]	; (800750c <HAL_UART_RxCpltCallback+0x6e8>)
 80074b2:	f002 fa42 	bl	800993a <HAL_UART_Transmit>
 80074b6:	e007      	b.n	80074c8 <HAL_UART_RxCpltCallback+0x6a4>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074c0:	490b      	ldr	r1, [pc, #44]	; (80074f0 <HAL_UART_RxCpltCallback+0x6cc>)
 80074c2:	4812      	ldr	r0, [pc, #72]	; (800750c <HAL_UART_RxCpltCallback+0x6e8>)
 80074c4:	f002 fa39 	bl	800993a <HAL_UART_Transmit>
			memset(uart2_rx_buffer, 0, data_length);
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	461a      	mov	r2, r3
 80074cc:	2100      	movs	r1, #0
 80074ce:	4808      	ldr	r0, [pc, #32]	; (80074f0 <HAL_UART_RxCpltCallback+0x6cc>)
 80074d0:	f002 ff78 	bl	800a3c4 <memset>
			data_length = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	75fb      	strb	r3, [r7, #23]
			HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 80074d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074dc:	4904      	ldr	r1, [pc, #16]	; (80074f0 <HAL_UART_RxCpltCallback+0x6cc>)
 80074de:	480c      	ldr	r0, [pc, #48]	; (8007510 <HAL_UART_RxCpltCallback+0x6ec>)
 80074e0:	f002 fabe 	bl	8009a60 <HAL_UART_Receive_DMA>
}
 80074e4:	bf00      	nop
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	0800af1c 	.word	0x0800af1c
 80074f0:	20002234 	.word	0x20002234
 80074f4:	200010b0 	.word	0x200010b0
 80074f8:	200010b4 	.word	0x200010b4
 80074fc:	20000008 	.word	0x20000008
 8007500:	200010bc 	.word	0x200010bc
 8007504:	200010b8 	.word	0x200010b8
 8007508:	0800af44 	.word	0x0800af44
 800750c:	200021ac 	.word	0x200021ac
 8007510:	20002a7c 	.word	0x20002a7c

08007514 <send_cmd>:

void send_cmd(uint8_t *cmd, int delay_time) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) cmd, strlen(cmd), 0xffff);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7f8 fe8c 	bl	800023c <strlen>
 8007524:	4603      	mov	r3, r0
 8007526:	b29a      	uxth	r2, r3
 8007528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4805      	ldr	r0, [pc, #20]	; (8007544 <send_cmd+0x30>)
 8007530:	f002 fa03 	bl	800993a <HAL_UART_Transmit>
	HAL_Delay(delay_time);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f9ac 	bl	8007894 <HAL_Delay>
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20002a7c 	.word	0x20002a7c

08007548 <send_message>:

void send_message(uint8_t *msg) {
 8007548:	b590      	push	{r4, r7, lr}
 800754a:	b09d      	sub	sp, #116	; 0x74
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
	HAL_Delay(400);
 8007550:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007554:	f000 f99e 	bl	8007894 <HAL_Delay>
	uint8_t activate[100];
	sprintf(activate, "AT+CIPSEND=%d,%d\r\n", link_number, strlen(msg));
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <send_message+0x54>)
 800755a:	681c      	ldr	r4, [r3, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7f8 fe6d 	bl	800023c <strlen>
 8007562:	4603      	mov	r3, r0
 8007564:	f107 000c 	add.w	r0, r7, #12
 8007568:	4622      	mov	r2, r4
 800756a:	490d      	ldr	r1, [pc, #52]	; (80075a0 <send_message+0x58>)
 800756c:	f002 ff32 	bl	800a3d4 <siprintf>
	send_cmd((uint8_t*) activate, 2000);
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ffcb 	bl	8007514 <send_cmd>
	send_msg_uart1(msg, 500);
 800757e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f80e 	bl	80075a4 <send_msg_uart1>
	//printOut(msg, strlen(msg), 1, connect_flag);
	send_cmd(msg, 1000);
 8007588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ffc1 	bl	8007514 <send_cmd>
}
 8007592:	bf00      	nop
 8007594:	3774      	adds	r7, #116	; 0x74
 8007596:	46bd      	mov	sp, r7
 8007598:	bd90      	pop	{r4, r7, pc}
 800759a:	bf00      	nop
 800759c:	20000008 	.word	0x20000008
 80075a0:	0800af60 	.word	0x0800af60

080075a4 <send_msg_uart1>:

void send_msg_uart1(uint8_t *msg, int delay_time) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 0xffff);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7f8 fe44 	bl	800023c <strlen>
 80075b4:	4603      	mov	r3, r0
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4805      	ldr	r0, [pc, #20]	; (80075d4 <send_msg_uart1+0x30>)
 80075c0:	f002 f9bb 	bl	800993a <HAL_UART_Transmit>
	HAL_Delay(delay_time);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f964 	bl	8007894 <HAL_Delay>
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	200021ac 	.word	0x200021ac

080075d8 <init_var>:

void init_var() {
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
	connect_flag = 0;
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <init_var+0x40>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
	sending_flag = 0;
 80075e2:	4b0e      	ldr	r3, [pc, #56]	; (800761c <init_var+0x44>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
	link_number = -1;
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <init_var+0x48>)
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295
 80075ee:	601a      	str	r2, [r3, #0]
	connection_counter = 0;
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <init_var+0x4c>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
	timer_count = 0;
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <init_var+0x50>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
	//StateChange(connect_flag);
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80075fc:	2201      	movs	r2, #1
 80075fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007602:	480a      	ldr	r0, [pc, #40]	; (800762c <init_var+0x54>)
 8007604:	f001 f8a5 	bl	8008752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8007608:	2201      	movs	r2, #1
 800760a:	2104      	movs	r1, #4
 800760c:	4808      	ldr	r0, [pc, #32]	; (8007630 <init_var+0x58>)
 800760e:	f001 f8a0 	bl	8008752 <HAL_GPIO_WritePin>
}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200010b0 	.word	0x200010b0
 800761c:	200010b4 	.word	0x200010b4
 8007620:	20000008 	.word	0x20000008
 8007624:	200010bc 	.word	0x200010bc
 8007628:	200010b8 	.word	0x200010b8
 800762c:	40010800 	.word	0x40010800
 8007630:	40011400 	.word	0x40011400

08007634 <connect_to_wifi>:

void connect_to_wifi() {
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
	init_var();
 8007638:	f7ff ffce 	bl	80075d8 <init_var>
	send_msg_uart1((uint8_t*) "start connect to wifi\r\n", 2000);
 800763c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007640:	4811      	ldr	r0, [pc, #68]	; (8007688 <connect_to_wifi+0x54>)
 8007642:	f7ff ffaf 	bl	80075a4 <send_msg_uart1>
	send_cmd("AT+RST\r\n", 5000);
 8007646:	f241 3188 	movw	r1, #5000	; 0x1388
 800764a:	4810      	ldr	r0, [pc, #64]	; (800768c <connect_to_wifi+0x58>)
 800764c:	f7ff ff62 	bl	8007514 <send_cmd>
	send_cmd("AT+CWMODE=1\r\n", 2000);
 8007650:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007654:	480e      	ldr	r0, [pc, #56]	; (8007690 <connect_to_wifi+0x5c>)
 8007656:	f7ff ff5d 	bl	8007514 <send_cmd>
	send_cmd("AT+RST\r\n", 5000);
 800765a:	f241 3188 	movw	r1, #5000	; 0x1388
 800765e:	480b      	ldr	r0, [pc, #44]	; (800768c <connect_to_wifi+0x58>)
 8007660:	f7ff ff58 	bl	8007514 <send_cmd>
	send_cmd("AT+CWJAP=\"SUSTC-WIFI-FAKE\",\"987654321\"\r\n", 10000);
 8007664:	f242 7110 	movw	r1, #10000	; 0x2710
 8007668:	480a      	ldr	r0, [pc, #40]	; (8007694 <connect_to_wifi+0x60>)
 800766a:	f7ff ff53 	bl	8007514 <send_cmd>
	send_cmd("AT+CIPMUX=1\r\n", 5000);
 800766e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007672:	4809      	ldr	r0, [pc, #36]	; (8007698 <connect_to_wifi+0x64>)
 8007674:	f7ff ff4e 	bl	8007514 <send_cmd>
	send_cmd("AT+CIPSERVER=1\r\n", 5000);
 8007678:	f241 3188 	movw	r1, #5000	; 0x1388
 800767c:	4807      	ldr	r0, [pc, #28]	; (800769c <connect_to_wifi+0x68>)
 800767e:	f7ff ff49 	bl	8007514 <send_cmd>
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	0800af74 	.word	0x0800af74
 800768c:	0800af8c 	.word	0x0800af8c
 8007690:	0800af98 	.word	0x0800af98
 8007694:	0800afa8 	.word	0x0800afa8
 8007698:	0800afd4 	.word	0x0800afd4
 800769c:	0800afe4 	.word	0x0800afe4

080076a0 <init_server>:

void init_server() {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
	init_var();
 80076a4:	f7ff ff98 	bl	80075d8 <init_var>
	send_msg_uart1((uint8_t*) "start initialize server\r\n", 0);
 80076a8:	2100      	movs	r1, #0
 80076aa:	4811      	ldr	r0, [pc, #68]	; (80076f0 <init_server+0x50>)
 80076ac:	f7ff ff7a 	bl	80075a4 <send_msg_uart1>
	send_cmd("AT+CWMODE=3\r\n", 2000);
 80076b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80076b4:	480f      	ldr	r0, [pc, #60]	; (80076f4 <init_server+0x54>)
 80076b6:	f7ff ff2d 	bl	8007514 <send_cmd>
	send_cmd("AT+RST\r\n", 5000);
 80076ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80076be:	480e      	ldr	r0, [pc, #56]	; (80076f8 <init_server+0x58>)
 80076c0:	f7ff ff28 	bl	8007514 <send_cmd>
	send_cmd("AT+CWSAP=\"SUSTC-WIFI-FAKE\",\"987654321\",1,0,4,0\r\n", 2000);
 80076c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80076c8:	480c      	ldr	r0, [pc, #48]	; (80076fc <init_server+0x5c>)
 80076ca:	f7ff ff23 	bl	8007514 <send_cmd>
	send_cmd("AT+CIPMUX=1\r\n", 2000);
 80076ce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80076d2:	480b      	ldr	r0, [pc, #44]	; (8007700 <init_server+0x60>)
 80076d4:	f7ff ff1e 	bl	8007514 <send_cmd>
	send_cmd("AT+CIPSERVER=1,8089\r\n", 2000);
 80076d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80076dc:	4809      	ldr	r0, [pc, #36]	; (8007704 <init_server+0x64>)
 80076de:	f7ff ff19 	bl	8007514 <send_cmd>
	send_msg_uart1((uint8_t*) "end initialize server\r\n", 0);
 80076e2:	2100      	movs	r1, #0
 80076e4:	4808      	ldr	r0, [pc, #32]	; (8007708 <init_server+0x68>)
 80076e6:	f7ff ff5d 	bl	80075a4 <send_msg_uart1>
}
 80076ea:	bf00      	nop
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	0800aff8 	.word	0x0800aff8
 80076f4:	0800ad38 	.word	0x0800ad38
 80076f8:	0800af8c 	.word	0x0800af8c
 80076fc:	0800b014 	.word	0x0800b014
 8007700:	0800afd4 	.word	0x0800afd4
 8007704:	0800b048 	.word	0x0800b048
 8007708:	0800b060 	.word	0x0800b060

0800770c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007714:	4a14      	ldr	r2, [pc, #80]	; (8007768 <_sbrk+0x5c>)
 8007716:	4b15      	ldr	r3, [pc, #84]	; (800776c <_sbrk+0x60>)
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007720:	4b13      	ldr	r3, [pc, #76]	; (8007770 <_sbrk+0x64>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007728:	4b11      	ldr	r3, [pc, #68]	; (8007770 <_sbrk+0x64>)
 800772a:	4a12      	ldr	r2, [pc, #72]	; (8007774 <_sbrk+0x68>)
 800772c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800772e:	4b10      	ldr	r3, [pc, #64]	; (8007770 <_sbrk+0x64>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d207      	bcs.n	800774c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800773c:	f002 fe18 	bl	800a370 <__errno>
 8007740:	4603      	mov	r3, r0
 8007742:	220c      	movs	r2, #12
 8007744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007746:	f04f 33ff 	mov.w	r3, #4294967295
 800774a:	e009      	b.n	8007760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800774c:	4b08      	ldr	r3, [pc, #32]	; (8007770 <_sbrk+0x64>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <_sbrk+0x64>)
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	4a05      	ldr	r2, [pc, #20]	; (8007770 <_sbrk+0x64>)
 800775c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800775e:	68fb      	ldr	r3, [r7, #12]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	2000c000 	.word	0x2000c000
 800776c:	00000400 	.word	0x00000400
 8007770:	200010c0 	.word	0x200010c0
 8007774:	20002ad0 	.word	0x20002ad0

08007778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800777c:	bf00      	nop
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007784:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007786:	e003      	b.n	8007790 <LoopCopyDataInit>

08007788 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007788:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800778a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800778c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800778e:	3104      	adds	r1, #4

08007790 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007790:	480a      	ldr	r0, [pc, #40]	; (80077bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007794:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007796:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007798:	d3f6      	bcc.n	8007788 <CopyDataInit>
  ldr r2, =_sbss
 800779a:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800779c:	e002      	b.n	80077a4 <LoopFillZerobss>

0800779e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800779e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80077a0:	f842 3b04 	str.w	r3, [r2], #4

080077a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80077a4:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80077a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80077a8:	d3f9      	bcc.n	800779e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80077aa:	f7ff ffe5 	bl	8007778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077ae:	f002 fde5 	bl	800a37c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80077b2:	f7fe fbd5 	bl	8005f60 <main>
  bx lr
 80077b6:	4770      	bx	lr
  ldr r3, =_sidata
 80077b8:	0800c89c 	.word	0x0800c89c
  ldr r0, =_sdata
 80077bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80077c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80077c4:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80077c8:	20002ad0 	.word	0x20002ad0

080077cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80077cc:	e7fe      	b.n	80077cc <ADC1_2_IRQHandler>
	...

080077d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077d4:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <HAL_Init+0x28>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a07      	ldr	r2, [pc, #28]	; (80077f8 <HAL_Init+0x28>)
 80077da:	f043 0310 	orr.w	r3, r3, #16
 80077de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077e0:	2003      	movs	r0, #3
 80077e2:	f000 f947 	bl	8007a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077e6:	2000      	movs	r0, #0
 80077e8:	f000 f808 	bl	80077fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077ec:	f7ff f888 	bl	8006900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	40022000 	.word	0x40022000

080077fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007804:	4b12      	ldr	r3, [pc, #72]	; (8007850 <HAL_InitTick+0x54>)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4b12      	ldr	r3, [pc, #72]	; (8007854 <HAL_InitTick+0x58>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007812:	fbb3 f3f1 	udiv	r3, r3, r1
 8007816:	fbb2 f3f3 	udiv	r3, r2, r3
 800781a:	4618      	mov	r0, r3
 800781c:	f000 f95f 	bl	8007ade <HAL_SYSTICK_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e00e      	b.n	8007848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b0f      	cmp	r3, #15
 800782e:	d80a      	bhi.n	8007846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007830:	2200      	movs	r2, #0
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	f000 f927 	bl	8007a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800783c:	4a06      	ldr	r2, [pc, #24]	; (8007858 <HAL_InitTick+0x5c>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e000      	b.n	8007848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	2000000c 	.word	0x2000000c
 8007854:	20000014 	.word	0x20000014
 8007858:	20000010 	.word	0x20000010

0800785c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <HAL_IncTick+0x1c>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <HAL_IncTick+0x20>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4413      	add	r3, r2
 800786c:	4a03      	ldr	r2, [pc, #12]	; (800787c <HAL_IncTick+0x20>)
 800786e:	6013      	str	r3, [r2, #0]
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	20000014 	.word	0x20000014
 800787c:	20002abc 	.word	0x20002abc

08007880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  return uwTick;
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <HAL_GetTick+0x10>)
 8007886:	681b      	ldr	r3, [r3, #0]
}
 8007888:	4618      	mov	r0, r3
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr
 8007890:	20002abc 	.word	0x20002abc

08007894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800789c:	f7ff fff0 	bl	8007880 <HAL_GetTick>
 80078a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d005      	beq.n	80078ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <HAL_Delay+0x44>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80078ba:	bf00      	nop
 80078bc:	f7ff ffe0 	bl	8007880 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d8f7      	bhi.n	80078bc <HAL_Delay+0x28>
  {
  }
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000014 	.word	0x20000014

080078dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <__NVIC_SetPriorityGrouping+0x44>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078f8:	4013      	ands	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800790e:	4a04      	ldr	r2, [pc, #16]	; (8007920 <__NVIC_SetPriorityGrouping+0x44>)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	60d3      	str	r3, [r2, #12]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00

08007924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <__NVIC_GetPriorityGrouping+0x18>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	0a1b      	lsrs	r3, r3, #8
 800792e:	f003 0307 	and.w	r3, r3, #7
}
 8007932:	4618      	mov	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	db0b      	blt.n	800796a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	f003 021f 	and.w	r2, r3, #31
 8007958:	4906      	ldr	r1, [pc, #24]	; (8007974 <__NVIC_EnableIRQ+0x34>)
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	2001      	movs	r0, #1
 8007962:	fa00 f202 	lsl.w	r2, r0, r2
 8007966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	bc80      	pop	{r7}
 8007972:	4770      	bx	lr
 8007974:	e000e100 	.word	0xe000e100

08007978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007988:	2b00      	cmp	r3, #0
 800798a:	db0a      	blt.n	80079a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	b2da      	uxtb	r2, r3
 8007990:	490c      	ldr	r1, [pc, #48]	; (80079c4 <__NVIC_SetPriority+0x4c>)
 8007992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007996:	0112      	lsls	r2, r2, #4
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	440b      	add	r3, r1
 800799c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079a0:	e00a      	b.n	80079b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	4908      	ldr	r1, [pc, #32]	; (80079c8 <__NVIC_SetPriority+0x50>)
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	3b04      	subs	r3, #4
 80079b0:	0112      	lsls	r2, r2, #4
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	440b      	add	r3, r1
 80079b6:	761a      	strb	r2, [r3, #24]
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	e000e100 	.word	0xe000e100
 80079c8:	e000ed00 	.word	0xe000ed00

080079cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b089      	sub	sp, #36	; 0x24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f1c3 0307 	rsb	r3, r3, #7
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	bf28      	it	cs
 80079ea:	2304      	movcs	r3, #4
 80079ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	3304      	adds	r3, #4
 80079f2:	2b06      	cmp	r3, #6
 80079f4:	d902      	bls.n	80079fc <NVIC_EncodePriority+0x30>
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	3b03      	subs	r3, #3
 80079fa:	e000      	b.n	80079fe <NVIC_EncodePriority+0x32>
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a00:	f04f 32ff 	mov.w	r2, #4294967295
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	43da      	mvns	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	401a      	ands	r2, r3
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a14:	f04f 31ff 	mov.w	r1, #4294967295
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1e:	43d9      	mvns	r1, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a24:	4313      	orrs	r3, r2
         );
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3724      	adds	r7, #36	; 0x24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a40:	d301      	bcc.n	8007a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a42:	2301      	movs	r3, #1
 8007a44:	e00f      	b.n	8007a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <SysTick_Config+0x40>)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a4e:	210f      	movs	r1, #15
 8007a50:	f04f 30ff 	mov.w	r0, #4294967295
 8007a54:	f7ff ff90 	bl	8007978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <SysTick_Config+0x40>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <SysTick_Config+0x40>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	e000e010 	.word	0xe000e010

08007a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ff2d 	bl	80078dc <__NVIC_SetPriorityGrouping>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	4603      	mov	r3, r0
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a9c:	f7ff ff42 	bl	8007924 <__NVIC_GetPriorityGrouping>
 8007aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	f7ff ff90 	bl	80079cc <NVIC_EncodePriority>
 8007aac:	4602      	mov	r2, r0
 8007aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff ff5f 	bl	8007978 <__NVIC_SetPriority>
}
 8007aba:	bf00      	nop
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	4603      	mov	r3, r0
 8007aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff ff35 	bl	8007940 <__NVIC_EnableIRQ>
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff ffa2 	bl	8007a30 <SysTick_Config>
 8007aec:	4603      	mov	r3, r0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e059      	b.n	8007bc2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <HAL_DMA_Init+0xd4>)
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d80f      	bhi.n	8007b3a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4b2b      	ldr	r3, [pc, #172]	; (8007bd0 <HAL_DMA_Init+0xd8>)
 8007b22:	4413      	add	r3, r2
 8007b24:	4a2b      	ldr	r2, [pc, #172]	; (8007bd4 <HAL_DMA_Init+0xdc>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	091b      	lsrs	r3, r3, #4
 8007b2c:	009a      	lsls	r2, r3, #2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a28      	ldr	r2, [pc, #160]	; (8007bd8 <HAL_DMA_Init+0xe0>)
 8007b36:	63da      	str	r2, [r3, #60]	; 0x3c
 8007b38:	e00e      	b.n	8007b58 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <HAL_DMA_Init+0xe4>)
 8007b42:	4413      	add	r3, r2
 8007b44:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <HAL_DMA_Init+0xdc>)
 8007b46:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	009a      	lsls	r2, r3, #2
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a22      	ldr	r2, [pc, #136]	; (8007be0 <HAL_DMA_Init+0xe8>)
 8007b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr
 8007bcc:	40020407 	.word	0x40020407
 8007bd0:	bffdfff8 	.word	0xbffdfff8
 8007bd4:	cccccccd 	.word	0xcccccccd
 8007bd8:	40020000 	.word	0x40020000
 8007bdc:	bffdfbf8 	.word	0xbffdfbf8
 8007be0:	40020400 	.word	0x40020400

08007be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_DMA_Start_IT+0x20>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e04a      	b.n	8007c9a <HAL_DMA_Start_IT+0xb6>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d13a      	bne.n	8007c8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fbb0 	bl	80083a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 020e 	orr.w	r2, r2, #14
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	e00f      	b.n	8007c7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0204 	bic.w	r2, r2, #4
 8007c68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 020a 	orr.w	r2, r2, #10
 8007c78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0201 	orr.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	e005      	b.n	8007c98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c94:	2302      	movs	r3, #2
 8007c96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d008      	beq.n	8007cca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e020      	b.n	8007d0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 020e 	bic.w	r2, r2, #14
 8007cd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0201 	bic.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8007cf8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr
	...

08007d18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d005      	beq.n	8007d3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2204      	movs	r2, #4
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	73fb      	strb	r3, [r7, #15]
 8007d38:	e0d6      	b.n	8007ee8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 020e 	bic.w	r2, r2, #14
 8007d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4b64      	ldr	r3, [pc, #400]	; (8007ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d958      	bls.n	8007e18 <HAL_DMA_Abort_IT+0x100>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a63      	ldr	r2, [pc, #396]	; (8007ef8 <HAL_DMA_Abort_IT+0x1e0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d04f      	beq.n	8007e10 <HAL_DMA_Abort_IT+0xf8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a61      	ldr	r2, [pc, #388]	; (8007efc <HAL_DMA_Abort_IT+0x1e4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d048      	beq.n	8007e0c <HAL_DMA_Abort_IT+0xf4>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a60      	ldr	r2, [pc, #384]	; (8007f00 <HAL_DMA_Abort_IT+0x1e8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d040      	beq.n	8007e06 <HAL_DMA_Abort_IT+0xee>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a5e      	ldr	r2, [pc, #376]	; (8007f04 <HAL_DMA_Abort_IT+0x1ec>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d038      	beq.n	8007e00 <HAL_DMA_Abort_IT+0xe8>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a5d      	ldr	r2, [pc, #372]	; (8007f08 <HAL_DMA_Abort_IT+0x1f0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d030      	beq.n	8007dfa <HAL_DMA_Abort_IT+0xe2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a5b      	ldr	r2, [pc, #364]	; (8007f0c <HAL_DMA_Abort_IT+0x1f4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d028      	beq.n	8007df4 <HAL_DMA_Abort_IT+0xdc>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a53      	ldr	r2, [pc, #332]	; (8007ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d020      	beq.n	8007dee <HAL_DMA_Abort_IT+0xd6>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a57      	ldr	r2, [pc, #348]	; (8007f10 <HAL_DMA_Abort_IT+0x1f8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d019      	beq.n	8007dea <HAL_DMA_Abort_IT+0xd2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a56      	ldr	r2, [pc, #344]	; (8007f14 <HAL_DMA_Abort_IT+0x1fc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d012      	beq.n	8007de6 <HAL_DMA_Abort_IT+0xce>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a54      	ldr	r2, [pc, #336]	; (8007f18 <HAL_DMA_Abort_IT+0x200>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00a      	beq.n	8007de0 <HAL_DMA_Abort_IT+0xc8>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a53      	ldr	r2, [pc, #332]	; (8007f1c <HAL_DMA_Abort_IT+0x204>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d102      	bne.n	8007dda <HAL_DMA_Abort_IT+0xc2>
 8007dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dd8:	e01b      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dde:	e018      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007de4:	e015      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007de6:	2310      	movs	r3, #16
 8007de8:	e013      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e011      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007df2:	e00e      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007df4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007df8:	e00b      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dfe:	e008      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e04:	e005      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e0a:	e002      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	e000      	b.n	8007e12 <HAL_DMA_Abort_IT+0xfa>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4a43      	ldr	r2, [pc, #268]	; (8007f20 <HAL_DMA_Abort_IT+0x208>)
 8007e14:	6053      	str	r3, [r2, #4]
 8007e16:	e057      	b.n	8007ec8 <HAL_DMA_Abort_IT+0x1b0>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a36      	ldr	r2, [pc, #216]	; (8007ef8 <HAL_DMA_Abort_IT+0x1e0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d04f      	beq.n	8007ec2 <HAL_DMA_Abort_IT+0x1aa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a35      	ldr	r2, [pc, #212]	; (8007efc <HAL_DMA_Abort_IT+0x1e4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d048      	beq.n	8007ebe <HAL_DMA_Abort_IT+0x1a6>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a33      	ldr	r2, [pc, #204]	; (8007f00 <HAL_DMA_Abort_IT+0x1e8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d040      	beq.n	8007eb8 <HAL_DMA_Abort_IT+0x1a0>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <HAL_DMA_Abort_IT+0x1ec>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d038      	beq.n	8007eb2 <HAL_DMA_Abort_IT+0x19a>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a30      	ldr	r2, [pc, #192]	; (8007f08 <HAL_DMA_Abort_IT+0x1f0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d030      	beq.n	8007eac <HAL_DMA_Abort_IT+0x194>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <HAL_DMA_Abort_IT+0x1f4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d028      	beq.n	8007ea6 <HAL_DMA_Abort_IT+0x18e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d020      	beq.n	8007ea0 <HAL_DMA_Abort_IT+0x188>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a2b      	ldr	r2, [pc, #172]	; (8007f10 <HAL_DMA_Abort_IT+0x1f8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d019      	beq.n	8007e9c <HAL_DMA_Abort_IT+0x184>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a29      	ldr	r2, [pc, #164]	; (8007f14 <HAL_DMA_Abort_IT+0x1fc>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d012      	beq.n	8007e98 <HAL_DMA_Abort_IT+0x180>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a28      	ldr	r2, [pc, #160]	; (8007f18 <HAL_DMA_Abort_IT+0x200>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00a      	beq.n	8007e92 <HAL_DMA_Abort_IT+0x17a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <HAL_DMA_Abort_IT+0x204>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d102      	bne.n	8007e8c <HAL_DMA_Abort_IT+0x174>
 8007e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e8a:	e01b      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e90:	e018      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e96:	e015      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007e98:	2310      	movs	r3, #16
 8007e9a:	e013      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e011      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ea4:	e00e      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007ea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007eaa:	e00b      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007eb0:	e008      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eb6:	e005      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ebc:	e002      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007ebe:	2310      	movs	r3, #16
 8007ec0:	e000      	b.n	8007ec4 <HAL_DMA_Abort_IT+0x1ac>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_DMA_Abort_IT+0x20c>)
 8007ec6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
    } 
  }
  return status;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40020080 	.word	0x40020080
 8007ef8:	40020008 	.word	0x40020008
 8007efc:	4002001c 	.word	0x4002001c
 8007f00:	40020030 	.word	0x40020030
 8007f04:	40020044 	.word	0x40020044
 8007f08:	40020058 	.word	0x40020058
 8007f0c:	4002006c 	.word	0x4002006c
 8007f10:	40020408 	.word	0x40020408
 8007f14:	4002041c 	.word	0x4002041c
 8007f18:	40020430 	.word	0x40020430
 8007f1c:	40020444 	.word	0x40020444
 8007f20:	40020400 	.word	0x40020400
 8007f24:	40020000 	.word	0x40020000

08007f28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	2204      	movs	r2, #4
 8007f46:	409a      	lsls	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80d6 	beq.w	80080fe <HAL_DMA_IRQHandler+0x1d6>
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80d0 	beq.w	80080fe <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d107      	bne.n	8007f7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0204 	bic.w	r2, r2, #4
 8007f7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	4b9b      	ldr	r3, [pc, #620]	; (80081f0 <HAL_DMA_IRQHandler+0x2c8>)
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d958      	bls.n	800803a <HAL_DMA_IRQHandler+0x112>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a99      	ldr	r2, [pc, #612]	; (80081f4 <HAL_DMA_IRQHandler+0x2cc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d04f      	beq.n	8008032 <HAL_DMA_IRQHandler+0x10a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a98      	ldr	r2, [pc, #608]	; (80081f8 <HAL_DMA_IRQHandler+0x2d0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d048      	beq.n	800802e <HAL_DMA_IRQHandler+0x106>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a96      	ldr	r2, [pc, #600]	; (80081fc <HAL_DMA_IRQHandler+0x2d4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d040      	beq.n	8008028 <HAL_DMA_IRQHandler+0x100>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a95      	ldr	r2, [pc, #596]	; (8008200 <HAL_DMA_IRQHandler+0x2d8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d038      	beq.n	8008022 <HAL_DMA_IRQHandler+0xfa>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a93      	ldr	r2, [pc, #588]	; (8008204 <HAL_DMA_IRQHandler+0x2dc>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d030      	beq.n	800801c <HAL_DMA_IRQHandler+0xf4>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a92      	ldr	r2, [pc, #584]	; (8008208 <HAL_DMA_IRQHandler+0x2e0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d028      	beq.n	8008016 <HAL_DMA_IRQHandler+0xee>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a89      	ldr	r2, [pc, #548]	; (80081f0 <HAL_DMA_IRQHandler+0x2c8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d020      	beq.n	8008010 <HAL_DMA_IRQHandler+0xe8>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a8e      	ldr	r2, [pc, #568]	; (800820c <HAL_DMA_IRQHandler+0x2e4>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d019      	beq.n	800800c <HAL_DMA_IRQHandler+0xe4>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a8c      	ldr	r2, [pc, #560]	; (8008210 <HAL_DMA_IRQHandler+0x2e8>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d012      	beq.n	8008008 <HAL_DMA_IRQHandler+0xe0>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a8b      	ldr	r2, [pc, #556]	; (8008214 <HAL_DMA_IRQHandler+0x2ec>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00a      	beq.n	8008002 <HAL_DMA_IRQHandler+0xda>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a89      	ldr	r2, [pc, #548]	; (8008218 <HAL_DMA_IRQHandler+0x2f0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d102      	bne.n	8007ffc <HAL_DMA_IRQHandler+0xd4>
 8007ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ffa:	e01b      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8007ffc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008000:	e018      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008006:	e015      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	e013      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 800800c:	2304      	movs	r3, #4
 800800e:	e011      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008010:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008014:	e00e      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800801a:	e00b      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 800801c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008020:	e008      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008026:	e005      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802c:	e002      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	e000      	b.n	8008034 <HAL_DMA_IRQHandler+0x10c>
 8008032:	2304      	movs	r3, #4
 8008034:	4a79      	ldr	r2, [pc, #484]	; (800821c <HAL_DMA_IRQHandler+0x2f4>)
 8008036:	6053      	str	r3, [r2, #4]
 8008038:	e057      	b.n	80080ea <HAL_DMA_IRQHandler+0x1c2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a6d      	ldr	r2, [pc, #436]	; (80081f4 <HAL_DMA_IRQHandler+0x2cc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d04f      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x1bc>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a6b      	ldr	r2, [pc, #428]	; (80081f8 <HAL_DMA_IRQHandler+0x2d0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d048      	beq.n	80080e0 <HAL_DMA_IRQHandler+0x1b8>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a6a      	ldr	r2, [pc, #424]	; (80081fc <HAL_DMA_IRQHandler+0x2d4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d040      	beq.n	80080da <HAL_DMA_IRQHandler+0x1b2>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a68      	ldr	r2, [pc, #416]	; (8008200 <HAL_DMA_IRQHandler+0x2d8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d038      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x1ac>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a67      	ldr	r2, [pc, #412]	; (8008204 <HAL_DMA_IRQHandler+0x2dc>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d030      	beq.n	80080ce <HAL_DMA_IRQHandler+0x1a6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a65      	ldr	r2, [pc, #404]	; (8008208 <HAL_DMA_IRQHandler+0x2e0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d028      	beq.n	80080c8 <HAL_DMA_IRQHandler+0x1a0>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a5d      	ldr	r2, [pc, #372]	; (80081f0 <HAL_DMA_IRQHandler+0x2c8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d020      	beq.n	80080c2 <HAL_DMA_IRQHandler+0x19a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a61      	ldr	r2, [pc, #388]	; (800820c <HAL_DMA_IRQHandler+0x2e4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d019      	beq.n	80080be <HAL_DMA_IRQHandler+0x196>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a60      	ldr	r2, [pc, #384]	; (8008210 <HAL_DMA_IRQHandler+0x2e8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d012      	beq.n	80080ba <HAL_DMA_IRQHandler+0x192>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a5e      	ldr	r2, [pc, #376]	; (8008214 <HAL_DMA_IRQHandler+0x2ec>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00a      	beq.n	80080b4 <HAL_DMA_IRQHandler+0x18c>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a5d      	ldr	r2, [pc, #372]	; (8008218 <HAL_DMA_IRQHandler+0x2f0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d102      	bne.n	80080ae <HAL_DMA_IRQHandler+0x186>
 80080a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080ac:	e01b      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080b2:	e018      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b8:	e015      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080ba:	2340      	movs	r3, #64	; 0x40
 80080bc:	e013      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080be:	2304      	movs	r3, #4
 80080c0:	e011      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80080c6:	e00e      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080cc:	e00b      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080d2:	e008      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080d8:	e005      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080de:	e002      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	e000      	b.n	80080e6 <HAL_DMA_IRQHandler+0x1be>
 80080e4:	2304      	movs	r3, #4
 80080e6:	4a4e      	ldr	r2, [pc, #312]	; (8008220 <HAL_DMA_IRQHandler+0x2f8>)
 80080e8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 8136 	beq.w	8008360 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80080fc:	e130      	b.n	8008360 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	2202      	movs	r2, #2
 8008104:	409a      	lsls	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80f8 	beq.w	8008300 <HAL_DMA_IRQHandler+0x3d8>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80f2 	beq.w	8008300 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 020a 	bic.w	r2, r2, #10
 8008138:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <HAL_DMA_IRQHandler+0x2c8>)
 800814a:	429a      	cmp	r2, r3
 800814c:	d973      	bls.n	8008236 <HAL_DMA_IRQHandler+0x30e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a28      	ldr	r2, [pc, #160]	; (80081f4 <HAL_DMA_IRQHandler+0x2cc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d06a      	beq.n	800822e <HAL_DMA_IRQHandler+0x306>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a26      	ldr	r2, [pc, #152]	; (80081f8 <HAL_DMA_IRQHandler+0x2d0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d063      	beq.n	800822a <HAL_DMA_IRQHandler+0x302>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a25      	ldr	r2, [pc, #148]	; (80081fc <HAL_DMA_IRQHandler+0x2d4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d05b      	beq.n	8008224 <HAL_DMA_IRQHandler+0x2fc>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a23      	ldr	r2, [pc, #140]	; (8008200 <HAL_DMA_IRQHandler+0x2d8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d038      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x2c0>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a22      	ldr	r2, [pc, #136]	; (8008204 <HAL_DMA_IRQHandler+0x2dc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d030      	beq.n	80081e2 <HAL_DMA_IRQHandler+0x2ba>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a20      	ldr	r2, [pc, #128]	; (8008208 <HAL_DMA_IRQHandler+0x2e0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d028      	beq.n	80081dc <HAL_DMA_IRQHandler+0x2b4>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a18      	ldr	r2, [pc, #96]	; (80081f0 <HAL_DMA_IRQHandler+0x2c8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d020      	beq.n	80081d6 <HAL_DMA_IRQHandler+0x2ae>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_DMA_IRQHandler+0x2e4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d019      	beq.n	80081d2 <HAL_DMA_IRQHandler+0x2aa>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <HAL_DMA_IRQHandler+0x2e8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d012      	beq.n	80081ce <HAL_DMA_IRQHandler+0x2a6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a19      	ldr	r2, [pc, #100]	; (8008214 <HAL_DMA_IRQHandler+0x2ec>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00a      	beq.n	80081c8 <HAL_DMA_IRQHandler+0x2a0>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a18      	ldr	r2, [pc, #96]	; (8008218 <HAL_DMA_IRQHandler+0x2f0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d102      	bne.n	80081c2 <HAL_DMA_IRQHandler+0x29a>
 80081bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081c0:	e036      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081c6:	e033      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081cc:	e030      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081ce:	2320      	movs	r3, #32
 80081d0:	e02e      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081d2:	2302      	movs	r3, #2
 80081d4:	e02c      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081da:	e029      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081e0:	e026      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081e6:	e023      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081ec:	e020      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 80081ee:	bf00      	nop
 80081f0:	40020080 	.word	0x40020080
 80081f4:	40020008 	.word	0x40020008
 80081f8:	4002001c 	.word	0x4002001c
 80081fc:	40020030 	.word	0x40020030
 8008200:	40020044 	.word	0x40020044
 8008204:	40020058 	.word	0x40020058
 8008208:	4002006c 	.word	0x4002006c
 800820c:	40020408 	.word	0x40020408
 8008210:	4002041c 	.word	0x4002041c
 8008214:	40020430 	.word	0x40020430
 8008218:	40020444 	.word	0x40020444
 800821c:	40020400 	.word	0x40020400
 8008220:	40020000 	.word	0x40020000
 8008224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008228:	e002      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 800822a:	2320      	movs	r3, #32
 800822c:	e000      	b.n	8008230 <HAL_DMA_IRQHandler+0x308>
 800822e:	2302      	movs	r3, #2
 8008230:	4a4e      	ldr	r2, [pc, #312]	; (800836c <HAL_DMA_IRQHandler+0x444>)
 8008232:	6053      	str	r3, [r2, #4]
 8008234:	e057      	b.n	80082e6 <HAL_DMA_IRQHandler+0x3be>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a4d      	ldr	r2, [pc, #308]	; (8008370 <HAL_DMA_IRQHandler+0x448>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d04f      	beq.n	80082e0 <HAL_DMA_IRQHandler+0x3b8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a4b      	ldr	r2, [pc, #300]	; (8008374 <HAL_DMA_IRQHandler+0x44c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d048      	beq.n	80082dc <HAL_DMA_IRQHandler+0x3b4>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a4a      	ldr	r2, [pc, #296]	; (8008378 <HAL_DMA_IRQHandler+0x450>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d040      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x3ae>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a48      	ldr	r2, [pc, #288]	; (800837c <HAL_DMA_IRQHandler+0x454>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d038      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x3a8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a47      	ldr	r2, [pc, #284]	; (8008380 <HAL_DMA_IRQHandler+0x458>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d030      	beq.n	80082ca <HAL_DMA_IRQHandler+0x3a2>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a45      	ldr	r2, [pc, #276]	; (8008384 <HAL_DMA_IRQHandler+0x45c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d028      	beq.n	80082c4 <HAL_DMA_IRQHandler+0x39c>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a44      	ldr	r2, [pc, #272]	; (8008388 <HAL_DMA_IRQHandler+0x460>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d020      	beq.n	80082be <HAL_DMA_IRQHandler+0x396>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a42      	ldr	r2, [pc, #264]	; (800838c <HAL_DMA_IRQHandler+0x464>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d019      	beq.n	80082ba <HAL_DMA_IRQHandler+0x392>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a41      	ldr	r2, [pc, #260]	; (8008390 <HAL_DMA_IRQHandler+0x468>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d012      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x38e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a3f      	ldr	r2, [pc, #252]	; (8008394 <HAL_DMA_IRQHandler+0x46c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00a      	beq.n	80082b0 <HAL_DMA_IRQHandler+0x388>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a3e      	ldr	r2, [pc, #248]	; (8008398 <HAL_DMA_IRQHandler+0x470>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d102      	bne.n	80082aa <HAL_DMA_IRQHandler+0x382>
 80082a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082a8:	e01b      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082ae:	e018      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b4:	e015      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082b6:	2320      	movs	r3, #32
 80082b8:	e013      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e011      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082c2:	e00e      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082c8:	e00b      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082ce:	e008      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082d4:	e005      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082da:	e002      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082dc:	2320      	movs	r3, #32
 80082de:	e000      	b.n	80082e2 <HAL_DMA_IRQHandler+0x3ba>
 80082e0:	2302      	movs	r3, #2
 80082e2:	4a2e      	ldr	r2, [pc, #184]	; (800839c <HAL_DMA_IRQHandler+0x474>)
 80082e4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d034      	beq.n	8008360 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80082fe:	e02f      	b.n	8008360 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	2208      	movs	r2, #8
 8008306:	409a      	lsls	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d028      	beq.n	8008362 <HAL_DMA_IRQHandler+0x43a>
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d023      	beq.n	8008362 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 020e 	bic.w	r2, r2, #14
 8008328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2101      	movs	r1, #1
 8008334:	fa01 f202 	lsl.w	r2, r1, r2
 8008338:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4798      	blx	r3
    }
  }
  return;
 8008360:	bf00      	nop
 8008362:	bf00      	nop
}
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40020400 	.word	0x40020400
 8008370:	40020008 	.word	0x40020008
 8008374:	4002001c 	.word	0x4002001c
 8008378:	40020030 	.word	0x40020030
 800837c:	40020044 	.word	0x40020044
 8008380:	40020058 	.word	0x40020058
 8008384:	4002006c 	.word	0x4002006c
 8008388:	40020080 	.word	0x40020080
 800838c:	40020408 	.word	0x40020408
 8008390:	4002041c 	.word	0x4002041c
 8008394:	40020430 	.word	0x40020430
 8008398:	40020444 	.word	0x40020444
 800839c:	40020000 	.word	0x40020000

080083a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	2101      	movs	r1, #1
 80083b8:	fa01 f202 	lsl.w	r2, r1, r2
 80083bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d108      	bne.n	80083e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80083de:	e007      	b.n	80083f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	60da      	str	r2, [r3, #12]
}
 80083f0:	bf00      	nop
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr
	...

080083fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b08b      	sub	sp, #44	; 0x2c
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008406:	2300      	movs	r3, #0
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800840a:	2300      	movs	r3, #0
 800840c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800840e:	e179      	b.n	8008704 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008410:	2201      	movs	r2, #1
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	4013      	ands	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	429a      	cmp	r2, r3
 800842a:	f040 8168 	bne.w	80086fe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	4aa0      	ldr	r2, [pc, #640]	; (80086b4 <HAL_GPIO_Init+0x2b8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d05e      	beq.n	80084f6 <HAL_GPIO_Init+0xfa>
 8008438:	4a9e      	ldr	r2, [pc, #632]	; (80086b4 <HAL_GPIO_Init+0x2b8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d875      	bhi.n	800852a <HAL_GPIO_Init+0x12e>
 800843e:	4a9e      	ldr	r2, [pc, #632]	; (80086b8 <HAL_GPIO_Init+0x2bc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d058      	beq.n	80084f6 <HAL_GPIO_Init+0xfa>
 8008444:	4a9c      	ldr	r2, [pc, #624]	; (80086b8 <HAL_GPIO_Init+0x2bc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d86f      	bhi.n	800852a <HAL_GPIO_Init+0x12e>
 800844a:	4a9c      	ldr	r2, [pc, #624]	; (80086bc <HAL_GPIO_Init+0x2c0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d052      	beq.n	80084f6 <HAL_GPIO_Init+0xfa>
 8008450:	4a9a      	ldr	r2, [pc, #616]	; (80086bc <HAL_GPIO_Init+0x2c0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d869      	bhi.n	800852a <HAL_GPIO_Init+0x12e>
 8008456:	4a9a      	ldr	r2, [pc, #616]	; (80086c0 <HAL_GPIO_Init+0x2c4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d04c      	beq.n	80084f6 <HAL_GPIO_Init+0xfa>
 800845c:	4a98      	ldr	r2, [pc, #608]	; (80086c0 <HAL_GPIO_Init+0x2c4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d863      	bhi.n	800852a <HAL_GPIO_Init+0x12e>
 8008462:	4a98      	ldr	r2, [pc, #608]	; (80086c4 <HAL_GPIO_Init+0x2c8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d046      	beq.n	80084f6 <HAL_GPIO_Init+0xfa>
 8008468:	4a96      	ldr	r2, [pc, #600]	; (80086c4 <HAL_GPIO_Init+0x2c8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d85d      	bhi.n	800852a <HAL_GPIO_Init+0x12e>
 800846e:	2b12      	cmp	r3, #18
 8008470:	d82a      	bhi.n	80084c8 <HAL_GPIO_Init+0xcc>
 8008472:	2b12      	cmp	r3, #18
 8008474:	d859      	bhi.n	800852a <HAL_GPIO_Init+0x12e>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <HAL_GPIO_Init+0x80>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084f7 	.word	0x080084f7
 8008480:	080084d1 	.word	0x080084d1
 8008484:	080084e3 	.word	0x080084e3
 8008488:	08008525 	.word	0x08008525
 800848c:	0800852b 	.word	0x0800852b
 8008490:	0800852b 	.word	0x0800852b
 8008494:	0800852b 	.word	0x0800852b
 8008498:	0800852b 	.word	0x0800852b
 800849c:	0800852b 	.word	0x0800852b
 80084a0:	0800852b 	.word	0x0800852b
 80084a4:	0800852b 	.word	0x0800852b
 80084a8:	0800852b 	.word	0x0800852b
 80084ac:	0800852b 	.word	0x0800852b
 80084b0:	0800852b 	.word	0x0800852b
 80084b4:	0800852b 	.word	0x0800852b
 80084b8:	0800852b 	.word	0x0800852b
 80084bc:	0800852b 	.word	0x0800852b
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084ed 	.word	0x080084ed
 80084c8:	4a7f      	ldr	r2, [pc, #508]	; (80086c8 <HAL_GPIO_Init+0x2cc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d013      	beq.n	80084f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80084ce:	e02c      	b.n	800852a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	623b      	str	r3, [r7, #32]
          break;
 80084d6:	e029      	b.n	800852c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	3304      	adds	r3, #4
 80084de:	623b      	str	r3, [r7, #32]
          break;
 80084e0:	e024      	b.n	800852c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	3308      	adds	r3, #8
 80084e8:	623b      	str	r3, [r7, #32]
          break;
 80084ea:	e01f      	b.n	800852c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	330c      	adds	r3, #12
 80084f2:	623b      	str	r3, [r7, #32]
          break;
 80084f4:	e01a      	b.n	800852c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80084fe:	2304      	movs	r3, #4
 8008500:	623b      	str	r3, [r7, #32]
          break;
 8008502:	e013      	b.n	800852c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d105      	bne.n	8008518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800850c:	2308      	movs	r3, #8
 800850e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	611a      	str	r2, [r3, #16]
          break;
 8008516:	e009      	b.n	800852c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008518:	2308      	movs	r3, #8
 800851a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	615a      	str	r2, [r3, #20]
          break;
 8008522:	e003      	b.n	800852c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008524:	2300      	movs	r3, #0
 8008526:	623b      	str	r3, [r7, #32]
          break;
 8008528:	e000      	b.n	800852c <HAL_GPIO_Init+0x130>
          break;
 800852a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2bff      	cmp	r3, #255	; 0xff
 8008530:	d801      	bhi.n	8008536 <HAL_GPIO_Init+0x13a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	e001      	b.n	800853a <HAL_GPIO_Init+0x13e>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2bff      	cmp	r3, #255	; 0xff
 8008540:	d802      	bhi.n	8008548 <HAL_GPIO_Init+0x14c>
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	e002      	b.n	800854e <HAL_GPIO_Init+0x152>
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	3b08      	subs	r3, #8
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	210f      	movs	r1, #15
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	fa01 f303 	lsl.w	r3, r1, r3
 800855c:	43db      	mvns	r3, r3
 800855e:	401a      	ands	r2, r3
 8008560:	6a39      	ldr	r1, [r7, #32]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	fa01 f303 	lsl.w	r3, r1, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80c1 	beq.w	80086fe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800857c:	4b53      	ldr	r3, [pc, #332]	; (80086cc <HAL_GPIO_Init+0x2d0>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	4a52      	ldr	r2, [pc, #328]	; (80086cc <HAL_GPIO_Init+0x2d0>)
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	6193      	str	r3, [r2, #24]
 8008588:	4b50      	ldr	r3, [pc, #320]	; (80086cc <HAL_GPIO_Init+0x2d0>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008594:	4a4e      	ldr	r2, [pc, #312]	; (80086d0 <HAL_GPIO_Init+0x2d4>)
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	089b      	lsrs	r3, r3, #2
 800859a:	3302      	adds	r3, #2
 800859c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	220f      	movs	r2, #15
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	43db      	mvns	r3, r3
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4013      	ands	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a46      	ldr	r2, [pc, #280]	; (80086d4 <HAL_GPIO_Init+0x2d8>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01f      	beq.n	8008600 <HAL_GPIO_Init+0x204>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a45      	ldr	r2, [pc, #276]	; (80086d8 <HAL_GPIO_Init+0x2dc>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d019      	beq.n	80085fc <HAL_GPIO_Init+0x200>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a44      	ldr	r2, [pc, #272]	; (80086dc <HAL_GPIO_Init+0x2e0>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d013      	beq.n	80085f8 <HAL_GPIO_Init+0x1fc>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a43      	ldr	r2, [pc, #268]	; (80086e0 <HAL_GPIO_Init+0x2e4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00d      	beq.n	80085f4 <HAL_GPIO_Init+0x1f8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a42      	ldr	r2, [pc, #264]	; (80086e4 <HAL_GPIO_Init+0x2e8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d007      	beq.n	80085f0 <HAL_GPIO_Init+0x1f4>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a41      	ldr	r2, [pc, #260]	; (80086e8 <HAL_GPIO_Init+0x2ec>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d101      	bne.n	80085ec <HAL_GPIO_Init+0x1f0>
 80085e8:	2305      	movs	r3, #5
 80085ea:	e00a      	b.n	8008602 <HAL_GPIO_Init+0x206>
 80085ec:	2306      	movs	r3, #6
 80085ee:	e008      	b.n	8008602 <HAL_GPIO_Init+0x206>
 80085f0:	2304      	movs	r3, #4
 80085f2:	e006      	b.n	8008602 <HAL_GPIO_Init+0x206>
 80085f4:	2303      	movs	r3, #3
 80085f6:	e004      	b.n	8008602 <HAL_GPIO_Init+0x206>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e002      	b.n	8008602 <HAL_GPIO_Init+0x206>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e000      	b.n	8008602 <HAL_GPIO_Init+0x206>
 8008600:	2300      	movs	r3, #0
 8008602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008604:	f002 0203 	and.w	r2, r2, #3
 8008608:	0092      	lsls	r2, r2, #2
 800860a:	4093      	lsls	r3, r2
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008612:	492f      	ldr	r1, [pc, #188]	; (80086d0 <HAL_GPIO_Init+0x2d4>)
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	089b      	lsrs	r3, r3, #2
 8008618:	3302      	adds	r3, #2
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d006      	beq.n	800863a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800862c:	4b2f      	ldr	r3, [pc, #188]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	492e      	ldr	r1, [pc, #184]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	4313      	orrs	r3, r2
 8008636:	600b      	str	r3, [r1, #0]
 8008638:	e006      	b.n	8008648 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800863a:	4b2c      	ldr	r3, [pc, #176]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	43db      	mvns	r3, r3
 8008642:	492a      	ldr	r1, [pc, #168]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 8008644:	4013      	ands	r3, r2
 8008646:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d006      	beq.n	8008662 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	4924      	ldr	r1, [pc, #144]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	4313      	orrs	r3, r2
 800865e:	604b      	str	r3, [r1, #4]
 8008660:	e006      	b.n	8008670 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008662:	4b22      	ldr	r3, [pc, #136]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	43db      	mvns	r3, r3
 800866a:	4920      	ldr	r1, [pc, #128]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 800866c:	4013      	ands	r3, r2
 800866e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d006      	beq.n	800868a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800867c:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	491a      	ldr	r1, [pc, #104]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	4313      	orrs	r3, r2
 8008686:	608b      	str	r3, [r1, #8]
 8008688:	e006      	b.n	8008698 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800868a:	4b18      	ldr	r3, [pc, #96]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	43db      	mvns	r3, r3
 8008692:	4916      	ldr	r1, [pc, #88]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 8008694:	4013      	ands	r3, r2
 8008696:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d025      	beq.n	80086f0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	4910      	ldr	r1, [pc, #64]	; (80086ec <HAL_GPIO_Init+0x2f0>)
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60cb      	str	r3, [r1, #12]
 80086b0:	e025      	b.n	80086fe <HAL_GPIO_Init+0x302>
 80086b2:	bf00      	nop
 80086b4:	10320000 	.word	0x10320000
 80086b8:	10310000 	.word	0x10310000
 80086bc:	10220000 	.word	0x10220000
 80086c0:	10210000 	.word	0x10210000
 80086c4:	10120000 	.word	0x10120000
 80086c8:	10110000 	.word	0x10110000
 80086cc:	40021000 	.word	0x40021000
 80086d0:	40010000 	.word	0x40010000
 80086d4:	40010800 	.word	0x40010800
 80086d8:	40010c00 	.word	0x40010c00
 80086dc:	40011000 	.word	0x40011000
 80086e0:	40011400 	.word	0x40011400
 80086e4:	40011800 	.word	0x40011800
 80086e8:	40011c00 	.word	0x40011c00
 80086ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <HAL_GPIO_Init+0x324>)
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	43db      	mvns	r3, r3
 80086f8:	4909      	ldr	r1, [pc, #36]	; (8008720 <HAL_GPIO_Init+0x324>)
 80086fa:	4013      	ands	r3, r2
 80086fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	3301      	adds	r3, #1
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	fa22 f303 	lsr.w	r3, r2, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	f47f ae7e 	bne.w	8008410 <HAL_GPIO_Init+0x14>
  }
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	372c      	adds	r7, #44	; 0x2c
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr
 8008720:	40010400 	.word	0x40010400

08008724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	4013      	ands	r3, r2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
 8008740:	e001      	b.n	8008746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr

08008752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	807b      	strh	r3, [r7, #2]
 800875e:	4613      	mov	r3, r2
 8008760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008762:	787b      	ldrb	r3, [r7, #1]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008768:	887a      	ldrh	r2, [r7, #2]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800876e:	e003      	b.n	8008778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008770:	887b      	ldrh	r3, [r7, #2]
 8008772:	041a      	lsls	r2, r3, #16
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	611a      	str	r2, [r3, #16]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
	...

08008784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800878e:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	4013      	ands	r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d006      	beq.n	80087a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800879a:	4a05      	ldr	r2, [pc, #20]	; (80087b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fabc 	bl	8006d20 <HAL_GPIO_EXTI_Callback>
  }
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	40010400 	.word	0x40010400

080087b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e26c      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8087 	beq.w	80088e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087d4:	4b92      	ldr	r3, [pc, #584]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f003 030c 	and.w	r3, r3, #12
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d00c      	beq.n	80087fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80087e0:	4b8f      	ldr	r3, [pc, #572]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f003 030c 	and.w	r3, r3, #12
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d112      	bne.n	8008812 <HAL_RCC_OscConfig+0x5e>
 80087ec:	4b8c      	ldr	r3, [pc, #560]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f8:	d10b      	bne.n	8008812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087fa:	4b89      	ldr	r3, [pc, #548]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d06c      	beq.n	80088e0 <HAL_RCC_OscConfig+0x12c>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d168      	bne.n	80088e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e246      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881a:	d106      	bne.n	800882a <HAL_RCC_OscConfig+0x76>
 800881c:	4b80      	ldr	r3, [pc, #512]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a7f      	ldr	r2, [pc, #508]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	e02e      	b.n	8008888 <HAL_RCC_OscConfig+0xd4>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10c      	bne.n	800884c <HAL_RCC_OscConfig+0x98>
 8008832:	4b7b      	ldr	r3, [pc, #492]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a7a      	ldr	r2, [pc, #488]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	4b78      	ldr	r3, [pc, #480]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a77      	ldr	r2, [pc, #476]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	e01d      	b.n	8008888 <HAL_RCC_OscConfig+0xd4>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008854:	d10c      	bne.n	8008870 <HAL_RCC_OscConfig+0xbc>
 8008856:	4b72      	ldr	r3, [pc, #456]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a71      	ldr	r2, [pc, #452]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 800885c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	4b6f      	ldr	r3, [pc, #444]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a6e      	ldr	r2, [pc, #440]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e00b      	b.n	8008888 <HAL_RCC_OscConfig+0xd4>
 8008870:	4b6b      	ldr	r3, [pc, #428]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a6a      	ldr	r2, [pc, #424]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	4b68      	ldr	r3, [pc, #416]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a67      	ldr	r2, [pc, #412]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d013      	beq.n	80088b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008890:	f7fe fff6 	bl	8007880 <HAL_GetTick>
 8008894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008896:	e008      	b.n	80088aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008898:	f7fe fff2 	bl	8007880 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b64      	cmp	r3, #100	; 0x64
 80088a4:	d901      	bls.n	80088aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e1fa      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088aa:	4b5d      	ldr	r3, [pc, #372]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0f0      	beq.n	8008898 <HAL_RCC_OscConfig+0xe4>
 80088b6:	e014      	b.n	80088e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b8:	f7fe ffe2 	bl	8007880 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088c0:	f7fe ffde 	bl	8007880 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b64      	cmp	r3, #100	; 0x64
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e1e6      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088d2:	4b53      	ldr	r3, [pc, #332]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x10c>
 80088de:	e000      	b.n	80088e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d063      	beq.n	80089b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088ee:	4b4c      	ldr	r3, [pc, #304]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f003 030c 	and.w	r3, r3, #12
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00b      	beq.n	8008912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80088fa:	4b49      	ldr	r3, [pc, #292]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f003 030c 	and.w	r3, r3, #12
 8008902:	2b08      	cmp	r3, #8
 8008904:	d11c      	bne.n	8008940 <HAL_RCC_OscConfig+0x18c>
 8008906:	4b46      	ldr	r3, [pc, #280]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d116      	bne.n	8008940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008912:	4b43      	ldr	r3, [pc, #268]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d005      	beq.n	800892a <HAL_RCC_OscConfig+0x176>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d001      	beq.n	800892a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e1ba      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800892a:	4b3d      	ldr	r3, [pc, #244]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	4939      	ldr	r1, [pc, #228]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 800893a:	4313      	orrs	r3, r2
 800893c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800893e:	e03a      	b.n	80089b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d020      	beq.n	800898a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008948:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <HAL_RCC_OscConfig+0x270>)
 800894a:	2201      	movs	r2, #1
 800894c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894e:	f7fe ff97 	bl	8007880 <HAL_GetTick>
 8008952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008956:	f7fe ff93 	bl	8007880 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e19b      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008968:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0f0      	beq.n	8008956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008974:	4b2a      	ldr	r3, [pc, #168]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	4927      	ldr	r1, [pc, #156]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 8008984:	4313      	orrs	r3, r2
 8008986:	600b      	str	r3, [r1, #0]
 8008988:	e015      	b.n	80089b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800898a:	4b26      	ldr	r3, [pc, #152]	; (8008a24 <HAL_RCC_OscConfig+0x270>)
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008990:	f7fe ff76 	bl	8007880 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008998:	f7fe ff72 	bl	8007880 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e17a      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089aa:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f0      	bne.n	8008998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d03a      	beq.n	8008a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d019      	beq.n	80089fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ca:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <HAL_RCC_OscConfig+0x274>)
 80089cc:	2201      	movs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089d0:	f7fe ff56 	bl	8007880 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089d8:	f7fe ff52 	bl	8007880 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e15a      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ea:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <HAL_RCC_OscConfig+0x26c>)
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0f0      	beq.n	80089d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80089f6:	2001      	movs	r0, #1
 80089f8:	f000 fad8 	bl	8008fac <RCC_Delay>
 80089fc:	e01c      	b.n	8008a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <HAL_RCC_OscConfig+0x274>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a04:	f7fe ff3c 	bl	8007880 <HAL_GetTick>
 8008a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a0a:	e00f      	b.n	8008a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a0c:	f7fe ff38 	bl	8007880 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d908      	bls.n	8008a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e140      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
 8008a1e:	bf00      	nop
 8008a20:	40021000 	.word	0x40021000
 8008a24:	42420000 	.word	0x42420000
 8008a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a2c:	4b9e      	ldr	r3, [pc, #632]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e9      	bne.n	8008a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80a6 	beq.w	8008b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a4a:	4b97      	ldr	r3, [pc, #604]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10d      	bne.n	8008a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a56:	4b94      	ldr	r3, [pc, #592]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	4a93      	ldr	r2, [pc, #588]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a60:	61d3      	str	r3, [r2, #28]
 8008a62:	4b91      	ldr	r3, [pc, #580]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6a:	60bb      	str	r3, [r7, #8]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a72:	4b8e      	ldr	r3, [pc, #568]	; (8008cac <HAL_RCC_OscConfig+0x4f8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d118      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a7e:	4b8b      	ldr	r3, [pc, #556]	; (8008cac <HAL_RCC_OscConfig+0x4f8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a8a      	ldr	r2, [pc, #552]	; (8008cac <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a8a:	f7fe fef9 	bl	8007880 <HAL_GetTick>
 8008a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a90:	e008      	b.n	8008aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a92:	f7fe fef5 	bl	8007880 <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b64      	cmp	r3, #100	; 0x64
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e0fd      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aa4:	4b81      	ldr	r3, [pc, #516]	; (8008cac <HAL_RCC_OscConfig+0x4f8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f0      	beq.n	8008a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d106      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x312>
 8008ab8:	4b7b      	ldr	r3, [pc, #492]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	4a7a      	ldr	r2, [pc, #488]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	6213      	str	r3, [r2, #32]
 8008ac4:	e02d      	b.n	8008b22 <HAL_RCC_OscConfig+0x36e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10c      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x334>
 8008ace:	4b76      	ldr	r3, [pc, #472]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	4a75      	ldr	r2, [pc, #468]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	6213      	str	r3, [r2, #32]
 8008ada:	4b73      	ldr	r3, [pc, #460]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	4a72      	ldr	r2, [pc, #456]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008ae0:	f023 0304 	bic.w	r3, r3, #4
 8008ae4:	6213      	str	r3, [r2, #32]
 8008ae6:	e01c      	b.n	8008b22 <HAL_RCC_OscConfig+0x36e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	d10c      	bne.n	8008b0a <HAL_RCC_OscConfig+0x356>
 8008af0:	4b6d      	ldr	r3, [pc, #436]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	4a6c      	ldr	r2, [pc, #432]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008af6:	f043 0304 	orr.w	r3, r3, #4
 8008afa:	6213      	str	r3, [r2, #32]
 8008afc:	4b6a      	ldr	r3, [pc, #424]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	4a69      	ldr	r2, [pc, #420]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	6213      	str	r3, [r2, #32]
 8008b08:	e00b      	b.n	8008b22 <HAL_RCC_OscConfig+0x36e>
 8008b0a:	4b67      	ldr	r3, [pc, #412]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	4a66      	ldr	r2, [pc, #408]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	6213      	str	r3, [r2, #32]
 8008b16:	4b64      	ldr	r3, [pc, #400]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	4a63      	ldr	r2, [pc, #396]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b1c:	f023 0304 	bic.w	r3, r3, #4
 8008b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d015      	beq.n	8008b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b2a:	f7fe fea9 	bl	8007880 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b30:	e00a      	b.n	8008b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b32:	f7fe fea5 	bl	8007880 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e0ab      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b48:	4b57      	ldr	r3, [pc, #348]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0ee      	beq.n	8008b32 <HAL_RCC_OscConfig+0x37e>
 8008b54:	e014      	b.n	8008b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b56:	f7fe fe93 	bl	8007880 <HAL_GetTick>
 8008b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b5c:	e00a      	b.n	8008b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5e:	f7fe fe8f 	bl	8007880 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d901      	bls.n	8008b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e095      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b74:	4b4c      	ldr	r3, [pc, #304]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1ee      	bne.n	8008b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d105      	bne.n	8008b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b86:	4b48      	ldr	r3, [pc, #288]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	4a47      	ldr	r2, [pc, #284]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 8081 	beq.w	8008c9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b9c:	4b42      	ldr	r3, [pc, #264]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f003 030c 	and.w	r3, r3, #12
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d061      	beq.n	8008c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d146      	bne.n	8008c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb0:	4b3f      	ldr	r3, [pc, #252]	; (8008cb0 <HAL_RCC_OscConfig+0x4fc>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb6:	f7fe fe63 	bl	8007880 <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bbe:	f7fe fe5f 	bl	8007880 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e067      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bd0:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f0      	bne.n	8008bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be4:	d108      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008be6:	4b30      	ldr	r3, [pc, #192]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	492d      	ldr	r1, [pc, #180]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bf8:	4b2b      	ldr	r3, [pc, #172]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a19      	ldr	r1, [r3, #32]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	4927      	ldr	r1, [pc, #156]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <HAL_RCC_OscConfig+0x4fc>)
 8008c12:	2201      	movs	r2, #1
 8008c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c16:	f7fe fe33 	bl	8007880 <HAL_GetTick>
 8008c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c1e:	f7fe fe2f 	bl	8007880 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e037      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0f0      	beq.n	8008c1e <HAL_RCC_OscConfig+0x46a>
 8008c3c:	e02f      	b.n	8008c9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c3e:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <HAL_RCC_OscConfig+0x4fc>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c44:	f7fe fe1c 	bl	8007880 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c4c:	f7fe fe18 	bl	8007880 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e020      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x498>
 8008c6a:	e018      	b.n	8008c9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e013      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_RCC_OscConfig+0x4f4>)
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d106      	bne.n	8008c9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d001      	beq.n	8008c9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	40007000 	.word	0x40007000
 8008cb0:	42420060 	.word	0x42420060

08008cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0d0      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cc8:	4b6a      	ldr	r3, [pc, #424]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d910      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd6:	4b67      	ldr	r3, [pc, #412]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f023 0207 	bic.w	r2, r3, #7
 8008cde:	4965      	ldr	r1, [pc, #404]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce6:	4b63      	ldr	r3, [pc, #396]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d001      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e0b8      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d020      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d10:	4b59      	ldr	r3, [pc, #356]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	4a58      	ldr	r2, [pc, #352]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d28:	4b53      	ldr	r3, [pc, #332]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4a52      	ldr	r2, [pc, #328]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d34:	4b50      	ldr	r3, [pc, #320]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	494d      	ldr	r1, [pc, #308]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d040      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d107      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d5a:	4b47      	ldr	r3, [pc, #284]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d115      	bne.n	8008d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e07f      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d107      	bne.n	8008d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d72:	4b41      	ldr	r3, [pc, #260]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e073      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d82:	4b3d      	ldr	r3, [pc, #244]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e06b      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d92:	4b39      	ldr	r3, [pc, #228]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f023 0203 	bic.w	r2, r3, #3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4936      	ldr	r1, [pc, #216]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008da4:	f7fe fd6c 	bl	8007880 <HAL_GetTick>
 8008da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008daa:	e00a      	b.n	8008dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dac:	f7fe fd68 	bl	8007880 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e053      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc2:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f003 020c 	and.w	r2, r3, #12
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d1eb      	bne.n	8008dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dd4:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0307 	and.w	r3, r3, #7
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d210      	bcs.n	8008e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de2:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f023 0207 	bic.w	r2, r3, #7
 8008dea:	4922      	ldr	r1, [pc, #136]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df2:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <HAL_RCC_ClockConfig+0x1c0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d001      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e032      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e10:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	4916      	ldr	r1, [pc, #88]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e2e:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	490e      	ldr	r1, [pc, #56]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e42:	f000 f821 	bl	8008e88 <HAL_RCC_GetSysClockFreq>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <HAL_RCC_ClockConfig+0x1c4>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	091b      	lsrs	r3, r3, #4
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	490a      	ldr	r1, [pc, #40]	; (8008e7c <HAL_RCC_ClockConfig+0x1c8>)
 8008e54:	5ccb      	ldrb	r3, [r1, r3]
 8008e56:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5a:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <HAL_RCC_ClockConfig+0x1cc>)
 8008e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <HAL_RCC_ClockConfig+0x1d0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fcca 	bl	80077fc <HAL_InitTick>

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40022000 	.word	0x40022000
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	0800c848 	.word	0x0800c848
 8008e80:	2000000c 	.word	0x2000000c
 8008e84:	20000010 	.word	0x20000010

08008e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e88:	b490      	push	{r4, r7}
 8008e8a:	b08a      	sub	sp, #40	; 0x28
 8008e8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e8e:	4b2a      	ldr	r3, [pc, #168]	; (8008f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008e90:	1d3c      	adds	r4, r7, #4
 8008e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e98:	f240 2301 	movw	r3, #513	; 0x201
 8008e9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008eb2:	4b22      	ldr	r3, [pc, #136]	; (8008f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f003 030c 	and.w	r3, r3, #12
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d002      	beq.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d003      	beq.n	8008ece <HAL_RCC_GetSysClockFreq+0x46>
 8008ec6:	e02d      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	; (8008f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eca:	623b      	str	r3, [r7, #32]
      break;
 8008ecc:	e02d      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	0c9b      	lsrs	r3, r3, #18
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008eda:	4413      	add	r3, r2
 8008edc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008ee0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d013      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	0c5b      	lsrs	r3, r3, #17
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008efa:	4413      	add	r3, r2
 8008efc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008f00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	4a0e      	ldr	r2, [pc, #56]	; (8008f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f06:	fb02 f203 	mul.w	r2, r2, r3
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
 8008f12:	e004      	b.n	8008f1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4a0b      	ldr	r2, [pc, #44]	; (8008f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f18:	fb02 f303 	mul.w	r3, r2, r3
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	623b      	str	r3, [r7, #32]
      break;
 8008f22:	e002      	b.n	8008f2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008f24:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f26:	623b      	str	r3, [r7, #32]
      break;
 8008f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bc90      	pop	{r4, r7}
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	0800b078 	.word	0x0800b078
 8008f3c:	40021000 	.word	0x40021000
 8008f40:	007a1200 	.word	0x007a1200
 8008f44:	003d0900 	.word	0x003d0900

08008f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr
 8008f58:	2000000c 	.word	0x2000000c

08008f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f60:	f7ff fff2 	bl	8008f48 <HAL_RCC_GetHCLKFreq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	4903      	ldr	r1, [pc, #12]	; (8008f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f72:	5ccb      	ldrb	r3, [r1, r3]
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	40021000 	.word	0x40021000
 8008f80:	0800c858 	.word	0x0800c858

08008f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f88:	f7ff ffde 	bl	8008f48 <HAL_RCC_GetHCLKFreq>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	0adb      	lsrs	r3, r3, #11
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	4903      	ldr	r1, [pc, #12]	; (8008fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f9a:	5ccb      	ldrb	r3, [r1, r3]
 8008f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	0800c858 	.word	0x0800c858

08008fac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <RCC_Delay+0x34>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0a      	ldr	r2, [pc, #40]	; (8008fe4 <RCC_Delay+0x38>)
 8008fba:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbe:	0a5b      	lsrs	r3, r3, #9
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
 8008fc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008fc8:	bf00      	nop
  }
  while (Delay --);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	1e5a      	subs	r2, r3, #1
 8008fce:	60fa      	str	r2, [r7, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1f9      	bne.n	8008fc8 <RCC_Delay+0x1c>
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr
 8008fe0:	2000000c 	.word	0x2000000c
 8008fe4:	10624dd3 	.word	0x10624dd3

08008fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e041      	b.n	800907e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fd fca8 	bl	8006964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f000 faac 	bl	8009584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	d001      	beq.n	80090a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e044      	b.n	800912a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <HAL_TIM_Base_Start_IT+0xac>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d018      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0x6c>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <HAL_TIM_Base_Start_IT+0xb0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d013      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0x6c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d4:	d00e      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0x6c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a18      	ldr	r2, [pc, #96]	; (800913c <HAL_TIM_Base_Start_IT+0xb4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d009      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0x6c>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a16      	ldr	r2, [pc, #88]	; (8009140 <HAL_TIM_Base_Start_IT+0xb8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0x6c>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a15      	ldr	r2, [pc, #84]	; (8009144 <HAL_TIM_Base_Start_IT+0xbc>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d111      	bne.n	8009118 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b06      	cmp	r3, #6
 8009104:	d010      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0201 	orr.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009116:	e007      	b.n	8009128 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr
 8009134:	40012c00 	.word	0x40012c00
 8009138:	40013400 	.word	0x40013400
 800913c:	40000400 	.word	0x40000400
 8009140:	40000800 	.word	0x40000800
 8009144:	40000c00 	.word	0x40000c00

08009148 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0201 	bic.w	r2, r2, #1
 800915e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6a1a      	ldr	r2, [r3, #32]
 8009166:	f241 1311 	movw	r3, #4369	; 0x1111
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10f      	bne.n	8009190 <HAL_TIM_Base_Stop_IT+0x48>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	f240 4344 	movw	r3, #1092	; 0x444
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d107      	bne.n	8009190 <HAL_TIM_Base_Stop_IT+0x48>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0201 	bic.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d122      	bne.n	8009200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d11b      	bne.n	8009200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0202 	mvn.w	r2, #2
 80091d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9b1 	bl	800954e <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f9a4 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f9b3 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b04      	cmp	r3, #4
 800920c:	d122      	bne.n	8009254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b04      	cmp	r3, #4
 800921a:	d11b      	bne.n	8009254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0204 	mvn.w	r2, #4
 8009224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f987 	bl	800954e <HAL_TIM_IC_CaptureCallback>
 8009240:	e005      	b.n	800924e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f97a 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f989 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f003 0308 	and.w	r3, r3, #8
 800925e:	2b08      	cmp	r3, #8
 8009260:	d122      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b08      	cmp	r3, #8
 800926e:	d11b      	bne.n	80092a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0208 	mvn.w	r2, #8
 8009278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2204      	movs	r2, #4
 800927e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f003 0303 	and.w	r3, r3, #3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f95d 	bl	800954e <HAL_TIM_IC_CaptureCallback>
 8009294:	e005      	b.n	80092a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f950 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f95f 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0310 	and.w	r3, r3, #16
 80092b2:	2b10      	cmp	r3, #16
 80092b4:	d122      	bne.n	80092fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b10      	cmp	r3, #16
 80092c2:	d11b      	bne.n	80092fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f06f 0210 	mvn.w	r2, #16
 80092cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2208      	movs	r2, #8
 80092d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f933 	bl	800954e <HAL_TIM_IC_CaptureCallback>
 80092e8:	e005      	b.n	80092f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f926 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f935 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b01      	cmp	r3, #1
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b01      	cmp	r3, #1
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0201 	mvn.w	r2, #1
 8009320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fd fd08 	bl	8006d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d10e      	bne.n	8009354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d107      	bne.n	8009354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800934c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa9d 	bl	800988e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b40      	cmp	r3, #64	; 0x40
 8009360:	d10e      	bne.n	8009380 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936c:	2b40      	cmp	r3, #64	; 0x40
 800936e:	d107      	bne.n	8009380 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8f9 	bl	8009572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b20      	cmp	r3, #32
 800938c:	d10e      	bne.n	80093ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b20      	cmp	r3, #32
 800939a:	d107      	bne.n	80093ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f06f 0220 	mvn.w	r2, #32
 80093a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa68 	bl	800987c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_TIM_ConfigClockSource+0x18>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e0b3      	b.n	8009534 <HAL_TIM_ConfigClockSource+0x180>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009404:	d03e      	beq.n	8009484 <HAL_TIM_ConfigClockSource+0xd0>
 8009406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940a:	f200 8087 	bhi.w	800951c <HAL_TIM_ConfigClockSource+0x168>
 800940e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009412:	f000 8085 	beq.w	8009520 <HAL_TIM_ConfigClockSource+0x16c>
 8009416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941a:	d87f      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 800941c:	2b70      	cmp	r3, #112	; 0x70
 800941e:	d01a      	beq.n	8009456 <HAL_TIM_ConfigClockSource+0xa2>
 8009420:	2b70      	cmp	r3, #112	; 0x70
 8009422:	d87b      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 8009424:	2b60      	cmp	r3, #96	; 0x60
 8009426:	d050      	beq.n	80094ca <HAL_TIM_ConfigClockSource+0x116>
 8009428:	2b60      	cmp	r3, #96	; 0x60
 800942a:	d877      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 800942c:	2b50      	cmp	r3, #80	; 0x50
 800942e:	d03c      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0xf6>
 8009430:	2b50      	cmp	r3, #80	; 0x50
 8009432:	d873      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 8009434:	2b40      	cmp	r3, #64	; 0x40
 8009436:	d058      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0x136>
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	d86f      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 800943c:	2b30      	cmp	r3, #48	; 0x30
 800943e:	d064      	beq.n	800950a <HAL_TIM_ConfigClockSource+0x156>
 8009440:	2b30      	cmp	r3, #48	; 0x30
 8009442:	d86b      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 8009444:	2b20      	cmp	r3, #32
 8009446:	d060      	beq.n	800950a <HAL_TIM_ConfigClockSource+0x156>
 8009448:	2b20      	cmp	r3, #32
 800944a:	d867      	bhi.n	800951c <HAL_TIM_ConfigClockSource+0x168>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d05c      	beq.n	800950a <HAL_TIM_ConfigClockSource+0x156>
 8009450:	2b10      	cmp	r3, #16
 8009452:	d05a      	beq.n	800950a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009454:	e062      	b.n	800951c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	6899      	ldr	r1, [r3, #8]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f000 f97e 	bl	8009766 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009478:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	609a      	str	r2, [r3, #8]
      break;
 8009482:	e04e      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	6899      	ldr	r1, [r3, #8]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f000 f967 	bl	8009766 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094a6:	609a      	str	r2, [r3, #8]
      break;
 80094a8:	e03b      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f000 f8de 	bl	8009678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2150      	movs	r1, #80	; 0x50
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f935 	bl	8009732 <TIM_ITRx_SetConfig>
      break;
 80094c8:	e02b      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	6859      	ldr	r1, [r3, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f000 f8fc 	bl	80096d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2160      	movs	r1, #96	; 0x60
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f925 	bl	8009732 <TIM_ITRx_SetConfig>
      break;
 80094e8:	e01b      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6818      	ldr	r0, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	6859      	ldr	r1, [r3, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	461a      	mov	r2, r3
 80094f8:	f000 f8be 	bl	8009678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2140      	movs	r1, #64	; 0x40
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f915 	bl	8009732 <TIM_ITRx_SetConfig>
      break;
 8009508:	e00b      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	f000 f90c 	bl	8009732 <TIM_ITRx_SetConfig>
        break;
 800951a:	e002      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800951c:	bf00      	nop
 800951e:	e000      	b.n	8009522 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009520:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr

08009560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a33      	ldr	r2, [pc, #204]	; (8009664 <TIM_Base_SetConfig+0xe0>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d013      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a32      	ldr	r2, [pc, #200]	; (8009668 <TIM_Base_SetConfig+0xe4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d00f      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095aa:	d00b      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a2f      	ldr	r2, [pc, #188]	; (800966c <TIM_Base_SetConfig+0xe8>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d007      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a2e      	ldr	r2, [pc, #184]	; (8009670 <TIM_Base_SetConfig+0xec>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d003      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a2d      	ldr	r2, [pc, #180]	; (8009674 <TIM_Base_SetConfig+0xf0>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d108      	bne.n	80095d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a22      	ldr	r2, [pc, #136]	; (8009664 <TIM_Base_SetConfig+0xe0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d013      	beq.n	8009606 <TIM_Base_SetConfig+0x82>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a21      	ldr	r2, [pc, #132]	; (8009668 <TIM_Base_SetConfig+0xe4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00f      	beq.n	8009606 <TIM_Base_SetConfig+0x82>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ec:	d00b      	beq.n	8009606 <TIM_Base_SetConfig+0x82>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a1e      	ldr	r2, [pc, #120]	; (800966c <TIM_Base_SetConfig+0xe8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d007      	beq.n	8009606 <TIM_Base_SetConfig+0x82>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <TIM_Base_SetConfig+0xec>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_Base_SetConfig+0x82>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a1c      	ldr	r2, [pc, #112]	; (8009674 <TIM_Base_SetConfig+0xf0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d108      	bne.n	8009618 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800960c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	4313      	orrs	r3, r2
 8009616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a09      	ldr	r2, [pc, #36]	; (8009664 <TIM_Base_SetConfig+0xe0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d003      	beq.n	800964c <TIM_Base_SetConfig+0xc8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a08      	ldr	r2, [pc, #32]	; (8009668 <TIM_Base_SetConfig+0xe4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d103      	bne.n	8009654 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	615a      	str	r2, [r3, #20]
}
 800965a:	bf00      	nop
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr
 8009664:	40012c00 	.word	0x40012c00
 8009668:	40013400 	.word	0x40013400
 800966c:	40000400 	.word	0x40000400
 8009670:	40000800 	.word	0x40000800
 8009674:	40000c00 	.word	0x40000c00

08009678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f023 0201 	bic.w	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f023 030a 	bic.w	r3, r3, #10
 80096b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	621a      	str	r2, [r3, #32]
}
 80096ca:	bf00      	nop
 80096cc:	371c      	adds	r7, #28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr

080096d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	f023 0210 	bic.w	r2, r3, #16
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	031b      	lsls	r3, r3, #12
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	4313      	orrs	r3, r2
 8009708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	621a      	str	r2, [r3, #32]
}
 8009728:	bf00      	nop
 800972a:	371c      	adds	r7, #28
 800972c:	46bd      	mov	sp, r7
 800972e:	bc80      	pop	{r7}
 8009730:	4770      	bx	lr

08009732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	f043 0307 	orr.w	r3, r3, #7
 8009754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	609a      	str	r2, [r3, #8]
}
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	bc80      	pop	{r7}
 8009764:	4770      	bx	lr

08009766 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009766:	b480      	push	{r7}
 8009768:	b087      	sub	sp, #28
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009780:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	021a      	lsls	r2, r3, #8
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	431a      	orrs	r2, r3
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4313      	orrs	r3, r2
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	4313      	orrs	r3, r2
 8009792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	609a      	str	r2, [r3, #8]
}
 800979a:	bf00      	nop
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr

080097a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e050      	b.n	800985e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a1b      	ldr	r2, [pc, #108]	; (8009868 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d018      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a19      	ldr	r2, [pc, #100]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d013      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009812:	d00e      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a15      	ldr	r2, [pc, #84]	; (8009870 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d009      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a14      	ldr	r2, [pc, #80]	; (8009874 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d004      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a12      	ldr	r2, [pc, #72]	; (8009878 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d10c      	bne.n	800984c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	4313      	orrs	r3, r2
 8009842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr
 8009868:	40012c00 	.word	0x40012c00
 800986c:	40013400 	.word	0x40013400
 8009870:	40000400 	.word	0x40000400
 8009874:	40000800 	.word	0x40000800
 8009878:	40000c00 	.word	0x40000c00

0800987c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	bc80      	pop	{r7}
 800988c:	4770      	bx	lr

0800988e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	bc80      	pop	{r7}
 800989e:	4770      	bx	lr

080098a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e03f      	b.n	8009932 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fd f8a0 	bl	8006a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2224      	movs	r2, #36	; 0x24
 80098d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fcb5 	bl	800a254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695a      	ldr	r2, [r3, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b08a      	sub	sp, #40	; 0x28
 800993e:	af02      	add	r7, sp, #8
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	603b      	str	r3, [r7, #0]
 8009946:	4613      	mov	r3, r2
 8009948:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b20      	cmp	r3, #32
 8009958:	d17c      	bne.n	8009a54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <HAL_UART_Transmit+0x2c>
 8009960:	88fb      	ldrh	r3, [r7, #6]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e075      	b.n	8009a56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009970:	2b01      	cmp	r3, #1
 8009972:	d101      	bne.n	8009978 <HAL_UART_Transmit+0x3e>
 8009974:	2302      	movs	r3, #2
 8009976:	e06e      	b.n	8009a56 <HAL_UART_Transmit+0x11c>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2221      	movs	r2, #33	; 0x21
 800998a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800998e:	f7fd ff77 	bl	8007880 <HAL_GetTick>
 8009992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	88fa      	ldrh	r2, [r7, #6]
 8009998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a8:	d108      	bne.n	80099bc <HAL_UART_Transmit+0x82>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d104      	bne.n	80099bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	e003      	b.n	80099c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80099cc:	e02a      	b.n	8009a24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2200      	movs	r2, #0
 80099d6:	2180      	movs	r1, #128	; 0x80
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fac4 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e036      	b.n	8009a56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	3302      	adds	r3, #2
 8009a02:	61bb      	str	r3, [r7, #24]
 8009a04:	e007      	b.n	8009a16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	3301      	adds	r3, #1
 8009a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1cf      	bne.n	80099ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2200      	movs	r2, #0
 8009a36:	2140      	movs	r1, #64	; 0x40
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 fa94 	bl	8009f66 <UART_WaitOnFlagUntilTimeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e006      	b.n	8009a56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e000      	b.n	8009a56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009a54:	2302      	movs	r3, #2
  }
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3720      	adds	r7, #32
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d166      	bne.n	8009b48 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <HAL_UART_Receive_DMA+0x26>
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e05f      	b.n	8009b4a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d101      	bne.n	8009a98 <HAL_UART_Receive_DMA+0x38>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e058      	b.n	8009b4a <HAL_UART_Receive_DMA+0xea>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	88fa      	ldrh	r2, [r7, #6]
 8009aaa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2222      	movs	r2, #34	; 0x22
 8009ab6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abe:	4a25      	ldr	r2, [pc, #148]	; (8009b54 <HAL_UART_Receive_DMA+0xf4>)
 8009ac0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac6:	4a24      	ldr	r2, [pc, #144]	; (8009b58 <HAL_UART_Receive_DMA+0xf8>)
 8009ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ace:	4a23      	ldr	r2, [pc, #140]	; (8009b5c <HAL_UART_Receive_DMA+0xfc>)
 8009ad0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8009ada:	f107 0308 	add.w	r3, r7, #8
 8009ade:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4619      	mov	r1, r3
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	f7fe f877 	bl	8007be4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009af6:	2300      	movs	r3, #0
 8009af8:	613b      	str	r3, [r7, #16]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b22:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695a      	ldr	r2, [r3, #20]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f042 0201 	orr.w	r2, r2, #1
 8009b32:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695a      	ldr	r2, [r3, #20]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b42:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	e000      	b.n	8009b4a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009b48:	2302      	movs	r3, #2
  }
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	08009e4f 	.word	0x08009e4f
 8009b58:	08009eb7 	.word	0x08009eb7
 8009b5c:	08009ed3 	.word	0x08009ed3

08009b60 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bf14      	ite	ne
 8009b7a:	2301      	movne	r3, #1
 8009b7c:	2300      	moveq	r3, #0
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b21      	cmp	r3, #33	; 0x21
 8009b8c:	d116      	bne.n	8009bbc <HAL_UART_DMAStop+0x5c>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d013      	beq.n	8009bbc <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	695a      	ldr	r2, [r3, #20]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ba2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe f876 	bl	8007ca2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa1f 	bl	8009ffa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bf14      	ite	ne
 8009bca:	2301      	movne	r3, #1
 8009bcc:	2300      	moveq	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b22      	cmp	r3, #34	; 0x22
 8009bdc:	d116      	bne.n	8009c0c <HAL_UART_DMAStop+0xac>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d013      	beq.n	8009c0c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	695a      	ldr	r2, [r3, #20]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe f84e 	bl	8007ca2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa0c 	bl	800a024 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d008      	beq.n	8009c6a <HAL_UART_IRQHandler+0x52>
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa76 	bl	800a154 <UART_Receive_IT>
      return;
 8009c68:	e0d0      	b.n	8009e0c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80b0 	beq.w	8009dd2 <HAL_UART_IRQHandler+0x1ba>
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d105      	bne.n	8009c88 <HAL_UART_IRQHandler+0x70>
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 80a5 	beq.w	8009dd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00a      	beq.n	8009ca8 <HAL_UART_IRQHandler+0x90>
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca0:	f043 0201 	orr.w	r2, r3, #1
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	f003 0304 	and.w	r3, r3, #4
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <HAL_UART_IRQHandler+0xb0>
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc0:	f043 0202 	orr.w	r2, r3, #2
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <HAL_UART_IRQHandler+0xd0>
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce0:	f043 0204 	orr.w	r2, r3, #4
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00f      	beq.n	8009d12 <HAL_UART_IRQHandler+0xfa>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f003 0320 	and.w	r3, r3, #32
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <HAL_UART_IRQHandler+0xee>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0a:	f043 0208 	orr.w	r2, r3, #8
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d077      	beq.n	8009e0a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d007      	beq.n	8009d34 <HAL_UART_IRQHandler+0x11c>
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa10 	bl	800a154 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bf14      	ite	ne
 8009d42:	2301      	movne	r3, #1
 8009d44:	2300      	moveq	r3, #0
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4e:	f003 0308 	and.w	r3, r3, #8
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d102      	bne.n	8009d5c <HAL_UART_IRQHandler+0x144>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d031      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f961 	bl	800a024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d023      	beq.n	8009db8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	695a      	ldr	r2, [r3, #20]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d013      	beq.n	8009db0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	4a21      	ldr	r2, [pc, #132]	; (8009e14 <HAL_UART_IRQHandler+0x1fc>)
 8009d8e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fd ffbf 	bl	8007d18 <HAL_DMA_Abort_IT>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d016      	beq.n	8009dce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009daa:	4610      	mov	r0, r2
 8009dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dae:	e00e      	b.n	8009dce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f843 	bl	8009e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db6:	e00a      	b.n	8009dce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f83f 	bl	8009e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbe:	e006      	b.n	8009dce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f83b 	bl	8009e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009dcc:	e01d      	b.n	8009e0a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dce:	bf00      	nop
    return;
 8009dd0:	e01b      	b.n	8009e0a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d008      	beq.n	8009dee <HAL_UART_IRQHandler+0x1d6>
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f94d 	bl	800a086 <UART_Transmit_IT>
    return;
 8009dec:	e00e      	b.n	8009e0c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <HAL_UART_IRQHandler+0x1f4>
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f98e 	bl	800a124 <UART_EndTransmit_IT>
    return;
 8009e08:	e000      	b.n	8009e0c <HAL_UART_IRQHandler+0x1f4>
    return;
 8009e0a:	bf00      	nop
  }
}
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	0800a05f 	.word	0x0800a05f

08009e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr

08009e2a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr

08009e4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d11e      	bne.n	8009ea8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e7e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695a      	ldr	r2, [r3, #20]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0201 	bic.w	r2, r2, #1
 8009e8e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e9e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7fc ffbb 	bl	8006e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f7ff ffb0 	bl	8009e2a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	bf14      	ite	ne
 8009ef2:	2301      	movne	r3, #1
 8009ef4:	2300      	moveq	r3, #0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b21      	cmp	r3, #33	; 0x21
 8009f04:	d108      	bne.n	8009f18 <UART_DMAError+0x46>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f12:	68b8      	ldr	r0, [r7, #8]
 8009f14:	f000 f871 	bl	8009ffa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bf14      	ite	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	2300      	moveq	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b22      	cmp	r3, #34	; 0x22
 8009f38:	d108      	bne.n	8009f4c <UART_DMAError+0x7a>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2200      	movs	r2, #0
 8009f44:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f46:	68b8      	ldr	r0, [r7, #8]
 8009f48:	f000 f86c 	bl	800a024 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f50:	f043 0210 	orr.w	r2, r3, #16
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f58:	68b8      	ldr	r0, [r7, #8]
 8009f5a:	f7ff ff6f 	bl	8009e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	603b      	str	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f76:	e02c      	b.n	8009fd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d028      	beq.n	8009fd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f86:	f7fd fc7b 	bl	8007880 <HAL_GetTick>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d21d      	bcs.n	8009fd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fa4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	695a      	ldr	r2, [r3, #20]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0201 	bic.w	r2, r2, #1
 8009fb4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e00f      	b.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	bf0c      	ite	eq
 8009fe2:	2301      	moveq	r3, #1
 8009fe4:	2300      	movne	r3, #0
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	461a      	mov	r2, r3
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d0c3      	beq.n	8009f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68da      	ldr	r2, [r3, #12]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a010:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a01a:	bf00      	nop
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	bc80      	pop	{r7}
 800a022:	4770      	bx	lr

0800a024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a03a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0201 	bic.w	r2, r2, #1
 800a04a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2220      	movs	r2, #32
 800a050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	bc80      	pop	{r7}
 800a05c:	4770      	bx	lr

0800a05e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff fedf 	bl	8009e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b21      	cmp	r3, #33	; 0x21
 800a098:	d13e      	bne.n	800a118 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a2:	d114      	bne.n	800a0ce <UART_Transmit_IT+0x48>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d110      	bne.n	800a0ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	1c9a      	adds	r2, r3, #2
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	621a      	str	r2, [r3, #32]
 800a0cc:	e008      	b.n	800a0e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	1c59      	adds	r1, r3, #1
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6211      	str	r1, [r2, #32]
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10f      	bne.n	800a114 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68da      	ldr	r2, [r3, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a118:	2302      	movs	r3, #2
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	bc80      	pop	{r7}
 800a122:	4770      	bx	lr

0800a124 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a13a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2220      	movs	r2, #32
 800a140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff fe67 	bl	8009e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b22      	cmp	r3, #34	; 0x22
 800a166:	d170      	bne.n	800a24a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a170:	d117      	bne.n	800a1a2 <UART_Receive_IT+0x4e>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d113      	bne.n	800a1a2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a182:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a190:	b29a      	uxth	r2, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	1c9a      	adds	r2, r3, #2
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	629a      	str	r2, [r3, #40]	; 0x28
 800a1a0:	e026      	b.n	800a1f0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b4:	d007      	beq.n	800a1c6 <UART_Receive_IT+0x72>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <UART_Receive_IT+0x80>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	e008      	b.n	800a1e6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a200:	2b00      	cmp	r3, #0
 800a202:	d120      	bne.n	800a246 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 0220 	bic.w	r2, r2, #32
 800a212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695a      	ldr	r2, [r3, #20]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0201 	bic.w	r2, r2, #1
 800a232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7fc fdf1 	bl	8006e24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	e002      	b.n	800a24c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	e000      	b.n	800a24c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800a24a:	2302      	movs	r3, #2
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689a      	ldr	r2, [r3, #8]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a28e:	f023 030c 	bic.w	r3, r3, #12
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6812      	ldr	r2, [r2, #0]
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	430b      	orrs	r3, r1
 800a29a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699a      	ldr	r2, [r3, #24]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a2c      	ldr	r2, [pc, #176]	; (800a368 <UART_SetConfig+0x114>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d103      	bne.n	800a2c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a2bc:	f7fe fe62 	bl	8008f84 <HAL_RCC_GetPCLK2Freq>
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	e002      	b.n	800a2ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a2c4:	f7fe fe4a 	bl	8008f5c <HAL_RCC_GetPCLK1Freq>
 800a2c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009a      	lsls	r2, r3, #2
 800a2d4:	441a      	add	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e0:	4a22      	ldr	r2, [pc, #136]	; (800a36c <UART_SetConfig+0x118>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	095b      	lsrs	r3, r3, #5
 800a2e8:	0119      	lsls	r1, r3, #4
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009a      	lsls	r2, r3, #2
 800a2f4:	441a      	add	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a300:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <UART_SetConfig+0x118>)
 800a302:	fba3 0302 	umull	r0, r3, r3, r2
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	2064      	movs	r0, #100	; 0x64
 800a30a:	fb00 f303 	mul.w	r3, r0, r3
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	3332      	adds	r3, #50	; 0x32
 800a314:	4a15      	ldr	r2, [pc, #84]	; (800a36c <UART_SetConfig+0x118>)
 800a316:	fba2 2303 	umull	r2, r3, r2, r3
 800a31a:	095b      	lsrs	r3, r3, #5
 800a31c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a320:	4419      	add	r1, r3
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009a      	lsls	r2, r3, #2
 800a32c:	441a      	add	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	fbb2 f2f3 	udiv	r2, r2, r3
 800a338:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <UART_SetConfig+0x118>)
 800a33a:	fba3 0302 	umull	r0, r3, r3, r2
 800a33e:	095b      	lsrs	r3, r3, #5
 800a340:	2064      	movs	r0, #100	; 0x64
 800a342:	fb00 f303 	mul.w	r3, r0, r3
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	3332      	adds	r3, #50	; 0x32
 800a34c:	4a07      	ldr	r2, [pc, #28]	; (800a36c <UART_SetConfig+0x118>)
 800a34e:	fba2 2303 	umull	r2, r3, r2, r3
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	f003 020f 	and.w	r2, r3, #15
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	440a      	add	r2, r1
 800a35e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a360:	bf00      	nop
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	40013800 	.word	0x40013800
 800a36c:	51eb851f 	.word	0x51eb851f

0800a370 <__errno>:
 800a370:	4b01      	ldr	r3, [pc, #4]	; (800a378 <__errno+0x8>)
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20000018 	.word	0x20000018

0800a37c <__libc_init_array>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	2600      	movs	r6, #0
 800a380:	4d0c      	ldr	r5, [pc, #48]	; (800a3b4 <__libc_init_array+0x38>)
 800a382:	4c0d      	ldr	r4, [pc, #52]	; (800a3b8 <__libc_init_array+0x3c>)
 800a384:	1b64      	subs	r4, r4, r5
 800a386:	10a4      	asrs	r4, r4, #2
 800a388:	42a6      	cmp	r6, r4
 800a38a:	d109      	bne.n	800a3a0 <__libc_init_array+0x24>
 800a38c:	f000 fc84 	bl	800ac98 <_init>
 800a390:	2600      	movs	r6, #0
 800a392:	4d0a      	ldr	r5, [pc, #40]	; (800a3bc <__libc_init_array+0x40>)
 800a394:	4c0a      	ldr	r4, [pc, #40]	; (800a3c0 <__libc_init_array+0x44>)
 800a396:	1b64      	subs	r4, r4, r5
 800a398:	10a4      	asrs	r4, r4, #2
 800a39a:	42a6      	cmp	r6, r4
 800a39c:	d105      	bne.n	800a3aa <__libc_init_array+0x2e>
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3a4:	4798      	blx	r3
 800a3a6:	3601      	adds	r6, #1
 800a3a8:	e7ee      	b.n	800a388 <__libc_init_array+0xc>
 800a3aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ae:	4798      	blx	r3
 800a3b0:	3601      	adds	r6, #1
 800a3b2:	e7f2      	b.n	800a39a <__libc_init_array+0x1e>
 800a3b4:	0800c894 	.word	0x0800c894
 800a3b8:	0800c894 	.word	0x0800c894
 800a3bc:	0800c894 	.word	0x0800c894
 800a3c0:	0800c898 	.word	0x0800c898

0800a3c4 <memset>:
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	4402      	add	r2, r0
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d100      	bne.n	800a3ce <memset+0xa>
 800a3cc:	4770      	bx	lr
 800a3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a3d2:	e7f9      	b.n	800a3c8 <memset+0x4>

0800a3d4 <siprintf>:
 800a3d4:	b40e      	push	{r1, r2, r3}
 800a3d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3da:	b500      	push	{lr}
 800a3dc:	b09c      	sub	sp, #112	; 0x70
 800a3de:	ab1d      	add	r3, sp, #116	; 0x74
 800a3e0:	9002      	str	r0, [sp, #8]
 800a3e2:	9006      	str	r0, [sp, #24]
 800a3e4:	9107      	str	r1, [sp, #28]
 800a3e6:	9104      	str	r1, [sp, #16]
 800a3e8:	4808      	ldr	r0, [pc, #32]	; (800a40c <siprintf+0x38>)
 800a3ea:	4909      	ldr	r1, [pc, #36]	; (800a410 <siprintf+0x3c>)
 800a3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f0:	9105      	str	r1, [sp, #20]
 800a3f2:	6800      	ldr	r0, [r0, #0]
 800a3f4:	a902      	add	r1, sp, #8
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	f000 f890 	bl	800a51c <_svfiprintf_r>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	9b02      	ldr	r3, [sp, #8]
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	b01c      	add	sp, #112	; 0x70
 800a404:	f85d eb04 	ldr.w	lr, [sp], #4
 800a408:	b003      	add	sp, #12
 800a40a:	4770      	bx	lr
 800a40c:	20000018 	.word	0x20000018
 800a410:	ffff0208 	.word	0xffff0208

0800a414 <strncmp>:
 800a414:	b510      	push	{r4, lr}
 800a416:	b16a      	cbz	r2, 800a434 <strncmp+0x20>
 800a418:	3901      	subs	r1, #1
 800a41a:	1884      	adds	r4, r0, r2
 800a41c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a420:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a424:	4293      	cmp	r3, r2
 800a426:	d103      	bne.n	800a430 <strncmp+0x1c>
 800a428:	42a0      	cmp	r0, r4
 800a42a:	d001      	beq.n	800a430 <strncmp+0x1c>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1f5      	bne.n	800a41c <strncmp+0x8>
 800a430:	1a98      	subs	r0, r3, r2
 800a432:	bd10      	pop	{r4, pc}
 800a434:	4610      	mov	r0, r2
 800a436:	e7fc      	b.n	800a432 <strncmp+0x1e>

0800a438 <strstr>:
 800a438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43a:	780c      	ldrb	r4, [r1, #0]
 800a43c:	b164      	cbz	r4, 800a458 <strstr+0x20>
 800a43e:	4603      	mov	r3, r0
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	1c5e      	adds	r6, r3, #1
 800a446:	b90a      	cbnz	r2, 800a44c <strstr+0x14>
 800a448:	4610      	mov	r0, r2
 800a44a:	e005      	b.n	800a458 <strstr+0x20>
 800a44c:	4294      	cmp	r4, r2
 800a44e:	d108      	bne.n	800a462 <strstr+0x2a>
 800a450:	460d      	mov	r5, r1
 800a452:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a456:	b902      	cbnz	r2, 800a45a <strstr+0x22>
 800a458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a45a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a45e:	4297      	cmp	r7, r2
 800a460:	d0f7      	beq.n	800a452 <strstr+0x1a>
 800a462:	4633      	mov	r3, r6
 800a464:	e7ec      	b.n	800a440 <strstr+0x8>

0800a466 <__ssputs_r>:
 800a466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a46a:	688e      	ldr	r6, [r1, #8]
 800a46c:	4682      	mov	sl, r0
 800a46e:	429e      	cmp	r6, r3
 800a470:	460c      	mov	r4, r1
 800a472:	4690      	mov	r8, r2
 800a474:	461f      	mov	r7, r3
 800a476:	d838      	bhi.n	800a4ea <__ssputs_r+0x84>
 800a478:	898a      	ldrh	r2, [r1, #12]
 800a47a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a47e:	d032      	beq.n	800a4e6 <__ssputs_r+0x80>
 800a480:	6825      	ldr	r5, [r4, #0]
 800a482:	6909      	ldr	r1, [r1, #16]
 800a484:	3301      	adds	r3, #1
 800a486:	eba5 0901 	sub.w	r9, r5, r1
 800a48a:	6965      	ldr	r5, [r4, #20]
 800a48c:	444b      	add	r3, r9
 800a48e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a492:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a496:	106d      	asrs	r5, r5, #1
 800a498:	429d      	cmp	r5, r3
 800a49a:	bf38      	it	cc
 800a49c:	461d      	movcc	r5, r3
 800a49e:	0553      	lsls	r3, r2, #21
 800a4a0:	d531      	bpl.n	800a506 <__ssputs_r+0xa0>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	f000 fb52 	bl	800ab4c <_malloc_r>
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	b950      	cbnz	r0, 800a4c2 <__ssputs_r+0x5c>
 800a4ac:	230c      	movs	r3, #12
 800a4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b2:	f8ca 3000 	str.w	r3, [sl]
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c2:	464a      	mov	r2, r9
 800a4c4:	6921      	ldr	r1, [r4, #16]
 800a4c6:	f000 facd 	bl	800aa64 <memcpy>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	6126      	str	r6, [r4, #16]
 800a4d8:	444e      	add	r6, r9
 800a4da:	6026      	str	r6, [r4, #0]
 800a4dc:	463e      	mov	r6, r7
 800a4de:	6165      	str	r5, [r4, #20]
 800a4e0:	eba5 0509 	sub.w	r5, r5, r9
 800a4e4:	60a5      	str	r5, [r4, #8]
 800a4e6:	42be      	cmp	r6, r7
 800a4e8:	d900      	bls.n	800a4ec <__ssputs_r+0x86>
 800a4ea:	463e      	mov	r6, r7
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	6820      	ldr	r0, [r4, #0]
 800a4f2:	f000 fac5 	bl	800aa80 <memmove>
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	1b9b      	subs	r3, r3, r6
 800a4fc:	4432      	add	r2, r6
 800a4fe:	2000      	movs	r0, #0
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	6022      	str	r2, [r4, #0]
 800a504:	e7db      	b.n	800a4be <__ssputs_r+0x58>
 800a506:	462a      	mov	r2, r5
 800a508:	f000 fb7a 	bl	800ac00 <_realloc_r>
 800a50c:	4606      	mov	r6, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	d1e1      	bne.n	800a4d6 <__ssputs_r+0x70>
 800a512:	4650      	mov	r0, sl
 800a514:	6921      	ldr	r1, [r4, #16]
 800a516:	f000 facd 	bl	800aab4 <_free_r>
 800a51a:	e7c7      	b.n	800a4ac <__ssputs_r+0x46>

0800a51c <_svfiprintf_r>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	4698      	mov	r8, r3
 800a522:	898b      	ldrh	r3, [r1, #12]
 800a524:	4607      	mov	r7, r0
 800a526:	061b      	lsls	r3, r3, #24
 800a528:	460d      	mov	r5, r1
 800a52a:	4614      	mov	r4, r2
 800a52c:	b09d      	sub	sp, #116	; 0x74
 800a52e:	d50e      	bpl.n	800a54e <_svfiprintf_r+0x32>
 800a530:	690b      	ldr	r3, [r1, #16]
 800a532:	b963      	cbnz	r3, 800a54e <_svfiprintf_r+0x32>
 800a534:	2140      	movs	r1, #64	; 0x40
 800a536:	f000 fb09 	bl	800ab4c <_malloc_r>
 800a53a:	6028      	str	r0, [r5, #0]
 800a53c:	6128      	str	r0, [r5, #16]
 800a53e:	b920      	cbnz	r0, 800a54a <_svfiprintf_r+0x2e>
 800a540:	230c      	movs	r3, #12
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e0d1      	b.n	800a6ee <_svfiprintf_r+0x1d2>
 800a54a:	2340      	movs	r3, #64	; 0x40
 800a54c:	616b      	str	r3, [r5, #20]
 800a54e:	2300      	movs	r3, #0
 800a550:	9309      	str	r3, [sp, #36]	; 0x24
 800a552:	2320      	movs	r3, #32
 800a554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a558:	2330      	movs	r3, #48	; 0x30
 800a55a:	f04f 0901 	mov.w	r9, #1
 800a55e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a562:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a708 <_svfiprintf_r+0x1ec>
 800a566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a56a:	4623      	mov	r3, r4
 800a56c:	469a      	mov	sl, r3
 800a56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a572:	b10a      	cbz	r2, 800a578 <_svfiprintf_r+0x5c>
 800a574:	2a25      	cmp	r2, #37	; 0x25
 800a576:	d1f9      	bne.n	800a56c <_svfiprintf_r+0x50>
 800a578:	ebba 0b04 	subs.w	fp, sl, r4
 800a57c:	d00b      	beq.n	800a596 <_svfiprintf_r+0x7a>
 800a57e:	465b      	mov	r3, fp
 800a580:	4622      	mov	r2, r4
 800a582:	4629      	mov	r1, r5
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff ff6e 	bl	800a466 <__ssputs_r>
 800a58a:	3001      	adds	r0, #1
 800a58c:	f000 80aa 	beq.w	800a6e4 <_svfiprintf_r+0x1c8>
 800a590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a592:	445a      	add	r2, fp
 800a594:	9209      	str	r2, [sp, #36]	; 0x24
 800a596:	f89a 3000 	ldrb.w	r3, [sl]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 80a2 	beq.w	800a6e4 <_svfiprintf_r+0x1c8>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5aa:	f10a 0a01 	add.w	sl, sl, #1
 800a5ae:	9304      	str	r3, [sp, #16]
 800a5b0:	9307      	str	r3, [sp, #28]
 800a5b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5b8:	4654      	mov	r4, sl
 800a5ba:	2205      	movs	r2, #5
 800a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c0:	4851      	ldr	r0, [pc, #324]	; (800a708 <_svfiprintf_r+0x1ec>)
 800a5c2:	f000 fa41 	bl	800aa48 <memchr>
 800a5c6:	9a04      	ldr	r2, [sp, #16]
 800a5c8:	b9d8      	cbnz	r0, 800a602 <_svfiprintf_r+0xe6>
 800a5ca:	06d0      	lsls	r0, r2, #27
 800a5cc:	bf44      	itt	mi
 800a5ce:	2320      	movmi	r3, #32
 800a5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d4:	0711      	lsls	r1, r2, #28
 800a5d6:	bf44      	itt	mi
 800a5d8:	232b      	movmi	r3, #43	; 0x2b
 800a5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5de:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e4:	d015      	beq.n	800a612 <_svfiprintf_r+0xf6>
 800a5e6:	4654      	mov	r4, sl
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	f04f 0c0a 	mov.w	ip, #10
 800a5ee:	9a07      	ldr	r2, [sp, #28]
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f6:	3b30      	subs	r3, #48	; 0x30
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d94e      	bls.n	800a69a <_svfiprintf_r+0x17e>
 800a5fc:	b1b0      	cbz	r0, 800a62c <_svfiprintf_r+0x110>
 800a5fe:	9207      	str	r2, [sp, #28]
 800a600:	e014      	b.n	800a62c <_svfiprintf_r+0x110>
 800a602:	eba0 0308 	sub.w	r3, r0, r8
 800a606:	fa09 f303 	lsl.w	r3, r9, r3
 800a60a:	4313      	orrs	r3, r2
 800a60c:	46a2      	mov	sl, r4
 800a60e:	9304      	str	r3, [sp, #16]
 800a610:	e7d2      	b.n	800a5b8 <_svfiprintf_r+0x9c>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	1d19      	adds	r1, r3, #4
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	9103      	str	r1, [sp, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bfbb      	ittet	lt
 800a61e:	425b      	neglt	r3, r3
 800a620:	f042 0202 	orrlt.w	r2, r2, #2
 800a624:	9307      	strge	r3, [sp, #28]
 800a626:	9307      	strlt	r3, [sp, #28]
 800a628:	bfb8      	it	lt
 800a62a:	9204      	strlt	r2, [sp, #16]
 800a62c:	7823      	ldrb	r3, [r4, #0]
 800a62e:	2b2e      	cmp	r3, #46	; 0x2e
 800a630:	d10c      	bne.n	800a64c <_svfiprintf_r+0x130>
 800a632:	7863      	ldrb	r3, [r4, #1]
 800a634:	2b2a      	cmp	r3, #42	; 0x2a
 800a636:	d135      	bne.n	800a6a4 <_svfiprintf_r+0x188>
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	3402      	adds	r4, #2
 800a63c:	1d1a      	adds	r2, r3, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	9203      	str	r2, [sp, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	bfb8      	it	lt
 800a646:	f04f 33ff 	movlt.w	r3, #4294967295
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a718 <_svfiprintf_r+0x1fc>
 800a650:	2203      	movs	r2, #3
 800a652:	4650      	mov	r0, sl
 800a654:	7821      	ldrb	r1, [r4, #0]
 800a656:	f000 f9f7 	bl	800aa48 <memchr>
 800a65a:	b140      	cbz	r0, 800a66e <_svfiprintf_r+0x152>
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	eba0 000a 	sub.w	r0, r0, sl
 800a662:	fa03 f000 	lsl.w	r0, r3, r0
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	3401      	adds	r4, #1
 800a66a:	4303      	orrs	r3, r0
 800a66c:	9304      	str	r3, [sp, #16]
 800a66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a672:	2206      	movs	r2, #6
 800a674:	4825      	ldr	r0, [pc, #148]	; (800a70c <_svfiprintf_r+0x1f0>)
 800a676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a67a:	f000 f9e5 	bl	800aa48 <memchr>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d038      	beq.n	800a6f4 <_svfiprintf_r+0x1d8>
 800a682:	4b23      	ldr	r3, [pc, #140]	; (800a710 <_svfiprintf_r+0x1f4>)
 800a684:	bb1b      	cbnz	r3, 800a6ce <_svfiprintf_r+0x1b2>
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	3307      	adds	r3, #7
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	3308      	adds	r3, #8
 800a690:	9303      	str	r3, [sp, #12]
 800a692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a694:	4433      	add	r3, r6
 800a696:	9309      	str	r3, [sp, #36]	; 0x24
 800a698:	e767      	b.n	800a56a <_svfiprintf_r+0x4e>
 800a69a:	460c      	mov	r4, r1
 800a69c:	2001      	movs	r0, #1
 800a69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6a2:	e7a5      	b.n	800a5f0 <_svfiprintf_r+0xd4>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f04f 0c0a 	mov.w	ip, #10
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	3401      	adds	r4, #1
 800a6ae:	9305      	str	r3, [sp, #20]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b6:	3a30      	subs	r2, #48	; 0x30
 800a6b8:	2a09      	cmp	r2, #9
 800a6ba:	d903      	bls.n	800a6c4 <_svfiprintf_r+0x1a8>
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0c5      	beq.n	800a64c <_svfiprintf_r+0x130>
 800a6c0:	9105      	str	r1, [sp, #20]
 800a6c2:	e7c3      	b.n	800a64c <_svfiprintf_r+0x130>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6cc:	e7f0      	b.n	800a6b0 <_svfiprintf_r+0x194>
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <_svfiprintf_r+0x1f8>)
 800a6d8:	a904      	add	r1, sp, #16
 800a6da:	f3af 8000 	nop.w
 800a6de:	1c42      	adds	r2, r0, #1
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	d1d6      	bne.n	800a692 <_svfiprintf_r+0x176>
 800a6e4:	89ab      	ldrh	r3, [r5, #12]
 800a6e6:	065b      	lsls	r3, r3, #25
 800a6e8:	f53f af2c 	bmi.w	800a544 <_svfiprintf_r+0x28>
 800a6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ee:	b01d      	add	sp, #116	; 0x74
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	ab03      	add	r3, sp, #12
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	4b05      	ldr	r3, [pc, #20]	; (800a714 <_svfiprintf_r+0x1f8>)
 800a6fe:	a904      	add	r1, sp, #16
 800a700:	f000 f87c 	bl	800a7fc <_printf_i>
 800a704:	e7eb      	b.n	800a6de <_svfiprintf_r+0x1c2>
 800a706:	bf00      	nop
 800a708:	0800c860 	.word	0x0800c860
 800a70c:	0800c86a 	.word	0x0800c86a
 800a710:	00000000 	.word	0x00000000
 800a714:	0800a467 	.word	0x0800a467
 800a718:	0800c866 	.word	0x0800c866

0800a71c <_printf_common>:
 800a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	4616      	mov	r6, r2
 800a722:	4699      	mov	r9, r3
 800a724:	688a      	ldr	r2, [r1, #8]
 800a726:	690b      	ldr	r3, [r1, #16]
 800a728:	4607      	mov	r7, r0
 800a72a:	4293      	cmp	r3, r2
 800a72c:	bfb8      	it	lt
 800a72e:	4613      	movlt	r3, r2
 800a730:	6033      	str	r3, [r6, #0]
 800a732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a736:	460c      	mov	r4, r1
 800a738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a73c:	b10a      	cbz	r2, 800a742 <_printf_common+0x26>
 800a73e:	3301      	adds	r3, #1
 800a740:	6033      	str	r3, [r6, #0]
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	0699      	lsls	r1, r3, #26
 800a746:	bf42      	ittt	mi
 800a748:	6833      	ldrmi	r3, [r6, #0]
 800a74a:	3302      	addmi	r3, #2
 800a74c:	6033      	strmi	r3, [r6, #0]
 800a74e:	6825      	ldr	r5, [r4, #0]
 800a750:	f015 0506 	ands.w	r5, r5, #6
 800a754:	d106      	bne.n	800a764 <_printf_common+0x48>
 800a756:	f104 0a19 	add.w	sl, r4, #25
 800a75a:	68e3      	ldr	r3, [r4, #12]
 800a75c:	6832      	ldr	r2, [r6, #0]
 800a75e:	1a9b      	subs	r3, r3, r2
 800a760:	42ab      	cmp	r3, r5
 800a762:	dc28      	bgt.n	800a7b6 <_printf_common+0x9a>
 800a764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a768:	1e13      	subs	r3, r2, #0
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	bf18      	it	ne
 800a76e:	2301      	movne	r3, #1
 800a770:	0692      	lsls	r2, r2, #26
 800a772:	d42d      	bmi.n	800a7d0 <_printf_common+0xb4>
 800a774:	4649      	mov	r1, r9
 800a776:	4638      	mov	r0, r7
 800a778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a77c:	47c0      	blx	r8
 800a77e:	3001      	adds	r0, #1
 800a780:	d020      	beq.n	800a7c4 <_printf_common+0xa8>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	68e5      	ldr	r5, [r4, #12]
 800a786:	f003 0306 	and.w	r3, r3, #6
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	bf18      	it	ne
 800a78e:	2500      	movne	r5, #0
 800a790:	6832      	ldr	r2, [r6, #0]
 800a792:	f04f 0600 	mov.w	r6, #0
 800a796:	68a3      	ldr	r3, [r4, #8]
 800a798:	bf08      	it	eq
 800a79a:	1aad      	subeq	r5, r5, r2
 800a79c:	6922      	ldr	r2, [r4, #16]
 800a79e:	bf08      	it	eq
 800a7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	bfc4      	itt	gt
 800a7a8:	1a9b      	subgt	r3, r3, r2
 800a7aa:	18ed      	addgt	r5, r5, r3
 800a7ac:	341a      	adds	r4, #26
 800a7ae:	42b5      	cmp	r5, r6
 800a7b0:	d11a      	bne.n	800a7e8 <_printf_common+0xcc>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e008      	b.n	800a7c8 <_printf_common+0xac>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	4638      	mov	r0, r7
 800a7be:	47c0      	blx	r8
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d103      	bne.n	800a7cc <_printf_common+0xb0>
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	e7c4      	b.n	800a75a <_printf_common+0x3e>
 800a7d0:	2030      	movs	r0, #48	; 0x30
 800a7d2:	18e1      	adds	r1, r4, r3
 800a7d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7de:	4422      	add	r2, r4
 800a7e0:	3302      	adds	r3, #2
 800a7e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7e6:	e7c5      	b.n	800a774 <_printf_common+0x58>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	4622      	mov	r2, r4
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	47c0      	blx	r8
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d0e6      	beq.n	800a7c4 <_printf_common+0xa8>
 800a7f6:	3601      	adds	r6, #1
 800a7f8:	e7d9      	b.n	800a7ae <_printf_common+0x92>
	...

0800a7fc <_printf_i>:
 800a7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	7e27      	ldrb	r7, [r4, #24]
 800a804:	4691      	mov	r9, r2
 800a806:	2f78      	cmp	r7, #120	; 0x78
 800a808:	4680      	mov	r8, r0
 800a80a:	469a      	mov	sl, r3
 800a80c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a80e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a812:	d807      	bhi.n	800a824 <_printf_i+0x28>
 800a814:	2f62      	cmp	r7, #98	; 0x62
 800a816:	d80a      	bhi.n	800a82e <_printf_i+0x32>
 800a818:	2f00      	cmp	r7, #0
 800a81a:	f000 80d9 	beq.w	800a9d0 <_printf_i+0x1d4>
 800a81e:	2f58      	cmp	r7, #88	; 0x58
 800a820:	f000 80a4 	beq.w	800a96c <_printf_i+0x170>
 800a824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a82c:	e03a      	b.n	800a8a4 <_printf_i+0xa8>
 800a82e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a832:	2b15      	cmp	r3, #21
 800a834:	d8f6      	bhi.n	800a824 <_printf_i+0x28>
 800a836:	a001      	add	r0, pc, #4	; (adr r0, 800a83c <_printf_i+0x40>)
 800a838:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a83c:	0800a895 	.word	0x0800a895
 800a840:	0800a8a9 	.word	0x0800a8a9
 800a844:	0800a825 	.word	0x0800a825
 800a848:	0800a825 	.word	0x0800a825
 800a84c:	0800a825 	.word	0x0800a825
 800a850:	0800a825 	.word	0x0800a825
 800a854:	0800a8a9 	.word	0x0800a8a9
 800a858:	0800a825 	.word	0x0800a825
 800a85c:	0800a825 	.word	0x0800a825
 800a860:	0800a825 	.word	0x0800a825
 800a864:	0800a825 	.word	0x0800a825
 800a868:	0800a9b7 	.word	0x0800a9b7
 800a86c:	0800a8d9 	.word	0x0800a8d9
 800a870:	0800a999 	.word	0x0800a999
 800a874:	0800a825 	.word	0x0800a825
 800a878:	0800a825 	.word	0x0800a825
 800a87c:	0800a9d9 	.word	0x0800a9d9
 800a880:	0800a825 	.word	0x0800a825
 800a884:	0800a8d9 	.word	0x0800a8d9
 800a888:	0800a825 	.word	0x0800a825
 800a88c:	0800a825 	.word	0x0800a825
 800a890:	0800a9a1 	.word	0x0800a9a1
 800a894:	680b      	ldr	r3, [r1, #0]
 800a896:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a89a:	1d1a      	adds	r2, r3, #4
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	600a      	str	r2, [r1, #0]
 800a8a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0a4      	b.n	800a9f2 <_printf_i+0x1f6>
 800a8a8:	6825      	ldr	r5, [r4, #0]
 800a8aa:	6808      	ldr	r0, [r1, #0]
 800a8ac:	062e      	lsls	r6, r5, #24
 800a8ae:	f100 0304 	add.w	r3, r0, #4
 800a8b2:	d50a      	bpl.n	800a8ca <_printf_i+0xce>
 800a8b4:	6805      	ldr	r5, [r0, #0]
 800a8b6:	600b      	str	r3, [r1, #0]
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	da03      	bge.n	800a8c4 <_printf_i+0xc8>
 800a8bc:	232d      	movs	r3, #45	; 0x2d
 800a8be:	426d      	negs	r5, r5
 800a8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c4:	230a      	movs	r3, #10
 800a8c6:	485e      	ldr	r0, [pc, #376]	; (800aa40 <_printf_i+0x244>)
 800a8c8:	e019      	b.n	800a8fe <_printf_i+0x102>
 800a8ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a8ce:	6805      	ldr	r5, [r0, #0]
 800a8d0:	600b      	str	r3, [r1, #0]
 800a8d2:	bf18      	it	ne
 800a8d4:	b22d      	sxthne	r5, r5
 800a8d6:	e7ef      	b.n	800a8b8 <_printf_i+0xbc>
 800a8d8:	680b      	ldr	r3, [r1, #0]
 800a8da:	6825      	ldr	r5, [r4, #0]
 800a8dc:	1d18      	adds	r0, r3, #4
 800a8de:	6008      	str	r0, [r1, #0]
 800a8e0:	0628      	lsls	r0, r5, #24
 800a8e2:	d501      	bpl.n	800a8e8 <_printf_i+0xec>
 800a8e4:	681d      	ldr	r5, [r3, #0]
 800a8e6:	e002      	b.n	800a8ee <_printf_i+0xf2>
 800a8e8:	0669      	lsls	r1, r5, #25
 800a8ea:	d5fb      	bpl.n	800a8e4 <_printf_i+0xe8>
 800a8ec:	881d      	ldrh	r5, [r3, #0]
 800a8ee:	2f6f      	cmp	r7, #111	; 0x6f
 800a8f0:	bf0c      	ite	eq
 800a8f2:	2308      	moveq	r3, #8
 800a8f4:	230a      	movne	r3, #10
 800a8f6:	4852      	ldr	r0, [pc, #328]	; (800aa40 <_printf_i+0x244>)
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8fe:	6866      	ldr	r6, [r4, #4]
 800a900:	2e00      	cmp	r6, #0
 800a902:	bfa8      	it	ge
 800a904:	6821      	ldrge	r1, [r4, #0]
 800a906:	60a6      	str	r6, [r4, #8]
 800a908:	bfa4      	itt	ge
 800a90a:	f021 0104 	bicge.w	r1, r1, #4
 800a90e:	6021      	strge	r1, [r4, #0]
 800a910:	b90d      	cbnz	r5, 800a916 <_printf_i+0x11a>
 800a912:	2e00      	cmp	r6, #0
 800a914:	d04d      	beq.n	800a9b2 <_printf_i+0x1b6>
 800a916:	4616      	mov	r6, r2
 800a918:	fbb5 f1f3 	udiv	r1, r5, r3
 800a91c:	fb03 5711 	mls	r7, r3, r1, r5
 800a920:	5dc7      	ldrb	r7, [r0, r7]
 800a922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a926:	462f      	mov	r7, r5
 800a928:	42bb      	cmp	r3, r7
 800a92a:	460d      	mov	r5, r1
 800a92c:	d9f4      	bls.n	800a918 <_printf_i+0x11c>
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d10b      	bne.n	800a94a <_printf_i+0x14e>
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	07df      	lsls	r7, r3, #31
 800a936:	d508      	bpl.n	800a94a <_printf_i+0x14e>
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	6861      	ldr	r1, [r4, #4]
 800a93c:	4299      	cmp	r1, r3
 800a93e:	bfde      	ittt	le
 800a940:	2330      	movle	r3, #48	; 0x30
 800a942:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a94a:	1b92      	subs	r2, r2, r6
 800a94c:	6122      	str	r2, [r4, #16]
 800a94e:	464b      	mov	r3, r9
 800a950:	4621      	mov	r1, r4
 800a952:	4640      	mov	r0, r8
 800a954:	f8cd a000 	str.w	sl, [sp]
 800a958:	aa03      	add	r2, sp, #12
 800a95a:	f7ff fedf 	bl	800a71c <_printf_common>
 800a95e:	3001      	adds	r0, #1
 800a960:	d14c      	bne.n	800a9fc <_printf_i+0x200>
 800a962:	f04f 30ff 	mov.w	r0, #4294967295
 800a966:	b004      	add	sp, #16
 800a968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96c:	4834      	ldr	r0, [pc, #208]	; (800aa40 <_printf_i+0x244>)
 800a96e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a972:	680e      	ldr	r6, [r1, #0]
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	f856 5b04 	ldr.w	r5, [r6], #4
 800a97a:	061f      	lsls	r7, r3, #24
 800a97c:	600e      	str	r6, [r1, #0]
 800a97e:	d514      	bpl.n	800a9aa <_printf_i+0x1ae>
 800a980:	07d9      	lsls	r1, r3, #31
 800a982:	bf44      	itt	mi
 800a984:	f043 0320 	orrmi.w	r3, r3, #32
 800a988:	6023      	strmi	r3, [r4, #0]
 800a98a:	b91d      	cbnz	r5, 800a994 <_printf_i+0x198>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	f023 0320 	bic.w	r3, r3, #32
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	2310      	movs	r3, #16
 800a996:	e7af      	b.n	800a8f8 <_printf_i+0xfc>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	f043 0320 	orr.w	r3, r3, #32
 800a99e:	6023      	str	r3, [r4, #0]
 800a9a0:	2378      	movs	r3, #120	; 0x78
 800a9a2:	4828      	ldr	r0, [pc, #160]	; (800aa44 <_printf_i+0x248>)
 800a9a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9a8:	e7e3      	b.n	800a972 <_printf_i+0x176>
 800a9aa:	065e      	lsls	r6, r3, #25
 800a9ac:	bf48      	it	mi
 800a9ae:	b2ad      	uxthmi	r5, r5
 800a9b0:	e7e6      	b.n	800a980 <_printf_i+0x184>
 800a9b2:	4616      	mov	r6, r2
 800a9b4:	e7bb      	b.n	800a92e <_printf_i+0x132>
 800a9b6:	680b      	ldr	r3, [r1, #0]
 800a9b8:	6826      	ldr	r6, [r4, #0]
 800a9ba:	1d1d      	adds	r5, r3, #4
 800a9bc:	6960      	ldr	r0, [r4, #20]
 800a9be:	600d      	str	r5, [r1, #0]
 800a9c0:	0635      	lsls	r5, r6, #24
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	d501      	bpl.n	800a9ca <_printf_i+0x1ce>
 800a9c6:	6018      	str	r0, [r3, #0]
 800a9c8:	e002      	b.n	800a9d0 <_printf_i+0x1d4>
 800a9ca:	0671      	lsls	r1, r6, #25
 800a9cc:	d5fb      	bpl.n	800a9c6 <_printf_i+0x1ca>
 800a9ce:	8018      	strh	r0, [r3, #0]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4616      	mov	r6, r2
 800a9d4:	6123      	str	r3, [r4, #16]
 800a9d6:	e7ba      	b.n	800a94e <_printf_i+0x152>
 800a9d8:	680b      	ldr	r3, [r1, #0]
 800a9da:	1d1a      	adds	r2, r3, #4
 800a9dc:	600a      	str	r2, [r1, #0]
 800a9de:	681e      	ldr	r6, [r3, #0]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	6862      	ldr	r2, [r4, #4]
 800a9e6:	f000 f82f 	bl	800aa48 <memchr>
 800a9ea:	b108      	cbz	r0, 800a9f0 <_printf_i+0x1f4>
 800a9ec:	1b80      	subs	r0, r0, r6
 800a9ee:	6060      	str	r0, [r4, #4]
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9fa:	e7a8      	b.n	800a94e <_printf_i+0x152>
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	4649      	mov	r1, r9
 800aa00:	4640      	mov	r0, r8
 800aa02:	6923      	ldr	r3, [r4, #16]
 800aa04:	47d0      	blx	sl
 800aa06:	3001      	adds	r0, #1
 800aa08:	d0ab      	beq.n	800a962 <_printf_i+0x166>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	079b      	lsls	r3, r3, #30
 800aa0e:	d413      	bmi.n	800aa38 <_printf_i+0x23c>
 800aa10:	68e0      	ldr	r0, [r4, #12]
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	4298      	cmp	r0, r3
 800aa16:	bfb8      	it	lt
 800aa18:	4618      	movlt	r0, r3
 800aa1a:	e7a4      	b.n	800a966 <_printf_i+0x16a>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	4632      	mov	r2, r6
 800aa20:	4649      	mov	r1, r9
 800aa22:	4640      	mov	r0, r8
 800aa24:	47d0      	blx	sl
 800aa26:	3001      	adds	r0, #1
 800aa28:	d09b      	beq.n	800a962 <_printf_i+0x166>
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	68e3      	ldr	r3, [r4, #12]
 800aa2e:	9903      	ldr	r1, [sp, #12]
 800aa30:	1a5b      	subs	r3, r3, r1
 800aa32:	42ab      	cmp	r3, r5
 800aa34:	dcf2      	bgt.n	800aa1c <_printf_i+0x220>
 800aa36:	e7eb      	b.n	800aa10 <_printf_i+0x214>
 800aa38:	2500      	movs	r5, #0
 800aa3a:	f104 0619 	add.w	r6, r4, #25
 800aa3e:	e7f5      	b.n	800aa2c <_printf_i+0x230>
 800aa40:	0800c871 	.word	0x0800c871
 800aa44:	0800c882 	.word	0x0800c882

0800aa48 <memchr>:
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	b2c9      	uxtb	r1, r1
 800aa4e:	4402      	add	r2, r0
 800aa50:	4293      	cmp	r3, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	d101      	bne.n	800aa5a <memchr+0x12>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e003      	b.n	800aa62 <memchr+0x1a>
 800aa5a:	7804      	ldrb	r4, [r0, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	428c      	cmp	r4, r1
 800aa60:	d1f6      	bne.n	800aa50 <memchr+0x8>
 800aa62:	bd10      	pop	{r4, pc}

0800aa64 <memcpy>:
 800aa64:	440a      	add	r2, r1
 800aa66:	4291      	cmp	r1, r2
 800aa68:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa6c:	d100      	bne.n	800aa70 <memcpy+0xc>
 800aa6e:	4770      	bx	lr
 800aa70:	b510      	push	{r4, lr}
 800aa72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa76:	4291      	cmp	r1, r2
 800aa78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa7c:	d1f9      	bne.n	800aa72 <memcpy+0xe>
 800aa7e:	bd10      	pop	{r4, pc}

0800aa80 <memmove>:
 800aa80:	4288      	cmp	r0, r1
 800aa82:	b510      	push	{r4, lr}
 800aa84:	eb01 0402 	add.w	r4, r1, r2
 800aa88:	d902      	bls.n	800aa90 <memmove+0x10>
 800aa8a:	4284      	cmp	r4, r0
 800aa8c:	4623      	mov	r3, r4
 800aa8e:	d807      	bhi.n	800aaa0 <memmove+0x20>
 800aa90:	1e43      	subs	r3, r0, #1
 800aa92:	42a1      	cmp	r1, r4
 800aa94:	d008      	beq.n	800aaa8 <memmove+0x28>
 800aa96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa9e:	e7f8      	b.n	800aa92 <memmove+0x12>
 800aaa0:	4601      	mov	r1, r0
 800aaa2:	4402      	add	r2, r0
 800aaa4:	428a      	cmp	r2, r1
 800aaa6:	d100      	bne.n	800aaaa <memmove+0x2a>
 800aaa8:	bd10      	pop	{r4, pc}
 800aaaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aab2:	e7f7      	b.n	800aaa4 <memmove+0x24>

0800aab4 <_free_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4605      	mov	r5, r0
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d043      	beq.n	800ab44 <_free_r+0x90>
 800aabc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac0:	1f0c      	subs	r4, r1, #4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bfb8      	it	lt
 800aac6:	18e4      	addlt	r4, r4, r3
 800aac8:	f000 f8d0 	bl	800ac6c <__malloc_lock>
 800aacc:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <_free_r+0x94>)
 800aace:	6813      	ldr	r3, [r2, #0]
 800aad0:	4610      	mov	r0, r2
 800aad2:	b933      	cbnz	r3, 800aae2 <_free_r+0x2e>
 800aad4:	6063      	str	r3, [r4, #4]
 800aad6:	6014      	str	r4, [r2, #0]
 800aad8:	4628      	mov	r0, r5
 800aada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aade:	f000 b8cb 	b.w	800ac78 <__malloc_unlock>
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	d90a      	bls.n	800aafc <_free_r+0x48>
 800aae6:	6821      	ldr	r1, [r4, #0]
 800aae8:	1862      	adds	r2, r4, r1
 800aaea:	4293      	cmp	r3, r2
 800aaec:	bf01      	itttt	eq
 800aaee:	681a      	ldreq	r2, [r3, #0]
 800aaf0:	685b      	ldreq	r3, [r3, #4]
 800aaf2:	1852      	addeq	r2, r2, r1
 800aaf4:	6022      	streq	r2, [r4, #0]
 800aaf6:	6063      	str	r3, [r4, #4]
 800aaf8:	6004      	str	r4, [r0, #0]
 800aafa:	e7ed      	b.n	800aad8 <_free_r+0x24>
 800aafc:	461a      	mov	r2, r3
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	b10b      	cbz	r3, 800ab06 <_free_r+0x52>
 800ab02:	42a3      	cmp	r3, r4
 800ab04:	d9fa      	bls.n	800aafc <_free_r+0x48>
 800ab06:	6811      	ldr	r1, [r2, #0]
 800ab08:	1850      	adds	r0, r2, r1
 800ab0a:	42a0      	cmp	r0, r4
 800ab0c:	d10b      	bne.n	800ab26 <_free_r+0x72>
 800ab0e:	6820      	ldr	r0, [r4, #0]
 800ab10:	4401      	add	r1, r0
 800ab12:	1850      	adds	r0, r2, r1
 800ab14:	4283      	cmp	r3, r0
 800ab16:	6011      	str	r1, [r2, #0]
 800ab18:	d1de      	bne.n	800aad8 <_free_r+0x24>
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	4401      	add	r1, r0
 800ab20:	6011      	str	r1, [r2, #0]
 800ab22:	6053      	str	r3, [r2, #4]
 800ab24:	e7d8      	b.n	800aad8 <_free_r+0x24>
 800ab26:	d902      	bls.n	800ab2e <_free_r+0x7a>
 800ab28:	230c      	movs	r3, #12
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	e7d4      	b.n	800aad8 <_free_r+0x24>
 800ab2e:	6820      	ldr	r0, [r4, #0]
 800ab30:	1821      	adds	r1, r4, r0
 800ab32:	428b      	cmp	r3, r1
 800ab34:	bf01      	itttt	eq
 800ab36:	6819      	ldreq	r1, [r3, #0]
 800ab38:	685b      	ldreq	r3, [r3, #4]
 800ab3a:	1809      	addeq	r1, r1, r0
 800ab3c:	6021      	streq	r1, [r4, #0]
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	6054      	str	r4, [r2, #4]
 800ab42:	e7c9      	b.n	800aad8 <_free_r+0x24>
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	bf00      	nop
 800ab48:	200010c4 	.word	0x200010c4

0800ab4c <_malloc_r>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	1ccd      	adds	r5, r1, #3
 800ab50:	f025 0503 	bic.w	r5, r5, #3
 800ab54:	3508      	adds	r5, #8
 800ab56:	2d0c      	cmp	r5, #12
 800ab58:	bf38      	it	cc
 800ab5a:	250c      	movcc	r5, #12
 800ab5c:	2d00      	cmp	r5, #0
 800ab5e:	4606      	mov	r6, r0
 800ab60:	db01      	blt.n	800ab66 <_malloc_r+0x1a>
 800ab62:	42a9      	cmp	r1, r5
 800ab64:	d903      	bls.n	800ab6e <_malloc_r+0x22>
 800ab66:	230c      	movs	r3, #12
 800ab68:	6033      	str	r3, [r6, #0]
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6e:	f000 f87d 	bl	800ac6c <__malloc_lock>
 800ab72:	4921      	ldr	r1, [pc, #132]	; (800abf8 <_malloc_r+0xac>)
 800ab74:	680a      	ldr	r2, [r1, #0]
 800ab76:	4614      	mov	r4, r2
 800ab78:	b99c      	cbnz	r4, 800aba2 <_malloc_r+0x56>
 800ab7a:	4f20      	ldr	r7, [pc, #128]	; (800abfc <_malloc_r+0xb0>)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	b923      	cbnz	r3, 800ab8a <_malloc_r+0x3e>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4630      	mov	r0, r6
 800ab84:	f000 f862 	bl	800ac4c <_sbrk_r>
 800ab88:	6038      	str	r0, [r7, #0]
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f000 f85d 	bl	800ac4c <_sbrk_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d123      	bne.n	800abde <_malloc_r+0x92>
 800ab96:	230c      	movs	r3, #12
 800ab98:	4630      	mov	r0, r6
 800ab9a:	6033      	str	r3, [r6, #0]
 800ab9c:	f000 f86c 	bl	800ac78 <__malloc_unlock>
 800aba0:	e7e3      	b.n	800ab6a <_malloc_r+0x1e>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	1b5b      	subs	r3, r3, r5
 800aba6:	d417      	bmi.n	800abd8 <_malloc_r+0x8c>
 800aba8:	2b0b      	cmp	r3, #11
 800abaa:	d903      	bls.n	800abb4 <_malloc_r+0x68>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	441c      	add	r4, r3
 800abb0:	6025      	str	r5, [r4, #0]
 800abb2:	e004      	b.n	800abbe <_malloc_r+0x72>
 800abb4:	6863      	ldr	r3, [r4, #4]
 800abb6:	42a2      	cmp	r2, r4
 800abb8:	bf0c      	ite	eq
 800abba:	600b      	streq	r3, [r1, #0]
 800abbc:	6053      	strne	r3, [r2, #4]
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 f85a 	bl	800ac78 <__malloc_unlock>
 800abc4:	f104 000b 	add.w	r0, r4, #11
 800abc8:	1d23      	adds	r3, r4, #4
 800abca:	f020 0007 	bic.w	r0, r0, #7
 800abce:	1ac2      	subs	r2, r0, r3
 800abd0:	d0cc      	beq.n	800ab6c <_malloc_r+0x20>
 800abd2:	1a1b      	subs	r3, r3, r0
 800abd4:	50a3      	str	r3, [r4, r2]
 800abd6:	e7c9      	b.n	800ab6c <_malloc_r+0x20>
 800abd8:	4622      	mov	r2, r4
 800abda:	6864      	ldr	r4, [r4, #4]
 800abdc:	e7cc      	b.n	800ab78 <_malloc_r+0x2c>
 800abde:	1cc4      	adds	r4, r0, #3
 800abe0:	f024 0403 	bic.w	r4, r4, #3
 800abe4:	42a0      	cmp	r0, r4
 800abe6:	d0e3      	beq.n	800abb0 <_malloc_r+0x64>
 800abe8:	1a21      	subs	r1, r4, r0
 800abea:	4630      	mov	r0, r6
 800abec:	f000 f82e 	bl	800ac4c <_sbrk_r>
 800abf0:	3001      	adds	r0, #1
 800abf2:	d1dd      	bne.n	800abb0 <_malloc_r+0x64>
 800abf4:	e7cf      	b.n	800ab96 <_malloc_r+0x4a>
 800abf6:	bf00      	nop
 800abf8:	200010c4 	.word	0x200010c4
 800abfc:	200010c8 	.word	0x200010c8

0800ac00 <_realloc_r>:
 800ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac02:	4607      	mov	r7, r0
 800ac04:	4614      	mov	r4, r2
 800ac06:	460e      	mov	r6, r1
 800ac08:	b921      	cbnz	r1, 800ac14 <_realloc_r+0x14>
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac10:	f7ff bf9c 	b.w	800ab4c <_malloc_r>
 800ac14:	b922      	cbnz	r2, 800ac20 <_realloc_r+0x20>
 800ac16:	f7ff ff4d 	bl	800aab4 <_free_r>
 800ac1a:	4625      	mov	r5, r4
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	f000 f830 	bl	800ac84 <_malloc_usable_size_r>
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d20f      	bcs.n	800ac48 <_realloc_r+0x48>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	f7ff ff8e 	bl	800ab4c <_malloc_r>
 800ac30:	4605      	mov	r5, r0
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d0f2      	beq.n	800ac1c <_realloc_r+0x1c>
 800ac36:	4631      	mov	r1, r6
 800ac38:	4622      	mov	r2, r4
 800ac3a:	f7ff ff13 	bl	800aa64 <memcpy>
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff ff37 	bl	800aab4 <_free_r>
 800ac46:	e7e9      	b.n	800ac1c <_realloc_r+0x1c>
 800ac48:	4635      	mov	r5, r6
 800ac4a:	e7e7      	b.n	800ac1c <_realloc_r+0x1c>

0800ac4c <_sbrk_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	2300      	movs	r3, #0
 800ac50:	4d05      	ldr	r5, [pc, #20]	; (800ac68 <_sbrk_r+0x1c>)
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7fc fd58 	bl	800770c <_sbrk>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_sbrk_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_sbrk_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20002ac0 	.word	0x20002ac0

0800ac6c <__malloc_lock>:
 800ac6c:	4801      	ldr	r0, [pc, #4]	; (800ac74 <__malloc_lock+0x8>)
 800ac6e:	f000 b811 	b.w	800ac94 <__retarget_lock_acquire_recursive>
 800ac72:	bf00      	nop
 800ac74:	20002ac8 	.word	0x20002ac8

0800ac78 <__malloc_unlock>:
 800ac78:	4801      	ldr	r0, [pc, #4]	; (800ac80 <__malloc_unlock+0x8>)
 800ac7a:	f000 b80c 	b.w	800ac96 <__retarget_lock_release_recursive>
 800ac7e:	bf00      	nop
 800ac80:	20002ac8 	.word	0x20002ac8

0800ac84 <_malloc_usable_size_r>:
 800ac84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac88:	1f18      	subs	r0, r3, #4
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	bfbc      	itt	lt
 800ac8e:	580b      	ldrlt	r3, [r1, r0]
 800ac90:	18c0      	addlt	r0, r0, r3
 800ac92:	4770      	bx	lr

0800ac94 <__retarget_lock_acquire_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <__retarget_lock_release_recursive>:
 800ac96:	4770      	bx	lr

0800ac98 <_init>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr

0800aca4 <_fini>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	bf00      	nop
 800aca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acaa:	bc08      	pop	{r3}
 800acac:	469e      	mov	lr, r3
 800acae:	4770      	bx	lr
